
qrauth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00006768  000067fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000349  0080014e  0080014e  0000684a  2**0
                  ALLOC
  3 .stab         00000990  00000000  00000000  0000684c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000274  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000188  00000000  00000000  00007450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000686  00000000  00000000  000075d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032a9  00000000  00000000  00007c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001030  00000000  00000000  0000af07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a02  00000000  00000000  0000bf37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004e0  00000000  00000000  0000f93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b92  00000000  00000000  0000fe1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004117  00000000  00000000  000109ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000022b  00000000  00000000  00014ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c8  00000000  00000000  00014cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__ctors_end>
       4:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
       8:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
       c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      10:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      14:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      18:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      1c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      20:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      24:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      28:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      2c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      30:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      34:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__vector_13>
      38:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      3c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      40:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      44:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      48:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      4c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      50:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      54:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      58:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      5c:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      60:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>
      64:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <__bad_interrupt>

00000068 <bmp1>:
      68:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      78:	ff ff ff ff ff ff ff ff ff ff 00 00 00 00 ff ff     ................
      88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      98:	ff ff ff ff ff ff ff fc 00 00 00 00 ff ff ff ff     ................
      a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      b8:	ff ff ff ff ff f8 00 00 00 00 ff ff ff ff ff ff     ................
      c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      d8:	ff ff ff f8 00 00 00 00 ff ff ff ff ff ff ff ff     ................
      e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      f8:	ff f0 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
     108:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff f0     ................
     118:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     128:	ff ff ff ff ff ff ff ff ff ff ff ff ff f0 00 00     ................
     138:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     148:	ff ff ff ff ff ff ff ff ff ff ff f0 00 00 00 00     ................
     158:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     168:	ff ff ff ff ff ff ff ff ff e0 00 00 00 00 ff ff     ................
     178:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     188:	ff ff ff ff ff ff ff e0 00 00 00 00 ff ff ff ff     ................
     198:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1a8:	ff ff ff ff ff e0 00 00 00 00 ff ff ff ff ff ff     ................
     1b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1c8:	ff ff ff e0 00 00 00 00 ff ff ff ff ff ff ff ff     ................
     1d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     1e8:	ff e0 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
     1f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
     208:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     218:	ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00 00     ................
     228:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     238:	ff ff ff ff ff ff ff ff ff ff ff e0 00 00 00 00     ................
     248:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     258:	ff ff ff ff ff ff ff ff ff e0 00 00 00 00 ff ff     ................
     268:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     278:	ff ff ff ff ff ff ff e0 00 00 00 00 ff ff ff ff     ................
     288:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     298:	ff ff ff ff ff c0 00 00 00 00 ff ff ff ff ff ff     ................
     2a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2b8:	ff ff ff 80 00 00 00 00 ff ff ff ff ff ff ff ff     ................
     2c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2d8:	ff 80 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
     2e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 80     ................
     2f8:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     308:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00     ................
     318:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     328:	ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00 00     ................
     338:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     348:	ff ff ff ff ff ff ff ff ff 00 00 00 00 00 ff ff     ................
     358:	ef ff ff ff ff ff ff fe 1f ff ff ff ff ff ff ff     ................
     368:	ff ff ff ff ff ff ff 00 00 00 00 00 ff ff e3 ff     ................
     378:	ff ff ff ff ff fc 1e ff ff ff ff ff ff ff ff ff     ................
     388:	ff ff ff ff ff 00 00 00 00 00 ff ff e3 ff ff ff     ................
     398:	ff ff ff f8 18 7f ff ff ff ff ff ff ff ff ff ff     ................
     3a8:	ff ff ff 00 00 00 00 00 ff ff e3 ff ff ff ff ff     ................
     3b8:	ff f0 9c 7f ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3c8:	ff 00 00 00 00 00 ff ff e3 ff ff ff ff ff ff f1     ................
     3d8:	9c 7f ff ff ff ff ff ff ff ff ff ff ff ff fe 00     ................
     3e8:	00 00 00 00 ff ff f1 ff ff ff ff ff ff f1 9c 7f     ................
     3f8:	ff ff ff ff ff ff ff ff ff ff ff ff fe 00 00 00     ................
     408:	00 00 ff ff e0 00 ff ff ff ff ff f1 9c 7f ff ff     ................
     418:	ff ff ff ff ff ff ff ff ff ff fe 00 00 00 00 00     ................
     428:	ff ff e0 00 ff ff ff ff ff f1 98 7f ff ff ff ff     ................
     438:	ff ff ff ff ff ff ff ff fc 00 00 00 00 00 ff ff     ................
     448:	e0 00 ff ff e1 ff ff f8 98 ff ff ff ff ff ff ff     ................
     458:	ff ff ff ff ff ff fc 00 00 00 00 00 ff ff ff ff     ................
     468:	ff ff c1 ef ff f8 00 ff ff ff ff ff ff ff ff ff     ................
     478:	ff ff ff ff fc 00 00 00 00 01 ff ff ff ff ff ff     ................
     488:	81 87 ff fc 01 ff ff ff ff ff ff ff ff ff ff ff     ................
     498:	ff ff fc 00 00 00 00 01 ff ff e0 00 ff ff 09 c7     ................
     4a8:	ff ff 07 ff ff bf ff ff ff ff ff ff ff ff ff ff     ................
     4b8:	fc 00 00 00 00 01 ff ff e0 00 ff ff 19 c7 ff ff     ................
     4c8:	ff ff ff 8f ff ff ff ff ff ff ff ff ff ff fc 00     ................
     4d8:	00 00 00 03 ff ff e0 00 ff ff 19 c7 ff ff ff ff     ................
     4e8:	ff 8f ff ff ff ff ff ff ff ff ff ff fe 00 00 00     ................
     4f8:	00 07 ff ff ff f1 ff ff 19 c7 ff ff ff ff ff 8f     ................
     508:	ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00 07     ................
     518:	ff ff ff f8 ff ff 19 87 ff fe 00 7f ff 8f ff ff     ................
     528:	ff ff ff ff ff ff ff ff fc 00 00 00 00 07 ff ff     ................
     538:	ff f8 ff ff 89 8f ff f8 00 7f ff c7 ff ff ff ff     ................
     548:	ff ff ff ff ff ff f8 c0 00 00 00 0f ff ff ff f8     ................
     558:	ff ff 80 0f ff f0 00 7f ff 80 03 ff ff ff ff ff     ................
     568:	ff ff ff ff e1 f0 00 00 00 0f ff ff ff f0 ff ff     ................
     578:	c0 1f ff f0 ff ff ff 80 03 ff ff ff ff ff ff ff     ................
     588:	ff ff 87 f0 00 00 00 1f ff ff e0 00 ff ff f0 7f     ................
     598:	ff f1 ff ff ff 80 03 ff ff ff ff ff ff ff ff ff     ................
     5a8:	1f f0 00 00 00 1f ff ff e0 01 ff ff ff ff ff f1     ................
     5b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff fc 7f f8     ................
     5c8:	00 00 00 3f ff ff e0 03 ff ff ff ff ff f1 ff ff     ...?............
     5d8:	ff ff ff ff ff ff ff ff ff ff ff f1 ff fe 00 00     ................
     5e8:	00 7f ff ff ff ff ff e0 00 07 ff f8 ff ff ff f0     ................
     5f8:	ff ff ff ff ff ff ff ff ff 83 ff ff 00 00 00 ff     ................
     608:	ff ff ff ff ff e0 00 07 fe 00 00 7f ff e0 f7 ff     ................
     618:	ff ff ff ff ff fc 00 1f ff ff 80 00 01 ff ff ff     ................
     628:	ff ff ff f0 00 07 fe 00 00 7f ff c0 c3 ff ff ff     ................
     638:	ff ff ff f8 ff ff ff ff c0 00 07 ff ff ff fe 0f     ................
     648:	ff ff 1f c7 ff 00 00 7f ff 84 e3 ff ff ff ff ff     ................
     658:	ff f1 ff ff ff ff f0 00 1f ff ff ff f8 03 ff ff     ................
     668:	1f c7 ff ff ff ff ff 8c e3 ff ff ff ff ff ff f1     ................
     678:	ff ff ff ff e6 00 7f ff ff ff f0 01 ff ff 1f c7     ................
     688:	ff ff ff ff ff 8c e3 ff ff ff ff ff ff f0 7f ff     ................
     698:	ff ff 8f 01 ff ff ff ff e1 f0 ff ff 1f c7 ff f1     ................
     6a8:	fc 7f ff 8c e3 ff ff ff ff ff ff f2 0f ff ff ff     ................
     6b8:	1f 87 ff ff ff ff e3 f8 ff ff 0f 87 ff f1 fc 7f     ................
     6c8:	ff 8c c3 ff ff ff ff ff ff f3 80 1f ff fe 7f ff     ................
     6d8:	ff ff ff ff e3 f8 ff ff 87 87 ff f1 fc 7f ff c4     ................
     6e8:	c7 ff ff ff ff ff ff f3 ff c0 7f f8 ff ff ff ff     ................
     6f8:	ff ff e3 f8 ff ff 80 0f ff 00 00 7f ff c0 07 ff     ................
     708:	ff ff ff ff ff f3 ff f8 3f f3 ff ff ff ff ff ff     ........?.......
     718:	e3 f8 ff ff c0 1f ff 80 00 ff ff e0 0f ff ff ff     ................
     728:	ff ff ff f3 ff f9 9f e7 ff ff ff ff ff ff e1 f0     ................
     738:	ff ff f0 3f ff 80 01 ff ff f8 3f ff ff ff ff ff     ...?......?.....
     748:	ff f3 ff f9 ff cf ff ff ff ff ff ff f0 01 ff ff     ................
     758:	ff ff ff f1 ff ff ff ff ff ff ff ff ff ff ff f3     ................
     768:	ff f9 ff 9f ff ff ff ff ff ff f8 03 ff ff ff ff     ................
     778:	ff ff ff ff ff ff ff ff ff ff ff ff ff f3 ff f9     ................
     788:	ff 3f ff ff ff ff ff ff fe 0f ff ff f0 7f ff ff     .?..............
     798:	ff ff ff ff ff ff ff ff ff ff ff f3 ff f9 fe 7f     ................
     7a8:	ff ff ff ff ff ff ff ff ff ff c0 1f ff ff ff ff     ................
     7b8:	ff f0 03 ff ff ff ff ff ff f3 ff f9 fc ff ff ff     ................
     7c8:	ff ff ff ff ef ff ff ff 80 0f ff ff ff ff ff c0     ................
     7d8:	03 ff ff ff ff ff ff f3 ff f9 f9 ff ff ff ff ff     ................
     7e8:	ff ff e3 ff ff ff 0f 87 ff ff ff ff ff c0 03 ff     ................
     7f8:	ff ff ff ff ff f3 ff f9 f3 ff ff ff ff ff ff ff     ................
     808:	e0 ff ff ff 1f c7 ff ff ff ff ff 87 ff ff ff ff     ................
     818:	ff ff ff f3 ff f9 e7 ff ff ff ff ff ff ff f0 1f     ................
     828:	ff ff 1f c7 ff ff ff ff ff 8f ff ff ff ff ff ff     ................
     838:	ff f3 ff f9 cf ff ff ff ff ff ff ff fc 07 ff ff     ................
     848:	1f c7 ff ff ff ff ff 8f ff ff ff ff ff ff ff f3     ................
     858:	ff f9 1f ff ff ff ff ff ff ff ff 01 ff ff 1f c7     ................
     868:	ff ff ff ff ff 8f ff ff ff ff ff ff ff f3 ff f8     ................
     878:	7f ff ff ff ff ff ff ff ff e0 7f ff 0f 87 ff f7     ................
     888:	ff ff ff c7 ff ff ff ff ff ff ff f3 ff f8 ff ff     ................
     898:	ff ff ff ff ff ff ff c0 1f ff 80 0f ff f1 ff ff     ................
     8a8:	ff c0 03 ff ff ff ff ff ff f3 ff f9 ff ff ff ff     ................
     8b8:	ff ff ff ff fe 00 0f ff c0 1f ff f1 ff ff ff 80     ................
     8c8:	03 ff ff ff ff ff ff f3 ff f9 ff ff ff ff ff ff     ................
     8d8:	ff ff f0 03 87 ff f0 7f ff f1 ff ff ff 80 03 ff     ................
     8e8:	ff ff ff ff ff f3 ff f9 ff ff ff ff ff ff ff ff     ................
     8f8:	e0 1f c7 ff ff ff ff f1 ff ff ff ff ff ff ff ff     ................
     908:	ff ff ff f3 ff f9 ff ff ff ff ff ff ff ff e0 ff     ................
     918:	c7 ff bf ef ff f8 ff ff ff ff ff ff ff ff ff ff     ................
     928:	ff f3 ff f9 ff ff ff ff ff ff ff ff e7 ff ff ff     ................
     938:	0f 87 ff f0 00 7f ff ff ff ff ff ff ff ff ff f3     ................
     948:	ff f9 ff ff ff ff ff ff ff ff ff ff ff ff 1f c7     ................
     958:	ff f0 00 7f ff f0 03 ff ff ff ff ff ff f3 ff f9     ................
     968:	ff ff ff ff ff ff ff ff ff ff ff ff 1f c7 ff f0     ................
     978:	00 7f ff c0 03 ff ff ff ff ff ff f3 ff f9 ff ff     ................
     988:	ff ff ff ff ff ff ff ff ff ff 1f c7 ff ff ff ff     ................
     998:	ff c0 03 ff ff ff ff ff ff f1 ff f1 ff ff ff ff     ................
     9a8:	ff ff ff ff ff ff ff ff 1f c7 ff ff ff ff ff 87     ................
     9b8:	ff ff ff ff ff ff ff f8 00 03 ff ff ff ff ff ff     ................
     9c8:	ff ff ff ff ff ff 0f 87 ff fe 1f ff ff 8f ff ff     ................
     9d8:	ff ff ff ff ff fc 00 07 ff ff ff ff ff ff ff ff     ................
     9e8:	ff ff ff ff 87 8f ff fc 1e ff ff 8f ff ff ff ff     ................
     9f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a08:	ff ff 80 0f ff f8 18 7f ff 8f ff ff ff ff ff ff     ................
     a18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a28:	c0 1f ff f0 9c 7f ff c7 ff ff ff ff ff ff ff ff     ................
     a38:	ff ff ff ff ff ff ff ff ff fc 00 00 ff ff f0 7f     ................
     a48:	ff f1 9c 7f ff c0 03 ff ff ff ff ff ff ff ff ff     ................
     a58:	ff ff ff ff ff ff ff fc 00 00 ff ff ff ff ff f1     ................
     a68:	9c 7f ff 80 03 ff ff ff ff ff ff ff ff ff ff ff     ................
     a78:	ff ff ff ff ff fe 00 00 ff ff ff ff ff f1 9c 7f     ................
     a88:	ff 80 03 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a98:	ff ff ff ff e3 f8 ff ff ff ff ff f1 98 7f ff ff     ................
     aa8:	ff ff ff ff ff ff ff ff f3 ff ff ff ff ff ff ff     ................
     ab8:	ff ff e3 f8 ff ff f1 ff ff f8 98 ff ff ff ff ff     ................
     ac8:	ff ff ff ff ff ff f3 ff ff ff ff ff ff ff ff ff     ................
     ad8:	e3 f8 ff ff f1 ff ff f8 00 ff ff ff f3 ff ff ff     ................
     ae8:	ff ff ff ff f3 ff ff ff ff ff ff ff ff ff e3 f8     ................
     af8:	ff ff f1 ff ff fc 01 ff ff f0 03 ff ff ff ff ff     ................
     b08:	ff ff f3 ff ff ff ff ff ff ff ff ff e1 f0 ff ff     ................
     b18:	f1 ff ff ff 07 ff ff c0 03 ff ff ff ff ff ff ff     ................
     b28:	f3 ff ff ff ff ff ff ff ff ff f0 f0 ff ff f1 ff     ................
     b38:	ff ff ff ff ff c0 03 ff ff ff ff ff ff ff f3 ff     ................
     b48:	ff ff ff ff ff ff ff ff f0 01 ff ff f1 ff ff ff     ................
     b58:	ff ff ff 84 63 ff ff ff ff ff ff ff f3 ff ff ff     ....c...........
     b68:	ff ff ff ff ff ff f8 03 ff ff ff ff fe 00 00 7f     ................
     b78:	ff 8c 63 ff ff 80 00 00 ff ff f3 ff ff ff ff ff     ..c.............
     b88:	ff ff ff ff fe 07 ff ff ff f7 fe 00 00 7f ff 8c     ................
     b98:	63 ff ff 80 00 00 ff ff f3 ff ff ff ff ff ff ff     c...............
     ba8:	ff ff ff ff ff ff ff e7 ff 00 00 7f ff 8c 63 ff     ..............c.
     bb8:	ff 80 00 00 ff ff 80 7f ff ff ff ff ff ff ff ff     ................
     bc8:	ff ff ff fe 1f 87 ff f1 fc 7f ff 8e 03 ff ff 80     ................
     bd8:	00 00 ff ff c0 ff ff ff ff ff ff ff ff ff ff fe     ................
     be8:	ff f8 0f 0f ff f1 fc 7f ff ce 07 ff ff 80 00 00     ................
     bf8:	ff ff c0 ff ff ff ff ff ff ff ff fc 00 00 ff f8     ................
     c08:	04 1f ff f1 fc 7f ff ff 0f ff ff 80 00 00 ff ff     ................
     c18:	e1 ff ff ff ff ff ff ff ff fc 00 00 ff f0 c0 3f     ...............?
     c28:	ff f1 fc 7f ff ff ff ff ff 80 00 00 ff ff e1 ff     ................
     c38:	ff ff ff ff ff ff ff fe 00 01 ff f1 e0 ff ff f0     ................
     c48:	f8 7f ff df f7 ff ff 80 00 00 ff ff f3 ff ff ff     ................
     c58:	ff ff ff ff ff ff ff ff ff f1 e1 ff ff f8 78 7f     ..............x.
     c68:	ff 87 c3 ff ff 80 00 00 ff ff f3 ff ff ff ff ff     ................
     c78:	ff ff ff ff ff ff ff f1 e3 ff ff f8 00 ff ff 8f     ................
     c88:	e3 ff ff 80 00 00 ff ff ff ff ff ff ff ff ff ff     ................
     c98:	ff ff ff ff ff f1 e3 ff ff fc 01 ff ff 8f e3 ff     ................
     ca8:	ff 80 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cb8:	fe 0f ff f0 00 07 ff ff 03 ff ff 8f e3 ff ff 80     ................
     cc8:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff f8 03     ................
     cd8:	ff f0 00 07 ff ff ff ff ff 8f e3 ff ff 80 00 00     ................
     ce8:	ff ff ff ff ff ff ff ff ff ff ff ff f0 01 ff f0     ................
     cf8:	00 07 ff ff ff ff ff 87 c3 ff ff 80 00 00 ff ff     ................
     d08:	ff ff ff ff ff ff ff ff ff ff e1 f0 ff ff ff ff     ................
     d18:	ff ff ff ff ff c3 c7 ff ff 80 00 00 ff ff ff ff     ................
     d28:	ff ff ff ff ff ff ff ff e3 f8 ff ff ff f8 ff fe     ................
     d38:	00 7f ff c0 07 ff ff 80 00 00 ff ff ff ff ff ff     ................
     d48:	ff ff ff ff ff ff e3 f8 ff ff ff f8 ff f8 00 7f     ................
     d58:	ff e0 0f ff ff ff 1f ff ff ff ff ff ff ff ff ff     ................
     d68:	ff ff ff ff e3 f8 ff ff 80 f8 ff f8 00 7f ff f8     ................
     d78:	3f ff ff ff 1f ff ff ff ff ff ff ff ff ff ff ff     ?...............
     d88:	ff ff e3 f8 ff fe 00 38 ff f0 ff ff ff ff ff ff     .......8........
     d98:	ff fe 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     da8:	e1 f0 ff fc 00 18 ff f1 ff ff ff ff ff ff ff 82     ................
     db8:	3f ff ff ff ff ff ff ff ff ff ff ff ff ff f0 01     ?...............
     dc8:	ff f8 3e 01 ff f1 ff ff ff df 8f ff ff 00 3f ff     ..>...........?.
     dd8:	ff ff ff ff ff ff ff ff ff ff ff ff f8 03 ff f8     ................
     de8:	ff 81 ff f1 ff ff ff 8e 07 ff ff 80 0f ff ff ff     ................
     df8:	ff ff ff ff ff ff ff ff ff ff fe 0f ff f1 ff c3     ................
     e08:	ff f8 ff ff ff 8e 03 ff ff f8 01 ff ff ff ff ff     ................
     e18:	ff ff ff ff ff ff ff ff ff ff ff f1 ff c7 ff f8     ................
     e28:	00 7f ff 8c 63 ff ff ff 00 3f ff ff ff ff ff ff     ....c....?......
     e38:	ff ff ff ff ff ff ff ff ff f1 ff c7 ff f0 00 7f     ................
     e48:	ff 8c 63 ff ff ff e0 07 ff ff ff ff ff ff 83 ff     ..c.............
     e58:	ff ff ff fe 00 00 ff f1 ff c7 ff f0 00 7f ff 88     ................
     e68:	e3 ff ff ff fc 00 ff ff ff ff ff ff 03 ff ff ff     ................
     e78:	ff fe 00 00 ff f1 ff c7 ff ff ff ff ff 80 e3 ff     ................
     e88:	ff ff ff 80 1f ff ff ff ff ff 03 ff ff ff ff fe     ................
     e98:	00 00 ff f8 ff 8f ff ff ff ff ff c1 e3 ff ff ff     ................
     ea8:	ff f0 03 ff ff ff ff ff 03 ff ff ff ff ff f8 ff     ................
     eb8:	ff f8 3e 0f ff f0 00 7f ff e3 f7 ff ff ff ff fe     ..>.............
     ec8:	00 7f ff ff ff ff 03 ff ff ff ff ff f8 ff ff fc     ................
     ed8:	00 1f ff f0 00 7f ff ff ff ff ff ff ff ff c0 0f     ................
     ee8:	ff ff ff ff 03 ff ff ff ff ff f8 ff ff fe 00 3f     ...............?
     ef8:	ff f0 00 7f ff ff ff ff ff ff ff ff f8 01 ff ff     ................
     f08:	ff ff 03 ff 81 ff ff ff f8 ff ff ff 80 ff ff ff     ................
     f18:	f8 ff ff ff ff ff ff ff ff ff ff 00 1f ff ff ff     ................
     f28:	03 ff 01 ff ff ff f8 ff ff ff ff ff ff ff fc 7f     ................
     f38:	ff ff ff ff ff ff ff ff ff e0 03 ff ff ff 83 fe     ................
     f48:	03 ff ff ff f8 ff ff ff ff ff ff ff fc 7f ff ff     ................
     f58:	ff ff ff ff ff ff ff fc 00 7f ff ff 81 fc 07 ff     ................
     f68:	ff ff f8 ff ff ff ff ff ff ff fc 7f ff ff ff ff     ................
     f78:	ff ff ff ff ff ff c0 0f ff ff 81 f8 0f ff ff fe     ................
     f88:	00 00 ff ff ff ff ff ff f8 7f ff ff ff ff ff ff     ................
     f98:	ff ff ff ff f8 01 ff ff 81 f0 1f ff ff fe 00 00     ................
     fa8:	ff ff ff ff ff f0 00 7f ff ff ff ff ff ff ff ff     ................
     fb8:	ff ff ff 00 3f ff 81 e0 3f ff ff fe 00 00 ff ff     ....?...?.......
     fc8:	ff ff ff f0 00 ff ff ff ff ff ff ff ff ff ff ff     ................
     fd8:	ff e0 07 ff 81 c0 7f ff ff ff ff ff ff ff ff ff     ................
     fe8:	ff f0 01 ff ff ff ff ff ff ff ff ff ff ff ff fc     ................
     ff8:	00 ff 81 80 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1008:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 80 1f     ................
    1018:	81 01 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1028:	ff ff ff ff ff ff ff ff ff ff ff ff f0 03 c0 03     ................
    1038:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1048:	ff ff ff ff ff ff ff ff ff ff fe 00 40 07 ff ff     ............@...
    1058:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1068:	ff ff ff ff ff ff ff ff ff c0 00 0f ff ff ff ff     ................
    1078:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1088:	ff ff ff ff ff ff ff f8 00 1f ff ff ff ff ff ff     ................
    1098:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10a8:	ff ff ff ff ff ff 00 3f ff ff ff ff ff ff ff ff     .......?........
    10b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10c8:	ff ff ff ff e0 7f ff ff ff ff ff ff ff ff ff ff     ................
    10d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    10f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1108:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1118:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1128:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1138:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1148:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1158:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1168:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1178:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1188:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1198:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1208:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1218:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1228:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1238:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1248:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1258:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1268:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1278:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1288:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1298:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1308:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1318:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00001328 <bmp2>:
    1328:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1338:	ff ff ff ff ff 80 00 00 00 00 1f ff ff ff ff ff     ................
    1348:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1358:	ff ff ff 00 00 00 00 00 1f ff ff ff ff ff ff ff     ................
    1368:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1378:	fe 00 00 00 00 00 1f ff ff ff ff ff ff ff ff ff     ................
    1388:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff fc 00     ................
    1398:	00 00 00 00 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    13a8:	ff ff ff ff ff ff ff ff ff ff ff ff fc 00 00 00     ................
    13b8:	00 00 3f ff ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
    13c8:	ff ff ff ff ff ff ff ff ff ff fc 00 00 00 00 00     ................
    13d8:	3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ?...............
    13e8:	ff ff ff ff ff ff ff ff f8 00 00 00 00 00 7f ff     ................
    13f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1408:	ff ff ff ff ff ff f8 00 00 00 00 00 7f ff ff ff     ................
    1418:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1428:	ff ff ff ff f0 00 00 00 00 00 ff ff ff ff ff ff     ................
    1438:	ff ff ff ff 80 00 00 3f ff ff ff ff ff ff ff ff     .......?........
    1448:	ff ff f0 00 00 00 00 00 ff ff ff ff ff ff ff ff     ................
    1458:	ff ff 80 00 00 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    1468:	e0 00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    1478:	c0 00 00 3f ff ff ff ff ff ff ff ff ff ff e0 00     ...?............
    1488:	00 00 00 00 ff ff ff ff ff ff ff ff ff ff c0 00     ................
    1498:	00 3f ff ff ff ff ff ff ff ff ff ff c0 00 00 00     .?..............
    14a8:	00 01 ff ff ff ff ff ff ff ff ff ff ff c3 f8 7f     ................
    14b8:	ff ff ff ff ff ff ff ff ff ff c0 00 00 00 00 01     ................
    14c8:	ff ff ff ff ff ff f8 3f ff ff ff 87 fc 3f ff ff     .......?.....?..
    14d8:	ff ff ff ff ff ff ff ff 80 00 00 00 00 03 ff ff     ................
    14e8:	ff ff ff ff f0 3e ff ff ff 87 fc 3f ff ff ff ff     .....>.....?....
    14f8:	ff ff ff ff ff ff 80 00 00 00 00 03 ff ff ff ff     ................
    1508:	ff ff e0 38 7f ff ff 87 fc 3f ff ff f8 3f ff ff     ...8.....?...?..
    1518:	ff ff ff ff 80 00 00 00 00 03 ff ff ff ff ff ff     ................
    1528:	c0 38 7f ff ff 87 fc 3f ff ff f0 3e ff ff ff ff     .8.....?...>....
    1538:	ff ff 80 00 00 00 00 07 ff ff ff ff ff ff c2 3c     ...............<
    1548:	3f ff ff 83 fc 3f ff ff e0 38 7f ff ff ff ff ff     ?....?...8......
    1558:	80 00 00 00 00 07 ff ff ff ff ff ff 86 3c 3f ff     .............<?.
    1568:	ff 83 f8 3f ff ff c0 38 7f ff ff ff ff ff c0 00     ...?...8........
    1578:	00 00 00 0f ff ff ff ff ff ff 86 3c 3f ff ff c1     ...........<?...
    1588:	f0 7f ff ff c2 3c 3f ff ff ff ff ff e0 00 00 00     .....<?.........
    1598:	00 0f ff ff ff ff ff ff 86 3c 3f ff ff e0 00 7f     .........<?.....
    15a8:	ff ff 86 3c 3f ff ff ff ff ff f0 00 00 00 00 1f     ...<?...........
    15b8:	ff ff ff ff ff ff 86 3c 3f ff ff e0 00 ff ff ff     .......<?.......
    15c8:	86 3c 3f ff ff ff ff ff f0 00 00 00 00 7f ff ff     .<?.............
    15d8:	ff ff ff ff 86 3c 3f ff ff f8 01 ff ff ff 86 3c     .....<?........<
    15e8:	3f ff ff ff ff ff f0 00 00 00 00 ff ff ff ff ff     ?...............
    15f8:	ff ff 86 38 3f ff ff fe 07 ff ff ff 86 3c 3f ff     ...8?........<?.
    1608:	ff ff ff ff e0 00 00 00 00 ff ff ff ff ff ff ff     ................
    1618:	c2 38 7f ff ff ff ff ff ff ff 86 3c 3f ff ff ff     .8.........<?...
    1628:	ff ff c8 00 00 00 01 ff ff ff ff ff ff ff c2 30     ...............0
    1638:	7f ff ff ff ff ff ff ff 86 38 3f ff ff ff ff ff     .........8?.....
    1648:	98 00 00 00 01 ff ff ff ff ff ff ff e0 00 7f ff     ................
    1658:	ff f8 3f ff ff ff c2 38 7f ff ff ff ff ff 1c 00     ..?....8........
    1668:	00 00 03 ff ff ff ff ff ff ff e0 00 ff ff ff f0     ................
    1678:	3e ff ff ff c2 30 7f ff ff ff ff ff 3e 00 00 00     >....0......>...
    1688:	07 ff ff ff ff ff ff ff f8 01 ff ff ff e0 38 7f     ..............8.
    1698:	ff ff e0 00 7f ff ff ff ff fe 7f 00 00 00 07 ff     ................
    16a8:	ff ff ff ff ff ff fe 07 ff ff ff c0 38 7f ff ff     ............8...
    16b8:	e0 00 ff ff ff ff ff fc ff 80 00 00 0f ff ff ff     ................
    16c8:	ff ff ff ff ff ff ff ff ff c2 3c 3f ff ff f8 01     ..........<?....
    16d8:	ff ff ff ff ff fd ff 80 00 00 1f ff ff ff ff ff     ................
    16e8:	ff ff ff ff ff ff ff 86 3c 3f ff ff fe 07 ff ff     ........<?......
    16f8:	ff ff ff f9 ff c0 00 00 1f ff ff ff ff ff ff ff     ................
    1708:	ff ff ff ff ff 86 3c 3f ff ff ff ff ff ff ff ff     ......<?........
    1718:	ff f3 ff e0 00 00 3f ff ff ff ff ff ff ff ff ff     ......?.........
    1728:	ff ff ff 86 3c 3f ff ff ff ff ff ff ff ff ff e7     ....<?..........
    1738:	ff fc 00 00 3f ff ff ff ff ff ff ff f8 00 3f ff     ....?.........?.
    1748:	ff 86 3c 3f ff ff ff ff ff ff ff ff ff cf ff fc     ..<?............
    1758:	00 00 7f ff ff ff ff ff ff ff e0 00 3f ff ff 86     ............?...
    1768:	3c 3f ff 80 00 00 3f ff ff ff ff 9f ff fe 00 01     <?....?.........
    1778:	ff ff ff ff ff ff ff ff c0 00 3f ff ff 86 38 3f     ..........?...8?
    1788:	ff 80 00 00 3f ff ff ff ff 3f ff fe 00 07 ff ff     ....?....?......
    1798:	ff ff ff ff ff ff c0 00 3f ff ff c2 38 7f ff c0     ........?...8...
    17a8:	00 00 3f ff ff ff fe 7f ff fe 00 07 ff ff ff ff     ..?.............
    17b8:	ff ff ff ff 83 ff ff ff ff c2 30 7f ff c0 00 00     ..........0.....
    17c8:	3f ff ff ff fc ff ff fc c0 1f ff ff ff ff ff ff     ?...............
    17d8:	ff ff 83 ff ff ff ff e0 00 7f ff ff c3 f8 7f ff     ................
    17e8:	ff ff f9 ff ff f8 e0 7f ff ff ff ff ff ff ff ff     ................
    17f8:	87 ff ff ff ff e0 00 ff ff ff 87 fc 3f ff ff ff     ............?...
    1808:	f3 ff ff f9 ff ff ff ff ff ff ff ff ff ff 87 ff     ................
    1818:	ff ff ff f8 01 ff ff ff 87 fc 3f ff ff ff e7 ff     ..........?.....
    1828:	ff f3 ff ff ff ff ff ff ff ff ff ff 87 ff ff ff     ................
    1838:	ff fe 07 ff ff ff 87 fc 3f ff ff ff cf ff ff f3     ........?.......
    1848:	ff ff ff ff ff ff ff ff ff ff c7 ff ff ff ff ff     ................
    1858:	ff ff ff ff 87 fc 3f ff ff ff 9f f7 ff e7 ff ff     ......?.........
    1868:	ff ff ff ff ff ff ff ff c3 ff ff ff ff bf ff ff     ................
    1878:	ff ff 83 fc 3f ff ff ff 9f f3 ff e7 ff ff ff ff     ....?...........
    1888:	ff ff ff ff ff 80 00 00 3f ff ff 87 ff ff ff ff     ........?.......
    1898:	83 f8 3f ff ff ff 3f f9 ff cf ff ff ff ff ff ff     ..?...?.........
    18a8:	ff ff ff 80 00 00 3f ff ff 81 ff ff ff ff c1 f0     ......?.........
    18b8:	7f ff ff fe 7f f8 ff 9f ff ff ff ff ff ff ff ff     ................
    18c8:	ff c0 00 00 3f ff ff 80 3f ff ff ff e0 00 7f ff     ....?...?.......
    18d8:	ff fc 7f f8 ff 9f ff ff ff ff ff ff ff ff ff c0     ................
    18e8:	00 00 3f ff ff c0 0f ff ff ff e0 00 ff ff f8 00     ..?.............
    18f8:	00 01 ff 3f ff ff ff ff ff ff ff ff ff ff ff ff     ...?............
    1908:	ff ff ff f8 01 ff ff ff f8 01 ff ff f0 00 00 00     ................
    1918:	fe 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    1928:	ff fe 00 7f ff ff fe 07 ff ff e3 ff ff fd fe 7f     ................
    1938:	ff ff ff ff ff ff ff ff ff ff ff f8 3f ff ff ff     ............?...
    1948:	c0 0f ff ff ff ff ff ff e7 ff ff fc fe 7f ff ff     ................
    1958:	ff ff ff ff ff ff ff ff 87 fc 3f ff ff ff f8 03     ..........?.....
    1968:	ff ff ff ff ff ff e7 ff ff fc fc ff ff ff ff ff     ................
    1978:	ff ff ff ff ff ff 87 fc 3f ff ff ff e0 01 ff ff     ........?.......
    1988:	ff ff ff ff e7 ff ff fe 7c ff ff ff ff ff ff ff     ........|.......
    1998:	ff ff ff ff 87 fc 3f ff ff ff 00 00 ff ff fc 07     ......?.........
    19a8:	ff ff e7 ff ff fe 7c ff ff ff ff ff ff ff ff ff     ......|.........
    19b8:	ff ff 87 fc 3f ff ff fc 00 f0 ff ff f0 01 ff ff     ....?...........
    19c8:	e7 ff ff fe 7c ff ff ff ff ff ff ff ff ff ff ff     ....|...........
    19d8:	87 f8 3f ff ff f0 03 f8 7f ff e0 00 ff ff e7 ff     ..?.............
    19e8:	ff fe 7c ff ff ff ff ff ff ff ff ff ff f0 00 00     ..|.............
    19f8:	3f ff ff c0 1f f8 7f ff c0 00 7f ff e7 ff ff fe     ?...............
    1a08:	7c ff ff ff ff ff ff ff ff ff ff f8 00 00 7f ff     |...............
    1a18:	ff 80 7f f8 7f ff c1 f0 7f ff e7 ff ff fe 7c ff     ..............|.
    1a28:	ff ff ff ff ff ff ff ff ff f8 00 00 7f ff ff 81     ................
    1a38:	ff f8 7f ff 83 f8 3f ff e7 ff ff fe 7c ff ff ff     ......?.....|...
    1a48:	ff ff ff ff ff ff ff f8 00 01 ff ff ff 8f ff ff     ................
    1a58:	ff ff 87 fc 3f ff e7 ff ff fe 7c ff ff ff ff ff     ....?.....|.....
    1a68:	ff ff ff ff ff ff 87 ff ff ff ff bf ff ff ff ff     ................
    1a78:	87 fc 3f ff e7 ff ff fe 3c ff ff ff ff ff ff ff     ..?.....<.......
    1a88:	ff ff ff ff 87 ff ff ff ff ff ff ff ff ff 87 fc     ................
    1a98:	3f ff e7 ff ff fe 3c ff ff ff ff ff ff ff ff ff     ?.....<.........
    1aa8:	ff ff ff ff ff ff ff ff ff 3f ff ff 87 fc 3f ff     .........?....?.
    1ab8:	e7 ff ff ff 3c ff ff ff ff ff ff ff ff ff ff ff     ....<...........
    1ac8:	ff ff ff ff ff f8 00 3f ff ff 83 f8 3f ff e7 ff     .......?....?...
    1ad8:	ff ff 9c ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ae8:	ff ff ff e0 00 3f ff ff c1 f0 7f ff e7 ff ff ff     .....?..........
    1af8:	99 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b08:	ff c0 00 3f ff ff c0 00 7f ff e3 ff ff ff c1 ff     ...?............
    1b18:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff c0     ................
    1b28:	00 7f ff ff e0 00 ff ff f0 00 00 00 03 ff ff ff     ................
    1b38:	ff ff ff ff ff ff ff ff ff ff ff ff ff 82 18 7f     ................
    1b48:	ff ff f0 01 ff ff f8 00 00 00 07 ff ff ff ff ff     ................
    1b58:	ff ff ff ff ff ff ff ff ff ff ff 86 1c 7f ff ff     ................
    1b68:	fc 07 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b78:	ff ff ff ff ff ff ff ff ff 86 1c 3f ff ff ff ff     ...........?....
    1b88:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1b98:	ff ff ff ff ff ff ff 86 1c 3f ff ff ff ff ff ff     .........?......
    1ba8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bb8:	ff ff ff ff ff 86 1c 3f ff ff ef fe ff ff ff ff     .......?........
    1bc8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bd8:	ff ff ff 86 1c 3f ff ff c3 f0 7f ff ff ff 9f ff     .....?..........
    1be8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1bf8:	ff 87 08 3f ff ff 83 f8 7f ff ff ff 9f ff ff ff     ...?............
    1c08:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 83     ................
    1c18:	00 3f ff ff 83 fc 3f ff ff ff 9f ff ff ff ff ff     .?....?.........
    1c28:	ff ff ff ff ff ff ff ff f8 00 3f ff ff cf 80 7f     ..........?.....
    1c38:	ff ff 87 fc 3f ff ff ff 9f ff ff ff ff ff ff ff     ....?...........
    1c48:	ff ff ff ff ff ff e0 00 3f ff ff ff 80 7f ff ff     ........?.......
    1c58:	87 fc 3f ff ff ff 9f ff ff ff ff ff ff ff ff ff     ..?.............
    1c68:	ff ff ff ff c0 00 3f ff ff ff e1 ff ff ff 87 fc     ......?.........
    1c78:	3f ff ff ff 9f ff ff ff ff ff ff ff ff ff ff ff     ?...............
    1c88:	ff ff c0 00 3f ff ff ff ff ff ff ff 87 fc 3f ff     ....?.........?.
    1c98:	ff ff 9f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ca8:	83 ff ff ff ff ff ff ff ff ff 83 fc 3f ff ff ff     ............?...
    1cb8:	9f ff ff ff ff ff ff ff ff ff ff ff ff ff 87 ff     ................
    1cc8:	ff ff ff ff ff 7f ff ff c3 f8 3f ff ff ff 9f ff     ..........?.....
    1cd8:	ff ff ff ff ff ff ff ff ff ff ff ff 87 ff ff ff     ................
    1ce8:	ff ff fe 3f ff ff c1 f0 7f ff ff fc 03 ff ff ff     ...?............
    1cf8:	ff ff ff ff ff ff ff ff ff ff 87 ff ff ff 80 00     ................
    1d08:	00 3f ff ff e0 00 7f ff ff fe 07 ff ff ff ff ff     .?..............
    1d18:	ff ff ff ff ff ff ff ff 87 ff ff ff 80 00 00 3f     ...............?
    1d28:	ff ff e0 00 ff ff ff fe 07 ff ff ff ff ff ff ff     ................
    1d38:	ff ff ff ff ff ff 87 ff ff ff c0 00 00 3f ff ff     .............?..
    1d48:	f8 01 ff ff ff ff 0f ff ff ff ff ff ff ff ff ff     ................
    1d58:	ff ff ff ff c3 ff ff ff c0 00 00 7f ff ff fe 07     ................
    1d68:	ff ff ff ff 0f ff ff ff ff ff ff ff ff ff ff ff     ................
    1d78:	ff ff c0 00 3f ff ff ff ff ff ff ff ff ff ff ff     ....?...........
    1d88:	ff ff 9f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1d98:	80 00 3f ff ff ff ff ff ff ff ff ff ff ff ff ff     ..?.............
    1da8:	9f ff ff ff ff ff ff ff ff ff ff ff ff ff 80 00     ................
    1db8:	3f ff ff ff ff ff ff ff fc 3f ff ff ff ff ff ff     ?........?......
    1dc8:	ff ff ff ff ff ff ff ff ff ff ff ff 80 00 3f ff     ..............?.
    1dd8:	ff ff ff ff ff ff fc 3f ff ff ff ff ff ff ff ff     .......?........
    1de8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff fc     ................
    1df8:	07 ff ff ff fc 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    1e08:	ff ff ff ff ff ff ff ff ff ff ff ff ff f0 01 ff     ................
    1e18:	ff ff fc 3f ff ff ff ff ff ff ff ff ff ff ff ff     ...?............
    1e28:	ff ff ff ff ff ff ff ff ff ff ff e0 00 ff ff ff     ................
    1e38:	fc 3f ff ff ff 80 00 00 ff ff ff ff ff ff ff ff     .?..............
    1e48:	ff ff ff ff ff ff 3f ff ff c0 00 7f ff ff fc 3f     ......?........?
    1e58:	ff ff ff 80 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    1e68:	ff ff f8 00 3f ff ff c1 f0 7f ff ff fc 3f ff ff     ....?........?..
    1e78:	ff 80 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1e88:	e0 00 3f ff ff 83 f8 3f ff ff fc 3f ff ff ff 80     ..?....?...?....
    1e98:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff c0 00     ................
    1ea8:	3f ff ff 87 fc 3f ff ff fc 3f ff ff ff 80 00 00     ?....?...?......
    1eb8:	ff ff ff ff ff ff ff ff ff ff ff ff c0 00 7f ff     ................
    1ec8:	ff 87 fc 3f ff ff ff ff ff ff ff 80 00 00 ff ff     ...?............
    1ed8:	ff ff ff ff ff ff ff ff ff ff 82 18 7f ff ff 87     ................
    1ee8:	fc 3f ff ff ff ff ff ff ff 80 00 00 ff ff ff ff     .?..............
    1ef8:	ff ff ff ff ff ff ff ff 86 1c 7f ff ff 87 fc 3f     ...............?
    1f08:	ff ff ff ff bf ff ff 80 00 00 ff ff ff ff ff ff     ................
    1f18:	ff ff ff ff ff ff 86 1c 3f ff ff 87 fc 3f ff ff     ........?....?..
    1f28:	ff ff 3f ff ff 80 00 00 ff ff ff ff ff ff ff ff     ..?.............
    1f38:	ff ff ff ff 86 1c 3f ff ff c3 f8 7f ff ff ff fc     ......?.........
    1f48:	3f ff ff 80 00 00 ff ff ff ff ff ff ff ff ff ff     ?...............
    1f58:	ff ff 86 1c 3f ff ff 80 00 00 7f fc 1f f8 3f ff     ....?.........?.
    1f68:	ff 80 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f78:	86 1c 3f ff ff 80 00 00 7f f0 07 e0 7f ff ff 80     ..?.............
    1f88:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff 87 08     ................
    1f98:	3f ff ff 80 00 00 7f f0 03 c0 ff ff ff 80 00 00     ?...............
    1fa8:	ff ff ff ff ff ff ff ff ff ff ff ff 83 00 3f ff     ..............?.
    1fb8:	ff 80 00 00 7f e0 01 01 ff ff ff 80 00 00 ff ff     ................
    1fc8:	ff ff ff ff ff ff ff ff ff ff cf 80 7f ff ff ff     ................
    1fd8:	ff ff ff e1 e0 07 ff ff ff 80 00 00 ff ff ff ff     ................
    1fe8:	ff ff ff ff ff ff ff ff ff 80 7f ff ff ff ff ff     ................
    1ff8:	ff c1 e0 0f ff ff ff 80 00 00 ff ff ff ff ff ff     ................
    2008:	ff ff ff ff ff ff ff e1 ff ff ff ff ff ff ff c3     ................
    2018:	f0 1f ff ff ff ff 1f ff ff ff ff ff ff ff ff ff     ................
    2028:	ff ff ff ff ff ff ff ff ff ff e1 ff ff c3 f0 7f     ................
    2038:	ff ff ff ff 1f ff ff ff ff ff ff ff ff ff ff ff     ................
    2048:	ff ff ff ff ff ff ff df c0 ff ff c3 f0 ff ff ff     ................
    2058:	ff fe 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2068:	ef fe ff ff ff c7 80 7f ff c3 f0 ff ff ff ff 82     ................
    2078:	3f ff ff ff ff ff ff ff ff ff ff ff ff ff c3 f0     ?...............
    2088:	7f ff ff 87 80 3f ff c3 f0 ff ff ff ff 00 3f ff     .....?........?.
    2098:	ff ff ff ff ff ff ff ff ff ff ff ff 83 f8 7f ff     ................
    20a8:	ff 87 0c 3f ff c0 00 00 3f ff ff 80 0f ff ff ff     ...?....?.......
    20b8:	ff ff ff ff ff ff ff ff ff ff 83 fc 3f ff ff 87     ............?...
    20c8:	1c 3f ff c0 00 00 3f ff ff f8 01 ff ff ff ff ff     .?....?.........
    20d8:	ff ff ff ff ff ff ff ff 87 fc 3f ff ff 86 1c 3f     ..........?....?
    20e8:	ff c0 00 00 3f ff ff ff 00 3f ff ff ff ff ff ff     ....?....?......
    20f8:	ff ff ff ff ff ff 87 fc 3f ff ff 86 3c 3f ff c0     ........?...<?..
    2108:	00 00 3f ff ff ff e0 07 ff ff ff ff ff ff 83 ff     ..?.............
    2118:	ff ff ff ff 87 fc 3f ff ff 80 3c 3f ff ff ff ff     ......?...<?....
    2128:	ff ff ff ff fc 00 ff ff ff ff ff ff 03 ff ff ff     ................
    2138:	ff ff 87 fc 3f ff ff c0 78 3f ff ff ff ff e1 ff     ....?...x?......
    2148:	ff ff ff 80 1f ff ff ff ff ff 03 ff ff ff ff ff     ................
    2158:	83 fc 3f ff ff c0 78 7f ff ff ff ff e1 ff ff ff     ..?...x.........
    2168:	ff f0 03 ff ff ff ff ff 03 ff ff ff ff ff c3 f8     ................
    2178:	3f ff ff e1 fe 7f ff ff ff ff e1 ff ff ff ff fe     ?...............
    2188:	00 7f ff ff ff ff 03 ff ff ff ff ff c1 f0 7f ff     ................
    2198:	ff ff ff ff ff ff c0 3f e1 ff ff ff ff ff c0 0f     .......?........
    21a8:	ff ff ff ff 03 ff ff ff ff ff e0 00 7f ff ff ff     ................
    21b8:	ff ff ff fe 00 07 e1 ff ff ff ff ff f8 01 ff ff     ................
    21c8:	ff ff 03 ff 81 ff ff ff e0 00 ff ff ff ff ff ff     ................
    21d8:	ff f8 00 03 e3 ff ff ff ff ff ff 00 1f ff ff ff     ................
    21e8:	03 ff 01 ff ff ff f8 01 ff ff ff ff ff ff ff f0     ................
    21f8:	00 01 c3 ff ff ff ff ff ff e0 03 ff ff ff 83 fe     ................
    2208:	03 ff ff ff fe 07 ff ff e3 80 00 3f ff f0 3f c0     ...........?..?.
    2218:	c3 ff ff ff ff ff ff fc 00 7f ff ff 81 fc 07 ff     ................
    2228:	ff ff ff ff ff ff c1 80 00 3f ff e0 ff f0 07 ff     .........?......
    2238:	ff ff ff ff ff ff c0 0f ff ff 81 f8 0f ff ff ff     ................
    2248:	ff ff ff ff c1 80 00 3f ff e1 ff f8 0f ff ff ff     .......?........
    2258:	ff ff ff ff f8 01 ff ff 81 f0 1f ff ff ff ff ff     ................
    2268:	ff ff c1 80 00 3f ff c1 ff f8 1f ff ff ff ff ff     .....?..........
    2278:	ff ff ff 00 3f ff 81 e0 3f ff ff ff ff 83 ff ff     ....?...?.......
    2288:	e3 87 ff ff ff c3 ff fc 3f ff ff ff ff ff ff ff     ........?.......
    2298:	ff e0 07 ff 81 c0 7f ff ff e7 fe 01 ff ff ff 87     ................
    22a8:	ff ff ff c3 ff fc 3f ff ff ff ff ff ff ff ff fc     ......?.........
    22b8:	00 ff 81 80 ff ff ff e1 fc 00 ff ff ff ff ff ff     ................
    22c8:	ff c3 ff fc 3f ff ff ff ff ff ff ff ff ff 80 1f     ....?...........
    22d8:	81 01 ff ff ff c1 fc 00 7f ff ff ff ff ff ff c3     ................
    22e8:	ff fc 3f ff ff ff ff ff ff ff ff ff f0 03 c0 03     ..?.............
    22f8:	ff ff ff c3 f8 38 7f ff ff ff ff ff ff c3 ff f8     .....8..........
    2308:	3f ff ff ff ff ff ff ff ff ff fe 00 40 07 ff ff     ?...........@...
    2318:	ff c3 f8 7c 3f ff 80 00 00 3f ff e1 ff f8 7f ff     ...|?....?......
    2328:	ff ff ff ff ff ff ff ff ff c0 00 0f ff ff ff c3     ................
    2338:	f0 fc 3f ff 80 00 00 3f ff e0 ff f0 7f ff ff ff     ..?....?........
    2348:	ff ff ff ff ff ff ff f8 00 1f ff ff ff c3 e0 fc     ................
    2358:	3f ff c0 00 00 3f ff f0 3f 80 ff ff ff ff ff ff     ?....?..?.......
    2368:	ff ff ff ff ff ff 00 3f ff ff ff c3 e1 fc 3f ff     .......?......?.
    2378:	c0 00 00 3f ff f0 00 00 ff ff ff ff ff ff ff ff     ...?............
    2388:	ff ff ff ff e0 7f ff ff ff c1 c1 fc 3f ff ff c3     ............?...
    2398:	f8 7f ff fc 00 03 ff ff ff ff ff ff ff ff ff ff     ................
    23a8:	ff ff ff ff ff ff ff e0 03 fc 3f ff ff 87 fc 3f     ..........?....?
    23b8:	ff fe 00 07 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    23c8:	ff ff ff ff ff e0 07 f8 3f ff ff 87 fc 3f ff ff     ........?....?..
    23d8:	c0 3f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    23e8:	ff ff ff f0 0f f8 7f ff ff 87 fc 3f ff ff ff ff     ...........?....
    23f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2408:	ff fc 1f fe 7f ff ff 87 fc 3f ff ff ff ff ff ff     .........?......
    2418:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2428:	ff ff ff ff ff 83 fc 3f ff ff ff ff ff ff ff ff     .......?........
    2438:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2448:	ff ff ff 83 f8 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
    2458:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2468:	ff c1 f0 7f ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2478:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff e0     ................
    2488:	00 7f ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2498:	ff ff ff ff ff ff ff ff ff ff ff ff ff e0 00 ff     ................
    24a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    24b8:	ff ff ff ff ff ff ff ff ff ff ff f8 01 ff ff ff     ................
    24c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    24d8:	ff ff ff ff ff ff ff ff ff fe 07 ff ff ff ff ff     ................
    24e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    24f8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2508:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2518:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2528:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2538:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2548:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2558:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2568:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2578:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2588:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2598:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    25a8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    25b8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    25c8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    25d8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000025e8 <eccblocks>:
    25e8:	01 00 13 07 01 00 10 0a 01 00 0d 0d 01 00 09 11     ................
    25f8:	01 00 22 0a 01 00 1c 10 01 00 16 16 01 00 10 1c     ..".............
    2608:	01 00 37 0f 01 00 2c 1a 02 00 11 12 02 00 0d 16     ..7...,.........
    2618:	01 00 50 14 02 00 20 12 02 00 18 1a 04 00 09 10     ..P... .........
    2628:	01 00 6c 1a 02 00 2b 18 02 02 0f 12 02 02 0b 16     ..l...+.........
    2638:	02 00 44 12 04 00 1b 10 04 00 13 18 04 00 0f 1c     ..D.............
    2648:	02 00 4e 14 04 00 1f 12 02 04 0e 12 04 01 0d 1a     ..N.............
    2658:	02 00 61 18 02 02 26 16 04 02 12 16 04 02 0e 1a     ..a...&.........
    2668:	02 00 74 1e 03 02 24 16 04 04 10 14 04 04 0c 18     ..t...$.........
    2678:	02 02 44 12 04 01 2b 1a 06 02 13 18 06 02 0f 1c     ..D...+.........
    2688:	04 00 51 14 01 04 32 1e 04 04 16 1c 03 08 0c 18     ..Q...2.........
    2698:	02 02 5c 18 06 02 24 16 04 06 14 1a 07 04 0e 1c     ..\...$.........
    26a8:	04 00 6b 1a 08 01 25 16 08 04 14 18 0c 04 0b 16     ..k...%.........
    26b8:	03 01 73 1e 04 05 28 18 0b 05 10 14 0b 05 0c 18     ..s...(.........
    26c8:	05 01 57 16 05 05 29 18 05 07 18 1e 0b 07 0c 18     ..W...).........
    26d8:	05 01 62 18 07 03 2d 1c 0f 02 13 18 03 0d 0f 1e     ..b...-.........
    26e8:	01 05 6b 1c 0a 01 2e 1c 01 0f 16 1c 02 11 0e 1c     ..k.............
    26f8:	05 01 78 1e 09 04 2b 1a 11 01 16 1c 02 13 0e 1c     ..x...+.........
    2708:	03 04 71 1c 03 0b 2c 1a 11 04 15 1a 09 10 0d 1a     ..q...,.........
    2718:	03 05 6b 1c 03 0d 29 1a 0f 05 18 1e 0f 0a 0f 1c     ..k...).........
    2728:	04 04 74 1c 11 00 2a 1a 11 06 16 1c 13 06 10 1e     ..t...*.........
    2738:	02 07 6f 1c 11 00 2e 1c 07 10 18 1e 22 00 0d 18     ..o........."...
    2748:	04 05 79 1e 04 0e 2f 1c 0b 0e 18 1e 10 0e 0f 1e     ..y.../.........
    2758:	06 04 75 1e 06 0e 2d 1c 0b 10 18 1e 1e 02 10 1e     ..u...-.........
    2768:	08 04 6a 1a 08 0d 2f 1c 07 16 18 1e 16 0d 0f 1e     ..j.../.........
    2778:	0a 02 72 1c 13 04 2e 1c 1c 06 16 1c 21 04 10 1e     ..r.........!...
    2788:	08 04 7a 1e 16 03 2d 1c 08 1a 17 1e 0c 1c 0f 1e     ..z...-.........
    2798:	03 0a 75 1e 03 17 2d 1c 04 1f 18 1e 0b 1f 0f 1e     ..u...-.........
    27a8:	07 07 74 1e 15 07 2d 1c 01 25 17 1e 13 1a 0f 1e     ..t...-..%......
    27b8:	05 0a 73 1e 13 0a 2f 1c 0f 19 18 1e 17 19 0f 1e     ..s.../.........
    27c8:	0d 03 73 1e 02 1d 2e 1c 2a 01 18 1e 17 1c 0f 1e     ..s.....*.......
    27d8:	11 00 73 1e 0a 17 2e 1c 0a 23 18 1e 13 23 0f 1e     ..s......#...#..
    27e8:	11 01 73 1e 0e 15 2e 1c 1d 13 18 1e 0b 2e 0f 1e     ..s.............
    27f8:	0d 06 73 1e 0e 17 2e 1c 2c 07 18 1e 3b 01 10 1e     ..s.....,...;...
    2808:	0c 07 79 1e 0c 1a 2f 1c 27 0e 18 1e 16 29 0f 1e     ..y.../.'....)..
    2818:	06 0e 79 1e 06 22 2f 1c 2e 0a 18 1e 02 40 0f 1e     ..y.."/......@..
    2828:	11 04 7a 1e 1d 0e 2e 1c 31 0a 18 1e 18 2e 0f 1e     ..z.....1.......
    2838:	04 12 7a 1e 0d 20 2e 1c 30 0e 18 1e 2a 20 0f 1e     ..z.. ..0...* ..
    2848:	14 04 75 1e 28 07 2f 1c 2b 16 18 1e 0a 43 0f 1e     ..u.(./.+....C..
    2858:	13 06 76 1e 12 1f 2f 1c 22 22 18 1e 14 3d 0f 1e     ..v.../.""...=..

00002868 <adelta>:
    2868:	00 0b 0f 13 17 1b 1f 10 12 14 16 18 1a 1c 14 16     ................
    2878:	18 18 1a 1c 1c 16 18 18 1a 1a 1c 1c 18 18 1a 1a     ................
    2888:	1a 1c 1c 18 1a 1a 1a 1c 1c                          .........

00002891 <vpat>:
    2891:	94 0c bc 05 99 0a d3 04 f6 0b 62 07 47 08 0d 06     ..........b.G...
    28a1:	28 09 78 0b 5d 04 17 0a 32 05 a6 09 83 06 c9 08     (.x.]...2.......
    28b1:	ec 07 c4 0e e1 01 ab 0f 8e 00 1a 0c 3f 03 75 0d     ............?.u.
    28c1:	50 02 d5 09 f0 06 ba 08 9f 07 0b 0b 2e 04 64 0a     P.............d.
    28d1:	41 05 69 0c                                         A.i.

000028d5 <g0log>:
    28d5:	ff 00 01 19 02 32 1a c6 03 df 33 ee 1b 68 c7 4b     .....2....3..h.K
    28e5:	04 64 e0 0e 34 8d ef 81 1c c1 69 f8 c8 08 4c 71     .d..4.....i...Lq
    28f5:	05 8a 65 2f e1 24 0f 21 35 93 8e da f0 12 82 45     ..e/.$.!5......E
    2905:	1d b5 c2 7d 6a 27 f9 b9 c9 9a 09 78 4d e4 72 a6     ...}j'.....xM.r.
    2915:	06 bf 8b 62 66 dd 30 fd e2 98 25 b3 10 91 22 88     ...bf.0...%...".
    2925:	36 d0 94 ce 8f 96 db bd f1 d2 13 5c 83 38 46 40     6..........\.8F@
    2935:	1e 42 b6 a3 c3 48 7e 6e 6b 3a 28 54 fa 85 ba 3d     .B...H~nk:(T...=
    2945:	ca 5e 9b 9f 0a 15 79 2b 4e d4 e5 ac 73 f3 a7 57     .^....y+N...s..W
    2955:	07 70 c0 f7 8c 80 63 0d 67 4a de ed 31 c5 fe 18     .p....c.gJ..1...
    2965:	e3 a5 99 77 26 b8 b4 7c 11 44 92 d9 23 20 89 2e     ...w&..|.D..# ..
    2975:	37 3f d1 5b 95 bc cf cd 90 87 97 b2 dc fc be 61     7?.[...........a
    2985:	f2 56 d3 ab 14 2a 5d 9e 84 3c 39 53 47 6d 41 a2     .V...*]..<9SGmA.
    2995:	1f 2d 43 d8 b7 7b a4 76 c4 17 49 ec 7f 0c 6f f6     .-C..{.v..I...o.
    29a5:	6c a1 3b 52 29 9d 55 aa fb 60 86 b1 bb cc 3e 5a     l.;R).U..`....>Z
    29b5:	cb 59 5f b0 9c a9 a0 51 0b f5 16 eb 7a 75 2c d7     .Y_....Q....zu,.
    29c5:	4f ae d5 e9 e6 e7 ad e8 74 d6 f4 ea a8 50 58 af     O.......t....PX.

000029d5 <g0exp>:
    29d5:	01 02 04 08 10 20 40 80 1d 3a 74 e8 cd 87 13 26     ..... @..:t....&
    29e5:	4c 98 2d 5a b4 75 ea c9 8f 03 06 0c 18 30 60 c0     L.-Z.u.......0`.
    29f5:	9d 27 4e 9c 25 4a 94 35 6a d4 b5 77 ee c1 9f 23     .'N.%J.5j..w...#
    2a05:	46 8c 05 0a 14 28 50 a0 5d ba 69 d2 b9 6f de a1     F....(P.].i..o..
    2a15:	5f be 61 c2 99 2f 5e bc 65 ca 89 0f 1e 3c 78 f0     _.a../^.e....<x.
    2a25:	fd e7 d3 bb 6b d6 b1 7f fe e1 df a3 5b b6 71 e2     ....k.......[.q.
    2a35:	d9 af 43 86 11 22 44 88 0d 1a 34 68 d0 bd 67 ce     ..C.."D...4h..g.
    2a45:	81 1f 3e 7c f8 ed c7 93 3b 76 ec c5 97 33 66 cc     ..>|....;v...3f.
    2a55:	85 17 2e 5c b8 6d da a9 4f 9e 21 42 84 15 2a 54     ...\.m..O.!B..*T
    2a65:	a8 4d 9a 29 52 a4 55 aa 49 92 39 72 e4 d5 b7 73     .M.)R.U.I.9r...s
    2a75:	e6 d1 bf 63 c6 91 3f 7e fc e5 d7 b3 7b f6 f1 ff     ...c..?~....{...
    2a85:	e3 db ab 4b 96 31 62 c4 95 37 6e dc a5 57 ae 41     ...K.1b..7n..W.A
    2a95:	82 19 32 64 c8 8d 07 0e 1c 38 70 e0 dd a7 53 a6     ..2d.....8p...S.
    2aa5:	51 a2 59 b2 79 f2 f9 ef c3 9b 2b 56 ac 45 8a 09     Q.Y.y.....+V.E..
    2ab5:	12 24 48 90 3d 7a f4 f5 f7 f3 fb eb cb 8b 0b 16     .$H.=z..........
    2ac5:	2c 58 b0 7d fa e9 cf 83 1b 36 6c d8 ad 47 8e 00     ,X.}.....6l..G..

00002ad5 <fmtword>:
    2ad5:	c4 77 f3 72 aa 7d 9d 78 2f 66 18 63 41 6c 76 69     .w.r.}.x/f.cAlvi
    2ae5:	12 54 25 51 7c 5e 4b 5b f9 45 ce 40 97 4f a0 4a     .T%Q|^K[.E.@.O.J
    2af5:	5f 35 68 30 31 3f 06 3a b4 24 83 21 da 2e ed 2b     _5h01?.:.$.!...+
    2b05:	89 16 be 13 e7 1c d0 19 62 07 55 02 0c 0d 3b 08     ........b.U...;.

00002b15 <framebase>:
    2b15:	fe 00 00 3f 80 82 00 00 20 80 ba 00 00 2e 80 ba     ...?.... .......
    2b25:	00 00 2e 80 ba 00 00 2e 80 82 00 00 20 80 fe aa     ............ ...
    2b35:	aa bf 80 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    2b45:	00 00 02 00 00 00 00 00 00 00 00 00 02 00 00 00     ................
    2b55:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2b65:	02 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00     ................
    2b75:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 02 00     ................
	...
    2b8d:	02 00 00 f8 00 00 80 00 88 00 fe 00 00 a8 00 82     ................
    2b9d:	00 00 88 00 ba 00 00 f8 00 ba 00 00 00 00 ba 00     ................
    2bad:	00 00 00 82 00 00 00 00 fe 00 00 00 00              .............

00002bba <framask>:
    2bba:	ff ff ff ff ff f8 10 04 00 80 08 00 40 01 00 02     ............@...
    2bca:	00 02 00 01 00 00 40 00 08 00 00 80 00 04 00 00     ......@.........
    2bda:	10 00 00 20 00 00 20 00 0f fc 00 07 ff 00 01 ff     ... .. .........
    2bea:	e0 00 3f fe 00 03 ff f0 00 00 7f c0 00 00 ff 80     ..?.............
    2bfa:	00 00 ff 80 00 00 00 00                             ........

00002c02 <__ctors_end>:
    2c02:	11 24       	eor	r1, r1
    2c04:	1f be       	out	0x3f, r1	; 63
    2c06:	cf ef       	ldi	r28, 0xFF	; 255
    2c08:	d8 e0       	ldi	r29, 0x08	; 8
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	cd bf       	out	0x3d, r28	; 61

00002c0e <__do_copy_data>:
    2c0e:	11 e0       	ldi	r17, 0x01	; 1
    2c10:	a0 e0       	ldi	r26, 0x00	; 0
    2c12:	b1 e0       	ldi	r27, 0x01	; 1
    2c14:	e8 e6       	ldi	r30, 0x68	; 104
    2c16:	f7 e6       	ldi	r31, 0x67	; 103
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <__do_copy_data+0x10>
    2c1a:	05 90       	lpm	r0, Z+
    2c1c:	0d 92       	st	X+, r0
    2c1e:	ae 34       	cpi	r26, 0x4E	; 78
    2c20:	b1 07       	cpc	r27, r17
    2c22:	d9 f7       	brne	.-10     	; 0x2c1a <__do_copy_data+0xc>

00002c24 <__do_clear_bss>:
    2c24:	14 e0       	ldi	r17, 0x04	; 4
    2c26:	ae e4       	ldi	r26, 0x4E	; 78
    2c28:	b1 e0       	ldi	r27, 0x01	; 1
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <.do_clear_bss_start>

00002c2c <.do_clear_bss_loop>:
    2c2c:	1d 92       	st	X+, r1

00002c2e <.do_clear_bss_start>:
    2c2e:	a7 39       	cpi	r26, 0x97	; 151
    2c30:	b1 07       	cpc	r27, r17
    2c32:	e1 f7       	brne	.-8      	; 0x2c2c <.do_clear_bss_loop>
    2c34:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <main>
    2c38:	0c 94 b2 33 	jmp	0x6764	; 0x6764 <_exit>

00002c3c <__bad_interrupt>:
    2c3c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002c40 <csact>:
        x = SPDR;
    }
}

static void csact() {
    PORTB &= ~4;
    2c40:	2a 98       	cbi	0x05, 2	; 5
}
    2c42:	08 95       	ret

00002c44 <csinact>:

static void csinact() {
    PORTB |= 4;
    2c44:	2a 9a       	sbi	0x05, 2	; 5
}
    2c46:	08 95       	ret

00002c48 <sendspiblock.clone.0>:
#define BAUD 9600 // Serial baud rate for scanner communication
#define BAUD_TOL 2   // defaults to 2%, warns if F_CPU/BAUD don't work together


// SPI communication with display
static void sendspiblock(u8 *buf, u16 len)
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	0f 92       	push	r0
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	fc 01       	movw	r30, r24
    2c54:	21 e0       	ldi	r18, 0x01	; 1
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	0a c0       	rjmp	.+20     	; 0x2c6e <sendspiblock.clone.0+0x26>
{
    volatile u8 x;
    while (len--) {
        SPDR = *buf++;
    2c5a:	81 91       	ld	r24, Z+
    2c5c:	8e bd       	out	0x2e, r24	; 46
        while (!(SPSR & 0x80));
    2c5e:	0d b4       	in	r0, 0x2d	; 45
    2c60:	07 fe       	sbrs	r0, 7
    2c62:	fd cf       	rjmp	.-6      	; 0x2c5e <sendspiblock.clone.0+0x16>
        SPSR &= 0x7f;
    2c64:	8d b5       	in	r24, 0x2d	; 45
    2c66:	8f 77       	andi	r24, 0x7F	; 127
    2c68:	8d bd       	out	0x2d, r24	; 45
        x = SPDR;
    2c6a:	8e b5       	in	r24, 0x2e	; 46
    2c6c:	89 83       	std	Y+1, r24	; 0x01

// SPI communication with display
static void sendspiblock(u8 *buf, u16 len)
{
    volatile u8 x;
    while (len--) {
    2c6e:	21 50       	subi	r18, 0x01	; 1
    2c70:	30 40       	sbci	r19, 0x00	; 0
    2c72:	8f ef       	ldi	r24, 0xFF	; 255
    2c74:	2f 3f       	cpi	r18, 0xFF	; 255
    2c76:	38 07       	cpc	r19, r24
    2c78:	81 f7       	brne	.-32     	; 0x2c5a <sendspiblock.clone.0+0x12>
        SPDR = *buf++;
        while (!(SPSR & 0x80));
        SPSR &= 0x7f;
        x = SPDR;
    }
}
    2c7a:	0f 90       	pop	r0
    2c7c:	cf 91       	pop	r28
    2c7e:	df 91       	pop	r29
    2c80:	08 95       	ret

00002c82 <uart_getchar>:
    UDR0 = c;
}
#endif

char uart_getchar(void) {
    loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    2c82:	80 91 c0 00 	lds	r24, 0x00C0
    2c86:	87 ff       	sbrs	r24, 7
    2c88:	fc cf       	rjmp	.-8      	; 0x2c82 <uart_getchar>
    return UDR0;
    2c8a:	80 91 c6 00 	lds	r24, 0x00C6
}
    2c8e:	08 95       	ret

00002c90 <evaluate_ret_code>:
 * \param[in] ret_code return code of the last call to a SHA204 library function
 */
void evaluate_ret_code(uint8_t ret_code)
{
	if ((ret_code == SHA204_PARSE_ERROR)
				|| (ret_code == SHA204_CMD_FAIL)
    2c90:	98 2f       	mov	r25, r24
    2c92:	92 5d       	subi	r25, 0xD2	; 210
 *         indicates that the device is awake.
 * \param[in] ret_code return code of the last call to a SHA204 library function
 */
void evaluate_ret_code(uint8_t ret_code)
{
	if ((ret_code == SHA204_PARSE_ERROR)
    2c94:	92 30       	cpi	r25, 0x02	; 2
    2c96:	10 f0       	brcs	.+4      	; 0x2c9c <evaluate_ret_code+0xc>
				|| (ret_code == SHA204_CMD_FAIL)
				|| (ret_code == SHA204_RX_FAIL))
    2c98:	86 3e       	cpi	r24, 0xE6	; 230
    2c9a:	11 f4       	brne	.+4      	; 0x2ca0 <evaluate_ret_code+0x10>
		// SHA204_PARSE_ERROR and SHA204_CMD_FAIL indicate
		// a consistent response whereas SHA204_RX_FAIL
		// just indicates that we received some bytes,
		// possibly garbled. In all these cases we put
		// the device to sleep.
		(void) sha204p_sleep();
    2c9c:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sha204p_sleep>
    2ca0:	08 95       	ret

00002ca2 <ascii_to_hex>:
}

uint8_t ascii_to_hex(char input) {
	if(input == '0') return 0x00;
    2ca2:	80 33       	cpi	r24, 0x30	; 48
    2ca4:	01 f1       	breq	.+64     	; 0x2ce6 <ascii_to_hex+0x44>
	else if(input == '1') return 0x01;
    2ca6:	81 33       	cpi	r24, 0x31	; 49
    2ca8:	01 f1       	breq	.+64     	; 0x2cea <ascii_to_hex+0x48>
	else if(input == '2') return 0x02;
    2caa:	82 33       	cpi	r24, 0x32	; 50
    2cac:	01 f1       	breq	.+64     	; 0x2cee <ascii_to_hex+0x4c>
	else if(input == '3') return 0x03;
    2cae:	83 33       	cpi	r24, 0x33	; 51
    2cb0:	01 f1       	breq	.+64     	; 0x2cf2 <ascii_to_hex+0x50>
	else if(input == '4') return 0x04;
    2cb2:	84 33       	cpi	r24, 0x34	; 52
    2cb4:	01 f1       	breq	.+64     	; 0x2cf6 <ascii_to_hex+0x54>
	else if(input == '5') return 0x05;
    2cb6:	85 33       	cpi	r24, 0x35	; 53
    2cb8:	01 f1       	breq	.+64     	; 0x2cfa <ascii_to_hex+0x58>
	else if(input == '6') return 0x06;
    2cba:	86 33       	cpi	r24, 0x36	; 54
    2cbc:	01 f1       	breq	.+64     	; 0x2cfe <ascii_to_hex+0x5c>
	else if(input == '7') return 0x07;
    2cbe:	87 33       	cpi	r24, 0x37	; 55
    2cc0:	01 f1       	breq	.+64     	; 0x2d02 <ascii_to_hex+0x60>
	else if(input == '8') return 0x08;
    2cc2:	88 33       	cpi	r24, 0x38	; 56
    2cc4:	01 f1       	breq	.+64     	; 0x2d06 <ascii_to_hex+0x64>
	else if(input == '9') return 0x09;
    2cc6:	89 33       	cpi	r24, 0x39	; 57
    2cc8:	01 f1       	breq	.+64     	; 0x2d0a <ascii_to_hex+0x68>
	else if(input == 'A') return 0x0A;
    2cca:	81 34       	cpi	r24, 0x41	; 65
    2ccc:	01 f1       	breq	.+64     	; 0x2d0e <ascii_to_hex+0x6c>
	else if(input == 'B') return 0x0B;
    2cce:	82 34       	cpi	r24, 0x42	; 66
    2cd0:	01 f1       	breq	.+64     	; 0x2d12 <ascii_to_hex+0x70>
	else if(input == 'C') return 0x0C;
    2cd2:	83 34       	cpi	r24, 0x43	; 67
    2cd4:	01 f1       	breq	.+64     	; 0x2d16 <ascii_to_hex+0x74>
	else if(input == 'D') return 0x0D;
    2cd6:	84 34       	cpi	r24, 0x44	; 68
    2cd8:	01 f1       	breq	.+64     	; 0x2d1a <ascii_to_hex+0x78>
	else if(input == 'E') return 0x0E;
    2cda:	85 34       	cpi	r24, 0x45	; 69
    2cdc:	01 f1       	breq	.+64     	; 0x2d1e <ascii_to_hex+0x7c>
	else if(input == 'F') return 0x0F;
    2cde:	86 34       	cpi	r24, 0x46	; 70
    2ce0:	01 f5       	brne	.+64     	; 0x2d22 <ascii_to_hex+0x80>
    2ce2:	8f e0       	ldi	r24, 0x0F	; 15
    2ce4:	08 95       	ret
		// the device to sleep.
		(void) sha204p_sleep();
}

uint8_t ascii_to_hex(char input) {
	if(input == '0') return 0x00;
    2ce6:	80 e0       	ldi	r24, 0x00	; 0
    2ce8:	08 95       	ret
	else if(input == '1') return 0x01;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	08 95       	ret
	else if(input == '2') return 0x02;
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	08 95       	ret
	else if(input == '3') return 0x03;
    2cf2:	83 e0       	ldi	r24, 0x03	; 3
    2cf4:	08 95       	ret
	else if(input == '4') return 0x04;
    2cf6:	84 e0       	ldi	r24, 0x04	; 4
    2cf8:	08 95       	ret
	else if(input == '5') return 0x05;
    2cfa:	85 e0       	ldi	r24, 0x05	; 5
    2cfc:	08 95       	ret
	else if(input == '6') return 0x06;
    2cfe:	86 e0       	ldi	r24, 0x06	; 6
    2d00:	08 95       	ret
	else if(input == '7') return 0x07;
    2d02:	87 e0       	ldi	r24, 0x07	; 7
    2d04:	08 95       	ret
	else if(input == '8') return 0x08;
    2d06:	88 e0       	ldi	r24, 0x08	; 8
    2d08:	08 95       	ret
	else if(input == '9') return 0x09;
    2d0a:	89 e0       	ldi	r24, 0x09	; 9
    2d0c:	08 95       	ret
	else if(input == 'A') return 0x0A;
    2d0e:	8a e0       	ldi	r24, 0x0A	; 10
    2d10:	08 95       	ret
	else if(input == 'B') return 0x0B;
    2d12:	8b e0       	ldi	r24, 0x0B	; 11
    2d14:	08 95       	ret
	else if(input == 'C') return 0x0C;
    2d16:	8c e0       	ldi	r24, 0x0C	; 12
    2d18:	08 95       	ret
	else if(input == 'D') return 0x0D;
    2d1a:	8d e0       	ldi	r24, 0x0D	; 13
    2d1c:	08 95       	ret
	else if(input == 'E') return 0x0E;
    2d1e:	8e e0       	ldi	r24, 0x0E	; 14
    2d20:	08 95       	ret
	else if(input == 'F') return 0x0F;
	else return 0x00;
    2d22:	80 e0       	ldi	r24, 0x00	; 0
}
    2d24:	08 95       	ret

00002d26 <__vector_13>:
unsigned int timer_cnt = 0;
// Timer interrupt service routine 
ISR(TIMER1_OVF_vect) {
    2d26:	1f 92       	push	r1
    2d28:	0f 92       	push	r0
    2d2a:	0f b6       	in	r0, 0x3f	; 63
    2d2c:	0f 92       	push	r0
    2d2e:	11 24       	eor	r1, r1
    2d30:	8f 93       	push	r24
    2d32:	9f 93       	push	r25
	timer_cnt++;
    2d34:	80 91 4e 01 	lds	r24, 0x014E
    2d38:	90 91 4f 01 	lds	r25, 0x014F
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	90 93 4f 01 	sts	0x014F, r25
    2d42:	80 93 4e 01 	sts	0x014E, r24
	if(timer_cnt > 20) {
		//cli(); // disable interrupts 
  		//wdt_enable(WDTO_15MS); // enable watchdog 
  		//while(1); // wait for watchdog to reset processor 
	}
}
    2d46:	9f 91       	pop	r25
    2d48:	8f 91       	pop	r24
    2d4a:	0f 90       	pop	r0
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	0f 90       	pop	r0
    2d50:	1f 90       	pop	r1
    2d52:	18 95       	reti

00002d54 <main>:

#include <string.h>
#define spi_transfer(x) {unsigned char ttt=(x);sendspiblock(&ttt,1);}

int main()
{
    2d54:	2f 92       	push	r2
    2d56:	3f 92       	push	r3
    2d58:	4f 92       	push	r4
    2d5a:	5f 92       	push	r5
    2d5c:	6f 92       	push	r6
    2d5e:	7f 92       	push	r7
    2d60:	8f 92       	push	r8
    2d62:	9f 92       	push	r9
    2d64:	af 92       	push	r10
    2d66:	bf 92       	push	r11
    2d68:	cf 92       	push	r12
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	cf 54       	subi	r28, 0x4F	; 79
    2d7e:	d1 40       	sbci	r29, 0x01	; 1
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    PORTB |= 4;
}

static void spihwinit()
{
    DDRB = 0x2c;                // set port for SPI
    2d8a:	8c e2       	ldi	r24, 0x2C	; 44
    2d8c:	84 b9       	out	0x04, r24	; 4
    PORTB |= 4;
    2d8e:	2a 9a       	sbi	0x05, 2	; 5
    SPCR = 0x56;                // /32 (0x52 /64)
    2d90:	86 e5       	ldi	r24, 0x56	; 86
    2d92:	8c bd       	out	0x2c, r24	; 44
    SPSR = 0;
    2d94:	1d bc       	out	0x2d, r1	; 45

// Serial communication functions (for scanner communication)
#include <util/setbaud.h>

static void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
    2d96:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
    2d9a:	87 e6       	ldi	r24, 0x67	; 103
    2d9c:	80 93 c4 00 	sts	0x00C4, r24

#if USE_2X
    UCSR0A |= _BV(U2X0);
#else
    UCSR0A &= ~(_BV(U2X0));
    2da0:	80 91 c0 00 	lds	r24, 0x00C0
    2da4:	8d 7f       	andi	r24, 0xFD	; 253
    2da6:	80 93 c0 00 	sts	0x00C0, r24
#endif

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */ 
    2daa:	86 e0       	ldi	r24, 0x06	; 6
    2dac:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    2db0:	88 e1       	ldi	r24, 0x18	; 24
    2db2:	80 93 c1 00 	sts	0x00C1, r24

	// Read QR code from serial port
	volatile char scan_in_buff[64];

	// Display initial screen!
	csact();
    2db6:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
    spi_transfer(0x00); // TX command
    2dba:	1a 82       	std	Y+2, r1	; 0x02
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	0e 5f       	subi	r16, 0xFE	; 254
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	c8 01       	movw	r24, r16
    2dc4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    spi_transfer(0x00); // Address high byte
    2dc8:	1a 82       	std	Y+2, r1	; 0x02
    2dca:	c8 01       	movw	r24, r16
    2dcc:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    spi_transfer(0x00); // Address low byte
    2dd0:	1a 82       	std	Y+2, r1	; 0x02
    2dd2:	c8 01       	movw	r24, r16
    2dd4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    for(int i = 0; i < 4800; i ++) {
    2dd8:	ee 24       	eor	r14, r14
    2dda:	ff 24       	eor	r15, r15
		spi_transfer(pgm_read_byte((&bmp1[i])));	
    2ddc:	c0 2e       	mov	r12, r16
    2dde:	01 2f       	mov	r16, r17
    2de0:	f7 01       	movw	r30, r14
    2de2:	e8 59       	subi	r30, 0x98	; 152
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	e4 91       	lpm	r30, Z+
    2de8:	ea 83       	std	Y+2, r30	; 0x02
    2dea:	8c 2d       	mov	r24, r12
    2dec:	90 2f       	mov	r25, r16
    2dee:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
	// Display initial screen!
	csact();
    spi_transfer(0x00); // TX command
    spi_transfer(0x00); // Address high byte
    spi_transfer(0x00); // Address low byte
    for(int i = 0; i < 4800; i ++) {
    2df2:	08 94       	sec
    2df4:	e1 1c       	adc	r14, r1
    2df6:	f1 1c       	adc	r15, r1
    2df8:	20 ec       	ldi	r18, 0xC0	; 192
    2dfa:	e2 16       	cp	r14, r18
    2dfc:	22 e1       	ldi	r18, 0x12	; 18
    2dfe:	f2 06       	cpc	r15, r18
    2e00:	79 f7       	brne	.-34     	; 0x2de0 <main+0x8c>
		spi_transfer(pgm_read_byte((&bmp1[i])));	
	}

    csinact();
    2e02:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e06:	8f e1       	ldi	r24, 0x1F	; 31
    2e08:	9e e4       	ldi	r25, 0x4E	; 78
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <main+0xb6>
    2e0e:	00 c0       	rjmp	.+0      	; 0x2e10 <main+0xbc>
    2e10:	00 00       	nop
  	_delay_ms(5); // Or you could poll the BUSY pin, whatever floats your boat


	csact(); // Screen update
    2e12:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
  	spi_transfer(0x18);
    2e16:	88 e1       	ldi	r24, 0x18	; 24
    2e18:	8a 83       	std	Y+2, r24	; 0x02
    2e1a:	8c 2d       	mov	r24, r12
    2e1c:	90 2f       	mov	r25, r16
    2e1e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	spi_transfer(0x00);
    2e22:	1a 82       	std	Y+2, r1	; 0x02
    2e24:	8c 2d       	mov	r24, r12
    2e26:	90 2f       	mov	r25, r16
    2e28:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	spi_transfer(0x00);
    2e2c:	1a 82       	std	Y+2, r1	; 0x02
    2e2e:	8c 2d       	mov	r24, r12
    2e30:	90 2f       	mov	r25, r16
    2e32:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	csinact();
    2e36:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>

	while(1) {
	
	for(i = 0; i < 64 ; i ++) {
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
		scan_in_buff[i] = uart_getchar();
    2e3e:	e4 e6       	ldi	r30, 0x64	; 100
    2e40:	2e 2e       	mov	r2, r30
    2e42:	31 2c       	mov	r3, r1
    2e44:	2c 0e       	add	r2, r28
    2e46:	3d 1e       	adc	r3, r29
	}

	csact();
    spi_transfer(0x00); // TX command
    2e48:	72 e0       	ldi	r23, 0x02	; 2
    2e4a:	e7 2e       	mov	r14, r23
    2e4c:	f1 2c       	mov	r15, r1
    2e4e:	ec 0e       	add	r14, r28
    2e50:	fd 1e       	adc	r15, r29
	if (ret_code != SHA204_SUCCESS) {
		continue;
	}	

	for (l = 0; l < sizeof(rx_buff); l++)
		rx_buff[l] = 0;
    2e52:	8e 01       	movw	r16, r28
    2e54:	08 50       	subi	r16, 0x08	; 8
    2e56:	1f 4f       	sbci	r17, 0xFF	; 255

	volatile uint8_t serial[9];
	// Read serial number from SHA chip
	ret_code = sha204m_read((uint8_t *) tx_buff, (uint8_t *) rx_buff, ((uint8_t)0x00), ((uint16_t)0x00));
    2e58:	64 ea       	ldi	r22, 0xA4	; 164
    2e5a:	46 2e       	mov	r4, r22
    2e5c:	51 2c       	mov	r5, r1
    2e5e:	4c 0e       	add	r4, r28
    2e60:	5d 1e       	adc	r5, r29
    2e62:	1f c0       	rjmp	.+62     	; 0x2ea2 <main+0x14e>
  	csinact();

	while(1) {
	
	for(i = 0; i < 64 ; i ++) {
		scan_in_buff[i] = uart_getchar();
    2e64:	c2 5b       	subi	r28, 0xB2	; 178
    2e66:	de 4f       	sbci	r29, 0xFE	; 254
    2e68:	28 83       	st	Y, r18
    2e6a:	ce 54       	subi	r28, 0x4E	; 78
    2e6c:	d1 40       	sbci	r29, 0x01	; 1
    2e6e:	c1 5b       	subi	r28, 0xB1	; 177
    2e70:	de 4f       	sbci	r29, 0xFE	; 254
    2e72:	38 83       	st	Y, r19
    2e74:	cf 54       	subi	r28, 0x4F	; 79
    2e76:	d1 40       	sbci	r29, 0x01	; 1
    2e78:	0e 94 41 16 	call	0x2c82	; 0x2c82 <uart_getchar>
    2e7c:	c2 5b       	subi	r28, 0xB2	; 178
    2e7e:	de 4f       	sbci	r29, 0xFE	; 254
    2e80:	28 81       	ld	r18, Y
    2e82:	ce 54       	subi	r28, 0x4E	; 78
    2e84:	d1 40       	sbci	r29, 0x01	; 1
    2e86:	c1 5b       	subi	r28, 0xB1	; 177
    2e88:	de 4f       	sbci	r29, 0xFE	; 254
    2e8a:	38 81       	ld	r19, Y
    2e8c:	cf 54       	subi	r28, 0x4F	; 79
    2e8e:	d1 40       	sbci	r29, 0x01	; 1
    2e90:	f1 01       	movw	r30, r2
    2e92:	e2 0f       	add	r30, r18
    2e94:	f3 1f       	adc	r31, r19
    2e96:	80 83       	st	Z, r24
  	spi_transfer(0x00);
  	csinact();

	while(1) {
	
	for(i = 0; i < 64 ; i ++) {
    2e98:	2f 5f       	subi	r18, 0xFF	; 255
    2e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <main+0x14e>
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	20 34       	cpi	r18, 0x40	; 64
    2ea4:	31 05       	cpc	r19, r1
    2ea6:	f0 f2       	brcs	.-68     	; 0x2e64 <main+0x110>
		scan_in_buff[i] = uart_getchar();
	}

	csact();
    2ea8:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
    spi_transfer(0x00); // TX command
    2eac:	1a 82       	std	Y+2, r1	; 0x02
    2eae:	c7 01       	movw	r24, r14
    2eb0:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    spi_transfer(0x00); // Address high byte
    2eb4:	1a 82       	std	Y+2, r1	; 0x02
    2eb6:	c7 01       	movw	r24, r14
    2eb8:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    spi_transfer(0x00); // Address low byte
    2ebc:	1a 82       	std	Y+2, r1	; 0x02
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    for(int i = 0; i < 4800; i ++) {
    2ec4:	cc 24       	eor	r12, r12
    2ec6:	dd 24       	eor	r13, r13
		spi_transfer(pgm_read_byte((&bmp2[i])));	
    2ec8:	f6 01       	movw	r30, r12
    2eca:	e8 5d       	subi	r30, 0xD8	; 216
    2ecc:	fc 4e       	sbci	r31, 0xEC	; 236
    2ece:	e4 91       	lpm	r30, Z+
    2ed0:	ea 83       	std	Y+2, r30	; 0x02
    2ed2:	c7 01       	movw	r24, r14
    2ed4:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>

	csact();
    spi_transfer(0x00); // TX command
    spi_transfer(0x00); // Address high byte
    spi_transfer(0x00); // Address low byte
    for(int i = 0; i < 4800; i ++) {
    2ed8:	08 94       	sec
    2eda:	c1 1c       	adc	r12, r1
    2edc:	d1 1c       	adc	r13, r1
    2ede:	90 ec       	ldi	r25, 0xC0	; 192
    2ee0:	c9 16       	cp	r12, r25
    2ee2:	92 e1       	ldi	r25, 0x12	; 18
    2ee4:	d9 06       	cpc	r13, r25
    2ee6:	81 f7       	brne	.-32     	; 0x2ec8 <main+0x174>
		spi_transfer(pgm_read_byte((&bmp2[i])));	
	}

    csinact();
    2ee8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
    2eec:	af e1       	ldi	r26, 0x1F	; 31
    2eee:	be e4       	ldi	r27, 0x4E	; 78
    2ef0:	11 97       	sbiw	r26, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <main+0x19c>
    2ef4:	00 c0       	rjmp	.+0      	; 0x2ef6 <main+0x1a2>
    2ef6:	00 00       	nop
  	_delay_ms(5); // Or you could poll the BUSY pin, whatever floats your boat


	csact(); // Screen update
    2ef8:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
  	spi_transfer(0x18);
    2efc:	b8 e1       	ldi	r27, 0x18	; 24
    2efe:	ba 83       	std	Y+2, r27	; 0x02
    2f00:	c7 01       	movw	r24, r14
    2f02:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	spi_transfer(0x00);
    2f06:	1a 82       	std	Y+2, r1	; 0x02
    2f08:	c7 01       	movw	r24, r14
    2f0a:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	spi_transfer(0x00);
    2f0e:	1a 82       	std	Y+2, r1	; 0x02
    2f10:	c7 01       	movw	r24, r14
    2f12:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	csinact();
    2f16:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
	
	volatile uint8_t nounce_challenge_buff[32];
	for (i = 0; i < sizeof(nounce_challenge_buff); i++)
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
		nounce_challenge_buff[i] = 0;
    2f1e:	ec e0       	ldi	r30, 0x0C	; 12
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	ec 0f       	add	r30, r28
    2f24:	fd 1f       	adc	r31, r29
    2f26:	e8 0f       	add	r30, r24
    2f28:	f9 1f       	adc	r31, r25
    2f2a:	10 82       	st	Z, r1
  	spi_transfer(0x00);
  	spi_transfer(0x00);
  	csinact();
	
	volatile uint8_t nounce_challenge_buff[32];
	for (i = 0; i < sizeof(nounce_challenge_buff); i++)
    2f2c:	01 96       	adiw	r24, 0x01	; 1
    2f2e:	80 32       	cpi	r24, 0x20	; 32
    2f30:	91 05       	cpc	r25, r1
    2f32:	a9 f7       	brne	.-22     	; 0x2f1e <main+0x1ca>
    2f34:	aa 24       	eor	r10, r10
    2f36:	bb 24       	eor	r11, r11
    2f38:	cc 24       	eor	r12, r12
    2f3a:	dd 24       	eor	r13, r13
		nounce_challenge_buff[i] = 0;

	j = 0;
	for(i = 0; i < 32; i ++) {		
		nounce_challenge_buff[i] = (ascii_to_hex(scan_in_buff[j])<<4) | ascii_to_hex(scan_in_buff[j+1]);
    2f3c:	f1 01       	movw	r30, r2
    2f3e:	ea 0d       	add	r30, r10
    2f40:	fb 1d       	adc	r31, r11
    2f42:	80 81       	ld	r24, Z
    2f44:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <ascii_to_hex>
    2f48:	88 2e       	mov	r8, r24
    2f4a:	f5 01       	movw	r30, r10
    2f4c:	31 96       	adiw	r30, 0x01	; 1
    2f4e:	e2 0d       	add	r30, r2
    2f50:	f3 1d       	adc	r31, r3
    2f52:	80 81       	ld	r24, Z
    2f54:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <ascii_to_hex>
    2f58:	82 94       	swap	r8
    2f5a:	50 ef       	ldi	r21, 0xF0	; 240
    2f5c:	85 22       	and	r8, r21
    2f5e:	88 2a       	or	r8, r24
    2f60:	ec e0       	ldi	r30, 0x0C	; 12
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	ec 0f       	add	r30, r28
    2f66:	fd 1f       	adc	r31, r29
    2f68:	ec 0d       	add	r30, r12
    2f6a:	fd 1d       	adc	r31, r13
    2f6c:	80 82       	st	Z, r8
		j = j + 2;
    2f6e:	e2 e0       	ldi	r30, 0x02	; 2
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	ae 0e       	add	r10, r30
    2f74:	bf 1e       	adc	r11, r31
	volatile uint8_t nounce_challenge_buff[32];
	for (i = 0; i < sizeof(nounce_challenge_buff); i++)
		nounce_challenge_buff[i] = 0;

	j = 0;
	for(i = 0; i < 32; i ++) {		
    2f76:	08 94       	sec
    2f78:	c1 1c       	adc	r12, r1
    2f7a:	d1 1c       	adc	r13, r1
    2f7c:	f0 e2       	ldi	r31, 0x20	; 32
    2f7e:	cf 16       	cp	r12, r31
    2f80:	d1 04       	cpc	r13, r1
    2f82:	e1 f6       	brne	.-72     	; 0x2f3c <main+0x1e8>

	volatile uint8_t tx_buff[SHA204_CMD_SIZE_MAX]; // ((uint8_t) 84)
	volatile uint8_t rx_buff[SHA204_CMD_SIZE_MAX]; // ((uint8_t) 84)

	// Initialize the hardware interface..
	sha204p_init();
    2f84:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <sha204p_init>

	// Wake up the device.
	ret_code = sha204c_wakeup(&response[0]);
    2f88:	80 e5       	ldi	r24, 0x50	; 80
    2f8a:	91 e0       	ldi	r25, 0x01	; 1
    2f8c:	0e 94 0c 2a 	call	0x5418	; 0x5418 <sha204c_wakeup>
    2f90:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS) {
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	88 23       	and	r24, r24
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <main+0x246>
    2f98:	82 cf       	rjmp	.-252    	; 0x2e9e <main+0x14a>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
		continue;
	}	

	for (l = 0; l < sizeof(rx_buff); l++)
		rx_buff[l] = 0;
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	e8 0f       	add	r30, r24
    2fa2:	f9 1f       	adc	r31, r25
    2fa4:	10 82       	st	Z, r1
    2fa6:	01 96       	adiw	r24, 0x01	; 1
	ret_code = sha204c_wakeup(&response[0]);
	if (ret_code != SHA204_SUCCESS) {
		continue;
	}	

	for (l = 0; l < sizeof(rx_buff); l++)
    2fa8:	84 35       	cpi	r24, 0x54	; 84
    2faa:	91 05       	cpc	r25, r1
    2fac:	c1 f7       	brne	.-16     	; 0x2f9e <main+0x24a>
		rx_buff[l] = 0;

	volatile uint8_t serial[9];
	// Read serial number from SHA chip
	ret_code = sha204m_read((uint8_t *) tx_buff, (uint8_t *) rx_buff, ((uint8_t)0x00), ((uint16_t)0x00));
    2fae:	c2 01       	movw	r24, r4
    2fb0:	b8 01       	movw	r22, r16
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	20 e0       	ldi	r18, 0x00	; 0
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <sha204m_read>
    2fbc:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS) {
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	88 23       	and	r24, r24
    2fc2:	09 f0       	breq	.+2      	; 0x2fc6 <main+0x272>
    2fc4:	6c cf       	rjmp	.-296    	; 0x2e9e <main+0x14a>
		continue;
	}
	serial[0] = rx_buff[1];
    2fc6:	d8 01       	movw	r26, r16
    2fc8:	11 96       	adiw	r26, 0x01	; 1
    2fca:	8c 91       	ld	r24, X
    2fcc:	11 97       	sbiw	r26, 0x01	; 1
    2fce:	8b 83       	std	Y+3, r24	; 0x03
	serial[1] = rx_buff[2];
    2fd0:	12 96       	adiw	r26, 0x02	; 2
    2fd2:	8c 91       	ld	r24, X
    2fd4:	12 97       	sbiw	r26, 0x02	; 2
    2fd6:	8c 83       	std	Y+4, r24	; 0x04
	serial[2] = rx_buff[3];
    2fd8:	13 96       	adiw	r26, 0x03	; 3
    2fda:	8c 91       	ld	r24, X
    2fdc:	13 97       	sbiw	r26, 0x03	; 3
    2fde:	8d 83       	std	Y+5, r24	; 0x05
	serial[3] = rx_buff[4];
    2fe0:	14 96       	adiw	r26, 0x04	; 4
    2fe2:	8c 91       	ld	r24, X
    2fe4:	8e 83       	std	Y+6, r24	; 0x06
	/*for (l = 0; l < sizeof(rx_buff); l++)
		rx_buff[l] = 0;*/

	// Read serial number from SHA chip
	ret_code = sha204m_read((uint8_t *) tx_buff, (uint8_t *) rx_buff, ((uint8_t)0x00), ((uint16_t)0x02));
    2fe6:	c2 01       	movw	r24, r4
    2fe8:	b8 01       	movw	r22, r16
    2fea:	40 e0       	ldi	r20, 0x00	; 0
    2fec:	22 e0       	ldi	r18, 0x02	; 2
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <sha204m_read>
    2ff4:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS) {
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	88 23       	and	r24, r24
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <main+0x2aa>
    2ffc:	50 cf       	rjmp	.-352    	; 0x2e9e <main+0x14a>
		continue;
	}

	serial[4] = rx_buff[1];
    2ffe:	f8 01       	movw	r30, r16
    3000:	81 81       	ldd	r24, Z+1	; 0x01
    3002:	8f 83       	std	Y+7, r24	; 0x07
	serial[5] = rx_buff[2];
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	88 87       	std	Y+8, r24	; 0x08
	serial[6] = rx_buff[3];
    3008:	83 81       	ldd	r24, Z+3	; 0x03
    300a:	89 87       	std	Y+9, r24	; 0x09
	serial[7] = rx_buff[4];
    300c:	84 81       	ldd	r24, Z+4	; 0x04
    300e:	8a 87       	std	Y+10, r24	; 0x0a

	// Read serial number from SHA chip
	ret_code = sha204m_read((uint8_t *) tx_buff, (uint8_t *) rx_buff, ((uint8_t)0x00), ((uint16_t)0x03));
    3010:	c2 01       	movw	r24, r4
    3012:	b8 01       	movw	r22, r16
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	23 e0       	ldi	r18, 0x03	; 3
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	0e 94 f9 2d 	call	0x5bf2	; 0x5bf2 <sha204m_read>
    301e:	89 83       	std	Y+1, r24	; 0x01
	if (ret_code != SHA204_SUCCESS) {
    3020:	89 81       	ldd	r24, Y+1	; 0x01
    3022:	88 23       	and	r24, r24
    3024:	09 f0       	breq	.+2      	; 0x3028 <main+0x2d4>
    3026:	3b cf       	rjmp	.-394    	; 0x2e9e <main+0x14a>
		continue;
	}

	serial[8] = rx_buff[1];
    3028:	d8 01       	movw	r26, r16
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	8c 91       	ld	r24, X
    302e:	8b 87       	std	Y+11, r24	; 0x0b

	// Send nounce to device
	ret_code = sha204m_nonce((uint8_t *) tx_buff, (uint8_t *) rx_buff, NONCE_MODE_PASSTHROUGH, (uint8_t *) nounce_challenge_buff);
    3030:	c2 01       	movw	r24, r4
    3032:	b8 01       	movw	r22, r16
    3034:	43 e0       	ldi	r20, 0x03	; 3
    3036:	9e 01       	movw	r18, r28
    3038:	24 5f       	subi	r18, 0xF4	; 244
    303a:	3f 4f       	sbci	r19, 0xFF	; 255
    303c:	0e 94 7b 2d 	call	0x5af6	; 0x5af6 <sha204m_nonce>
    3040:	89 83       	std	Y+1, r24	; 0x01

	if (ret_code != SHA204_SUCCESS) {
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	88 23       	and	r24, r24
    3046:	a9 f4       	brne	.+42     	; 0x3072 <main+0x31e>
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	90 e0       	ldi	r25, 0x00	; 0
		evaluate_ret_code(ret_code);
		continue;
	}

	for (l = 0; l < sizeof(rx_buff); l++)
		rx_buff[l] = 0;
    304c:	f8 01       	movw	r30, r16
    304e:	e8 0f       	add	r30, r24
    3050:	f9 1f       	adc	r31, r25
    3052:	10 82       	st	Z, r1
    3054:	01 96       	adiw	r24, 0x01	; 1
	if (ret_code != SHA204_SUCCESS) {
		evaluate_ret_code(ret_code);
		continue;
	}

	for (l = 0; l < sizeof(rx_buff); l++)
    3056:	84 35       	cpi	r24, 0x54	; 84
    3058:	91 05       	cpc	r25, r1
    305a:	c1 f7       	brne	.-16     	; 0x304c <main+0x2f8>
		rx_buff[l] = 0;

	// Execute MAC command 
	ret_code = sha204m_hmac((uint8_t *) tx_buff, (uint8_t *) rx_buff, ((uint8_t) 0x44), ((uint16_t)0x00));
    305c:	c2 01       	movw	r24, r4
    305e:	b8 01       	movw	r22, r16
    3060:	44 e4       	ldi	r20, 0x44	; 68
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <sha204m_hmac>
    306a:	89 83       	std	Y+1, r24	; 0x01
		
	if (ret_code != SHA204_SUCCESS) {
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	88 23       	and	r24, r24
    3070:	21 f0       	breq	.+8      	; 0x307a <main+0x326>
		evaluate_ret_code(ret_code);
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	0e 94 48 16 	call	0x2c90	; 0x2c90 <evaluate_ret_code>
    3078:	12 cf       	rjmp	.-476    	; 0x2e9e <main+0x14a>
		continue;
	}

	// Put device to sleep.
 	ret_code = sha204p_sleep();
    307a:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sha204p_sleep>
    307e:	89 83       	std	Y+1, r24	; 0x01

	PORTC &=~ _BV(PC3);
    3080:	43 98       	cbi	0x08, 3	; 8
    3082:	80 e0       	ldi	r24, 0x00	; 0
    3084:	90 e0       	ldi	r25, 0x00	; 0

    // Write QR code to display
	volatile char tosnd[56];

	for (l = 0; l < sizeof(tosnd); l++)
		tosnd[l] = 0;
    3086:	ec e2       	ldi	r30, 0x2C	; 44
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	ec 0f       	add	r30, r28
    308c:	fd 1f       	adc	r31, r29
    308e:	e8 0f       	add	r30, r24
    3090:	f9 1f       	adc	r31, r25
    3092:	10 82       	st	Z, r1
    3094:	01 96       	adiw	r24, 0x01	; 1
	PORTC &=~ _BV(PC3);

    // Write QR code to display
	volatile char tosnd[56];

	for (l = 0; l < sizeof(tosnd); l++)
    3096:	88 33       	cpi	r24, 0x38	; 56
    3098:	91 05       	cpc	r25, r1
    309a:	a9 f7       	brne	.-22     	; 0x3086 <main+0x332>
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <main+0x350>
		tosnd[l] = 0;

	// Shift contents of rx_buff one left
	for (i=0; i < 33; i ++) {
    30a2:	c9 01       	movw	r24, r18
		rx_buff[i] = rx_buff[i+1];
    30a4:	9c 01       	movw	r18, r24
    30a6:	2f 5f       	subi	r18, 0xFF	; 255
    30a8:	3f 4f       	sbci	r19, 0xFF	; 255
    30aa:	f8 01       	movw	r30, r16
    30ac:	e2 0f       	add	r30, r18
    30ae:	f3 1f       	adc	r31, r19
    30b0:	40 81       	ld	r20, Z
    30b2:	80 0f       	add	r24, r16
    30b4:	91 1f       	adc	r25, r17
    30b6:	fc 01       	movw	r30, r24
    30b8:	40 83       	st	Z, r20

	for (l = 0; l < sizeof(tosnd); l++)
		tosnd[l] = 0;

	// Shift contents of rx_buff one left
	for (i=0; i < 33; i ++) {
    30ba:	21 32       	cpi	r18, 0x21	; 33
    30bc:	31 05       	cpc	r19, r1
    30be:	89 f7       	brne	.-30     	; 0x30a2 <main+0x34e>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	fc 01       	movw	r30, r24
    30c6:	b0 96       	adiw	r30, 0x20	; 32
		rx_buff[i] = rx_buff[i+1];
	}	

	// Add serial number
	for (i=0; i < 9; i ++) {
		rx_buff[i+32] = serial[i];	
    30c8:	a3 e0       	ldi	r26, 0x03	; 3
    30ca:	b0 e0       	ldi	r27, 0x00	; 0
    30cc:	ac 0f       	add	r26, r28
    30ce:	bd 1f       	adc	r27, r29
    30d0:	a8 0f       	add	r26, r24
    30d2:	b9 1f       	adc	r27, r25
    30d4:	2c 91       	ld	r18, X
    30d6:	e0 0f       	add	r30, r16
    30d8:	f1 1f       	adc	r31, r17
    30da:	20 83       	st	Z, r18
	for (i=0; i < 33; i ++) {
		rx_buff[i] = rx_buff[i+1];
	}	

	// Add serial number
	for (i=0; i < 9; i ++) {
    30dc:	01 96       	adiw	r24, 0x01	; 1
    30de:	89 30       	cpi	r24, 0x09	; 9
    30e0:	91 05       	cpc	r25, r1
    30e2:	81 f7       	brne	.-32     	; 0x30c4 <main+0x370>
		rx_buff[i+32] = serial[i];	
	}

	base64enc((char *) tosnd,(uint8_t *) rx_buff, ((uint16_t)0x29));
    30e4:	ce 01       	movw	r24, r28
    30e6:	8c 96       	adiw	r24, 0x2c	; 44
    30e8:	b8 01       	movw	r22, r16
    30ea:	49 e2       	ldi	r20, 0x29	; 41
    30ec:	50 e0       	ldi	r21, 0x00	; 0
    30ee:	0e 94 0b 31 	call	0x6216	; 0x6216 <base64enc>
	for(int j = 0; j < 32; j++){
		tosnd[j*2] = hexval[((rx_buff[j+1] >> 4) & 0xF)];
		tosnd[(j*2) + 1] = hexval[(rx_buff[j+1]) & 0x0F];
	}*/
	//strcpy((char *)strinbuf, "XRxeXi48BKU5IFmPb6/lpTdRIunjaMSaDfMMyGCL/hcBIzs5BZda7u4=");
	strcpy((char *)strinbuf, tosnd);
    30f2:	8c ec       	ldi	r24, 0xCC	; 204
    30f4:	93 e0       	ldi	r25, 0x03	; 3
    30f6:	be 01       	movw	r22, r28
    30f8:	64 5d       	subi	r22, 0xD4	; 212
    30fa:	7f 4f       	sbci	r23, 0xFF	; 255
    30fc:	0e 94 90 33 	call	0x6720	; 0x6720 <strcpy>
	
    qrencode();
    3100:	0e 94 93 23 	call	0x4726	; 0x4726 <qrencode>
    3104:	8f ef       	ldi	r24, 0xFF	; 255
    3106:	97 e9       	ldi	r25, 0x97	; 151
    3108:	aa e3       	ldi	r26, 0x3A	; 58
    310a:	81 50       	subi	r24, 0x01	; 1
    310c:	90 40       	sbci	r25, 0x00	; 0
    310e:	a0 40       	sbci	r26, 0x00	; 0
    3110:	e1 f7       	brne	.-8      	; 0x310a <main+0x3b6>
    3112:	00 c0       	rjmp	.+0      	; 0x3114 <main+0x3c0>
    3114:	00 00       	nop
    _delay_ms(1200); // Or you could poll the BUSY pin, whatever floats your boat
    csact();
    3116:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
    spi_transfer(0x24)
    311a:	94 e2       	ldi	r25, 0x24	; 36
    311c:	9a 83       	std	Y+2, r25	; 0x02
    311e:	c7 01       	movw	r24, r14
    3120:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
    csinact();
    3124:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
    3128:	8f ef       	ldi	r24, 0xFF	; 255
    312a:	97 e9       	ldi	r25, 0x97	; 151
    312c:	aa e3       	ldi	r26, 0x3A	; 58
    312e:	81 50       	subi	r24, 0x01	; 1
    3130:	90 40       	sbci	r25, 0x00	; 0
    3132:	a0 40       	sbci	r26, 0x00	; 0
    3134:	e1 f7       	brne	.-8      	; 0x312e <main+0x3da>
    3136:	00 c0       	rjmp	.+0      	; 0x3138 <main+0x3e4>
    3138:	00 00       	nop
    313a:	42 ef       	ldi	r20, 0xF2	; 242
    313c:	64 2e       	mov	r6, r20
    313e:	4f ef       	ldi	r20, 0xFF	; 255
    3140:	74 2e       	mov	r7, r20
    3142:	aa 24       	eor	r10, r10
    3144:	bb 24       	eor	r11, r11
    _delay_ms(1200); // Or you could poll the BUSY pin, whatever floats your boat

    t = 0;
    unsigned char b = 0;
    3146:	40 e0       	ldi	r20, 0x00	; 0
    csact();
    spi_transfer(0x24)
    csinact();
    _delay_ms(1200); // Or you could poll the BUSY pin, whatever floats your boat

    t = 0;
    3148:	88 24       	eor	r8, r8
    314a:	99 24       	eor	r9, r9
    unsigned char b = 0;
    for ( k = 0; k < 160 ; k++) { // 240
        csact();
    314c:	c2 5b       	subi	r28, 0xB2	; 178
    314e:	de 4f       	sbci	r29, 0xFE	; 254
    3150:	48 83       	st	Y, r20
    3152:	ce 54       	subi	r28, 0x4E	; 78
    3154:	d1 40       	sbci	r29, 0x01	; 1
    3156:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
        i = k * 30; // 40
        spi_transfer(0x00); // TX command
    315a:	1a 82       	std	Y+2, r1	; 0x02
    315c:	c7 01       	movw	r24, r14
    315e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
        spi_transfer((i>>8)); // Address high byte
    3162:	ba 82       	std	Y+2, r11	; 0x02
    3164:	c7 01       	movw	r24, r14
    3166:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
        spi_transfer(i); // Address low byte
    316a:	aa 82       	std	Y+2, r10	; 0x02
    316c:	c7 01       	movw	r24, r14
    316e:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
        for ( i = 0; i < 240 ; i++) { // 320
            b <<= 1;
            int x = (i - 14)/4; // (i - 60)/6
            int y = (k - 14)/4; // (k - 18)/6
    3172:	d3 01       	movw	r26, r6
    3174:	b6 95       	lsr	r27
    3176:	a7 95       	ror	r26
    3178:	b6 95       	lsr	r27
    317a:	a7 95       	ror	r26
    317c:	c4 5b       	subi	r28, 0xB4	; 180
    317e:	de 4f       	sbci	r29, 0xFE	; 254
    3180:	b9 83       	std	Y+1, r27	; 0x01
    3182:	a8 83       	st	Y, r26
    3184:	cc 54       	subi	r28, 0x4C	; 76
    3186:	d1 40       	sbci	r29, 0x01	; 1
    3188:	22 ef       	ldi	r18, 0xF2	; 242
    318a:	c2 2e       	mov	r12, r18
    318c:	2f ef       	ldi	r18, 0xFF	; 255
    318e:	d2 2e       	mov	r13, r18
    3190:	c2 5b       	subi	r28, 0xB2	; 178
    3192:	de 4f       	sbci	r29, 0xFE	; 254
    3194:	48 81       	ld	r20, Y
    3196:	ce 54       	subi	r28, 0x4E	; 78
    3198:	d1 40       	sbci	r29, 0x01	; 1
        i = k * 30; // 40
        spi_transfer(0x00); // TX command
        spi_transfer((i>>8)); // Address high byte
        spi_transfer(i); // Address low byte
        for ( i = 0; i < 240 ; i++) { // 320
            b <<= 1;
    319a:	44 0f       	add	r20, r20
            int x = (i - 14)/4; // (i - 60)/6
    319c:	b6 01       	movw	r22, r12
    319e:	76 95       	lsr	r23
    31a0:	67 95       	ror	r22
    31a2:	76 95       	lsr	r23
    31a4:	67 95       	ror	r22
            int y = (k - 14)/4; // (k - 18)/6
            if( x >= 0 && y >= 0 && x < WD && y < WD )
    31a6:	80 91 46 01 	lds	r24, 0x0146
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	68 17       	cp	r22, r24
    31ae:	79 07       	cpc	r23, r25
    31b0:	8c f5       	brge	.+98     	; 0x3214 <main+0x4c0>
    31b2:	c4 5b       	subi	r28, 0xB4	; 180
    31b4:	de 4f       	sbci	r29, 0xFE	; 254
    31b6:	e8 81       	ld	r30, Y
    31b8:	f9 81       	ldd	r31, Y+1	; 0x01
    31ba:	cc 54       	subi	r28, 0x4C	; 76
    31bc:	d1 40       	sbci	r29, 0x01	; 1
    31be:	e8 17       	cp	r30, r24
    31c0:	f9 07       	cpc	r31, r25
    31c2:	44 f5       	brge	.+80     	; 0x3214 <main+0x4c0>
                if( QRBIT(x,y) )
    31c4:	fb 01       	movw	r30, r22
    31c6:	83 e0       	ldi	r24, 0x03	; 3
    31c8:	f5 95       	asr	r31
    31ca:	e7 95       	ror	r30
    31cc:	8a 95       	dec	r24
    31ce:	e1 f7       	brne	.-8      	; 0x31c8 <main+0x474>
    31d0:	20 91 47 01 	lds	r18, 0x0147
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c4 5b       	subi	r28, 0xB4	; 180
    31d8:	de 4f       	sbci	r29, 0xFE	; 254
    31da:	a8 81       	ld	r26, Y
    31dc:	b9 81       	ldd	r27, Y+1	; 0x01
    31de:	cc 54       	subi	r28, 0x4C	; 76
    31e0:	d1 40       	sbci	r29, 0x01	; 1
    31e2:	a2 9f       	mul	r26, r18
    31e4:	c0 01       	movw	r24, r0
    31e6:	a3 9f       	mul	r26, r19
    31e8:	90 0d       	add	r25, r0
    31ea:	b2 9f       	mul	r27, r18
    31ec:	90 0d       	add	r25, r0
    31ee:	11 24       	eor	r1, r1
    31f0:	ec 58       	subi	r30, 0x8C	; 140
    31f2:	fe 4f       	sbci	r31, 0xFE	; 254
    31f4:	e8 0f       	add	r30, r24
    31f6:	f9 1f       	adc	r31, r25
    31f8:	20 81       	ld	r18, Z
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	cb 01       	movw	r24, r22
    31fe:	80 95       	com	r24
    3200:	90 95       	com	r25
    3202:	87 70       	andi	r24, 0x07	; 7
    3204:	90 70       	andi	r25, 0x00	; 0
    3206:	02 c0       	rjmp	.+4      	; 0x320c <main+0x4b8>
    3208:	35 95       	asr	r19
    320a:	27 95       	ror	r18
    320c:	8a 95       	dec	r24
    320e:	e2 f7       	brpl	.-8      	; 0x3208 <main+0x4b4>
    3210:	20 fd       	sbrc	r18, 0
                    b |= 1;
    3212:	41 60       	ori	r20, 0x01	; 1
            if( ++t > 7 ) {
    3214:	08 94       	sec
    3216:	81 1c       	adc	r8, r1
    3218:	91 1c       	adc	r9, r1
    321a:	b8 e0       	ldi	r27, 0x08	; 8
    321c:	8b 16       	cp	r8, r27
    321e:	91 04       	cpc	r9, r1
    3220:	40 f0       	brcs	.+16     	; 0x3232 <main+0x4de>
                t = 0;
                spi_transfer((~b));
    3222:	40 95       	com	r20
    3224:	4a 83       	std	Y+2, r20	; 0x02
    3226:	c7 01       	movw	r24, r14
    3228:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
                b = 0;
    322c:	40 e0       	ldi	r20, 0x00	; 0
            int y = (k - 14)/4; // (k - 18)/6
            if( x >= 0 && y >= 0 && x < WD && y < WD )
                if( QRBIT(x,y) )
                    b |= 1;
            if( ++t > 7 ) {
                t = 0;
    322e:	88 24       	eor	r8, r8
    3230:	99 24       	eor	r9, r9
                spi_transfer((~b));
    3232:	08 94       	sec
    3234:	c1 1c       	adc	r12, r1
    3236:	d1 1c       	adc	r13, r1
        csact();
        i = k * 30; // 40
        spi_transfer(0x00); // TX command
        spi_transfer((i>>8)); // Address high byte
        spi_transfer(i); // Address low byte
        for ( i = 0; i < 240 ; i++) { // 320
    3238:	e2 ee       	ldi	r30, 0xE2	; 226
    323a:	ce 16       	cp	r12, r30
    323c:	d1 04       	cpc	r13, r1
    323e:	09 f0       	breq	.+2      	; 0x3242 <main+0x4ee>
    3240:	ac cf       	rjmp	.-168    	; 0x319a <main+0x446>
                t = 0;
                spi_transfer((~b));
                b = 0;
            }
        }
        csinact();
    3242:	c2 5b       	subi	r28, 0xB2	; 178
    3244:	de 4f       	sbci	r29, 0xFE	; 254
    3246:	48 83       	st	Y, r20
    3248:	ce 54       	subi	r28, 0x4E	; 78
    324a:	d1 40       	sbci	r29, 0x01	; 1
    324c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
    3250:	8f e1       	ldi	r24, 0x1F	; 31
    3252:	9e e4       	ldi	r25, 0x4E	; 78
    3254:	01 97       	sbiw	r24, 0x01	; 1
    3256:	f1 f7       	brne	.-4      	; 0x3254 <main+0x500>
    3258:	00 c0       	rjmp	.+0      	; 0x325a <main+0x506>
    325a:	00 00       	nop
    325c:	ae e1       	ldi	r26, 0x1E	; 30
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	aa 0e       	add	r10, r26
    3262:	bb 1e       	adc	r11, r27
    3264:	08 94       	sec
    3266:	61 1c       	adc	r6, r1
    3268:	71 1c       	adc	r7, r1
    csinact();
    _delay_ms(1200); // Or you could poll the BUSY pin, whatever floats your boat

    t = 0;
    unsigned char b = 0;
    for ( k = 0; k < 160 ; k++) { // 240
    326a:	c2 5b       	subi	r28, 0xB2	; 178
    326c:	de 4f       	sbci	r29, 0xFE	; 254
    326e:	48 81       	ld	r20, Y
    3270:	ce 54       	subi	r28, 0x4E	; 78
    3272:	d1 40       	sbci	r29, 0x01	; 1
    3274:	b0 ec       	ldi	r27, 0xC0	; 192
    3276:	ab 16       	cp	r10, r27
    3278:	b2 e1       	ldi	r27, 0x12	; 18
    327a:	bb 06       	cpc	r11, r27
    327c:	09 f0       	breq	.+2      	; 0x3280 <main+0x52c>
    327e:	66 cf       	rjmp	.-308    	; 0x314c <main+0x3f8>
        }
        csinact();
        _delay_ms(5); // Or you could poll the BUSY pin, whatever floats your boat
    }

    csinact();
    3280:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
    3284:	ef e1       	ldi	r30, 0x1F	; 31
    3286:	fe e4       	ldi	r31, 0x4E	; 78
    3288:	31 97       	sbiw	r30, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <main+0x534>
    328c:	00 c0       	rjmp	.+0      	; 0x328e <main+0x53a>
    328e:	00 00       	nop
  	_delay_ms(5); // Or you could poll the BUSY pin, whatever floats your boat


	csact(); // Screen update
    3290:	0e 94 20 16 	call	0x2c40	; 0x2c40 <csact>
  	spi_transfer(0x18);
    3294:	f8 e1       	ldi	r31, 0x18	; 24
    3296:	fa 83       	std	Y+2, r31	; 0x02
    3298:	c7 01       	movw	r24, r14
    329a:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	spi_transfer(0x00);
    329e:	1a 82       	std	Y+2, r1	; 0x02
    32a0:	c7 01       	movw	r24, r14
    32a2:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	spi_transfer(0x00);
    32a6:	1a 82       	std	Y+2, r1	; 0x02
    32a8:	c7 01       	movw	r24, r14
    32aa:	0e 94 24 16 	call	0x2c48	; 0x2c48 <sendspiblock.clone.0>
  	csinact();
    32ae:	0e 94 22 16 	call	0x2c44	; 0x2c44 <csinact>
    32b2:	f5 cd       	rjmp	.-1046   	; 0x2e9e <main+0x14a>

000032b4 <setmask>:
#define SETQRBIT(x,y) framebase[((x)>>3) + (y) * WDB] |= 0x80 >> ((x) & 7)

static void setmask(unsigned char x, unsigned char y)
{
    unsigned bt;
    if (x > y) {
    32b4:	68 17       	cp	r22, r24
    32b6:	18 f4       	brcc	.+6      	; 0x32be <setmask+0xa>
    32b8:	98 2f       	mov	r25, r24
    32ba:	86 2f       	mov	r24, r22
    32bc:	69 2f       	mov	r22, r25
        bt = x;
        x = y;
        y = bt;
    }
    // y*y = 1+3+5...
    bt = y;
    32be:	70 e0       	ldi	r23, 0x00	; 0
    bt *= y;
    32c0:	66 9f       	mul	r22, r22
    32c2:	90 01       	movw	r18, r0
    32c4:	67 9f       	mul	r22, r23
    32c6:	30 0d       	add	r19, r0
    32c8:	76 9f       	mul	r23, r22
    32ca:	30 0d       	add	r19, r0
    32cc:	11 24       	eor	r1, r1
    bt += y;
    32ce:	26 0f       	add	r18, r22
    32d0:	37 1f       	adc	r19, r23
    bt >>= 1;
    32d2:	36 95       	lsr	r19
    32d4:	27 95       	ror	r18
    bt += x;
    32d6:	28 0f       	add	r18, r24
    32d8:	31 1d       	adc	r19, r1
    framask[bt >> 3] |= 0x80 >> (bt & 7);
    32da:	c9 01       	movw	r24, r18
    32dc:	43 e0       	ldi	r20, 0x03	; 3
    32de:	96 95       	lsr	r25
    32e0:	87 95       	ror	r24
    32e2:	4a 95       	dec	r20
    32e4:	e1 f7       	brne	.-8      	; 0x32de <setmask+0x2a>
    32e6:	e0 91 ba 2b 	lds	r30, 0x2BBA
    32ea:	f0 91 bb 2b 	lds	r31, 0x2BBB
    32ee:	e8 0f       	add	r30, r24
    32f0:	f9 1f       	adc	r31, r25
    32f2:	27 70       	andi	r18, 0x07	; 7
    32f4:	30 70       	andi	r19, 0x00	; 0
    32f6:	80 e8       	ldi	r24, 0x80	; 128
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <setmask+0x4c>
    32fc:	95 95       	asr	r25
    32fe:	87 95       	ror	r24
    3300:	2a 95       	dec	r18
    3302:	e2 f7       	brpl	.-8      	; 0x32fc <setmask+0x48>
    3304:	20 81       	ld	r18, Z
    3306:	28 2b       	or	r18, r24
    3308:	20 83       	st	Z, r18
}
    330a:	08 95       	ret

0000330c <putalign>:
        }
    }
}

static void putalign(int x, int y)
{
    330c:	2f 92       	push	r2
    330e:	3f 92       	push	r3
    3310:	4f 92       	push	r4
    3312:	5f 92       	push	r5
    3314:	6f 92       	push	r6
    3316:	7f 92       	push	r7
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    int j;

    SETQRBIT(x, y);
    3330:	40 91 47 01 	lds	r20, 0x0147
    3334:	50 e0       	ldi	r21, 0x00	; 0
    3336:	64 9f       	mul	r22, r20
    3338:	90 01       	movw	r18, r0
    333a:	65 9f       	mul	r22, r21
    333c:	30 0d       	add	r19, r0
    333e:	74 9f       	mul	r23, r20
    3340:	30 0d       	add	r19, r0
    3342:	11 24       	eor	r1, r1
    3344:	ac 01       	movw	r20, r24
    3346:	a3 e0       	ldi	r26, 0x03	; 3
    3348:	55 95       	asr	r21
    334a:	47 95       	ror	r20
    334c:	aa 95       	dec	r26
    334e:	e1 f7       	brne	.-8      	; 0x3348 <putalign+0x3c>
    3350:	24 0f       	add	r18, r20
    3352:	35 1f       	adc	r19, r21
    3354:	e0 91 15 2b 	lds	r30, 0x2B15
    3358:	f0 91 16 2b 	lds	r31, 0x2B16
    335c:	e2 0f       	add	r30, r18
    335e:	f3 1f       	adc	r31, r19
    3360:	ac 01       	movw	r20, r24
    3362:	47 70       	andi	r20, 0x07	; 7
    3364:	50 70       	andi	r21, 0x00	; 0
    3366:	20 e8       	ldi	r18, 0x80	; 128
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	d9 01       	movw	r26, r18
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <putalign+0x66>
    336e:	b5 95       	asr	r27
    3370:	a7 95       	ror	r26
    3372:	4a 95       	dec	r20
    3374:	e2 f7       	brpl	.-8      	; 0x336e <putalign+0x62>
    3376:	ad 01       	movw	r20, r26
    3378:	a0 81       	ld	r26, Z
    337a:	a4 2b       	or	r26, r20
    337c:	a0 83       	st	Z, r26
    for (j = -2; j < 2; j++) {
        SETQRBIT(x + j, y - 2);
        SETQRBIT(x - 2, y + j + 1);
    337e:	ac 01       	movw	r20, r24
    3380:	42 50       	subi	r20, 0x02	; 2
    3382:	50 40       	sbci	r21, 0x00	; 0
    3384:	7a 01       	movw	r14, r20
    3386:	f3 e0       	ldi	r31, 0x03	; 3
    3388:	f5 94       	asr	r15
    338a:	e7 94       	ror	r14
    338c:	fa 95       	dec	r31
    338e:	e1 f7       	brne	.-8      	; 0x3388 <putalign+0x7c>
    3390:	47 70       	andi	r20, 0x07	; 7
    3392:	50 70       	andi	r21, 0x00	; 0
    3394:	f9 01       	movw	r30, r18
    3396:	02 c0       	rjmp	.+4      	; 0x339c <putalign+0x90>
    3398:	f5 95       	asr	r31
    339a:	e7 95       	ror	r30
    339c:	4a 95       	dec	r20
    339e:	e2 f7       	brpl	.-8      	; 0x3398 <putalign+0x8c>
    33a0:	3e 2e       	mov	r3, r30
        SETQRBIT(x + 2, y + j);
    33a2:	ac 01       	movw	r20, r24
    33a4:	4e 5f       	subi	r20, 0xFE	; 254
    33a6:	5f 4f       	sbci	r21, 0xFF	; 255
    33a8:	6a 01       	movw	r12, r20
    33aa:	e3 e0       	ldi	r30, 0x03	; 3
    33ac:	d5 94       	asr	r13
    33ae:	c7 94       	ror	r12
    33b0:	ea 95       	dec	r30
    33b2:	e1 f7       	brne	.-8      	; 0x33ac <putalign+0xa0>
    33b4:	47 70       	andi	r20, 0x07	; 7
    33b6:	50 70       	andi	r21, 0x00	; 0
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <putalign+0xb2>
    33ba:	35 95       	asr	r19
    33bc:	27 95       	ror	r18
    33be:	4a 95       	dec	r20
    33c0:	e2 f7       	brpl	.-8      	; 0x33ba <putalign+0xae>
    33c2:	22 2e       	mov	r2, r18
static void putalign(int x, int y)
{
    int j;

    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
    33c4:	2e ef       	ldi	r18, 0xFE	; 254
    33c6:	3f ef       	ldi	r19, 0xFF	; 255
        SETQRBIT(x + j, y - 2);
    33c8:	5e ef       	ldi	r21, 0xFE	; 254
    33ca:	a5 2e       	mov	r10, r21
    33cc:	5f ef       	ldi	r21, 0xFF	; 255
    33ce:	b5 2e       	mov	r11, r21
    33d0:	a6 0e       	add	r10, r22
    33d2:	b7 1e       	adc	r11, r23
    33d4:	00 e8       	ldi	r16, 0x80	; 128
    33d6:	10 e0       	ldi	r17, 0x00	; 0
            SETQRBIT(i + j + 1, k + 4);
        }
    }
}

static void putalign(int x, int y)
    33d8:	4b 01       	movw	r8, r22
    33da:	08 94       	sec
    33dc:	81 1c       	adc	r8, r1
    33de:	91 1c       	adc	r9, r1
    33e0:	3c 01       	movw	r6, r24
    33e2:	08 94       	sec
    33e4:	61 1c       	adc	r6, r1
    33e6:	71 1c       	adc	r7, r1
    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
        SETQRBIT(x + j, y - 2);
        SETQRBIT(x - 2, y + j + 1);
        SETQRBIT(x + 2, y + j);
        SETQRBIT(x + j + 1, y + 2);
    33e8:	42 e0       	ldi	r20, 0x02	; 2
    33ea:	44 2e       	mov	r4, r20
    33ec:	51 2c       	mov	r5, r1
    33ee:	46 0e       	add	r4, r22
    33f0:	57 1e       	adc	r5, r23
            SETQRBIT(i + j + 1, k + 4);
        }
    }
}

static void putalign(int x, int y)
    33f2:	f9 01       	movw	r30, r18
    33f4:	e8 0f       	add	r30, r24
    33f6:	f9 1f       	adc	r31, r25
{
    int j;

    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
        SETQRBIT(x + j, y - 2);
    33f8:	af 01       	movw	r20, r30
    33fa:	b3 e0       	ldi	r27, 0x03	; 3
    33fc:	55 95       	asr	r21
    33fe:	47 95       	ror	r20
    3400:	ba 95       	dec	r27
    3402:	e1 f7       	brne	.-8      	; 0x33fc <putalign+0xf0>
    3404:	a0 91 47 01 	lds	r26, 0x0147
    3408:	ca 2f       	mov	r28, r26
    340a:	d0 e0       	ldi	r29, 0x00	; 0
    340c:	ac 9e       	mul	r10, r28
    340e:	d0 01       	movw	r26, r0
    3410:	ad 9e       	mul	r10, r29
    3412:	b0 0d       	add	r27, r0
    3414:	bc 9e       	mul	r11, r28
    3416:	b0 0d       	add	r27, r0
    3418:	11 24       	eor	r1, r1
    341a:	4a 0f       	add	r20, r26
    341c:	5b 1f       	adc	r21, r27
    341e:	a0 91 15 2b 	lds	r26, 0x2B15
    3422:	b0 91 16 2b 	lds	r27, 0x2B16
    3426:	a4 0f       	add	r26, r20
    3428:	b5 1f       	adc	r27, r21
    342a:	e7 70       	andi	r30, 0x07	; 7
    342c:	f0 70       	andi	r31, 0x00	; 0
    342e:	a8 01       	movw	r20, r16
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <putalign+0x12a>
    3432:	55 95       	asr	r21
    3434:	47 95       	ror	r20
    3436:	ea 95       	dec	r30
    3438:	e2 f7       	brpl	.-8      	; 0x3432 <putalign+0x126>
    343a:	fa 01       	movw	r30, r20
    343c:	4c 91       	ld	r20, X
    343e:	4e 2b       	or	r20, r30
    3440:	4c 93       	st	X, r20
            SETQRBIT(i + j + 1, k + 4);
        }
    }
}

static void putalign(int x, int y)
    3442:	d4 01       	movw	r26, r8
    3444:	a2 0f       	add	r26, r18
    3446:	b3 1f       	adc	r27, r19
    int j;

    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
        SETQRBIT(x + j, y - 2);
        SETQRBIT(x - 2, y + j + 1);
    3448:	e0 91 47 01 	lds	r30, 0x0147
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	ae 9f       	mul	r26, r30
    3450:	a0 01       	movw	r20, r0
    3452:	af 9f       	mul	r26, r31
    3454:	50 0d       	add	r21, r0
    3456:	be 9f       	mul	r27, r30
    3458:	50 0d       	add	r21, r0
    345a:	11 24       	eor	r1, r1
    345c:	4e 0d       	add	r20, r14
    345e:	5f 1d       	adc	r21, r15
    3460:	e0 91 15 2b 	lds	r30, 0x2B15
    3464:	f0 91 16 2b 	lds	r31, 0x2B16
    3468:	e4 0f       	add	r30, r20
    346a:	f5 1f       	adc	r31, r21
    346c:	40 81       	ld	r20, Z
    346e:	43 29       	or	r20, r3
    3470:	40 83       	st	Z, r20
            SETQRBIT(i + j + 1, k + 4);
        }
    }
}

static void putalign(int x, int y)
    3472:	d9 01       	movw	r26, r18
    3474:	a6 0f       	add	r26, r22
    3476:	b7 1f       	adc	r27, r23

    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
        SETQRBIT(x + j, y - 2);
        SETQRBIT(x - 2, y + j + 1);
        SETQRBIT(x + 2, y + j);
    3478:	e0 91 47 01 	lds	r30, 0x0147
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	ae 9f       	mul	r26, r30
    3480:	a0 01       	movw	r20, r0
    3482:	af 9f       	mul	r26, r31
    3484:	50 0d       	add	r21, r0
    3486:	be 9f       	mul	r27, r30
    3488:	50 0d       	add	r21, r0
    348a:	11 24       	eor	r1, r1
    348c:	4c 0d       	add	r20, r12
    348e:	5d 1d       	adc	r21, r13
    3490:	e0 91 15 2b 	lds	r30, 0x2B15
    3494:	f0 91 16 2b 	lds	r31, 0x2B16
    3498:	e4 0f       	add	r30, r20
    349a:	f5 1f       	adc	r31, r21
    349c:	40 81       	ld	r20, Z
    349e:	42 29       	or	r20, r2
    34a0:	40 83       	st	Z, r20
            SETQRBIT(i + j + 1, k + 4);
        }
    }
}

static void putalign(int x, int y)
    34a2:	f3 01       	movw	r30, r6
    34a4:	e2 0f       	add	r30, r18
    34a6:	f3 1f       	adc	r31, r19
    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
        SETQRBIT(x + j, y - 2);
        SETQRBIT(x - 2, y + j + 1);
        SETQRBIT(x + 2, y + j);
        SETQRBIT(x + j + 1, y + 2);
    34a8:	af 01       	movw	r20, r30
    34aa:	a3 e0       	ldi	r26, 0x03	; 3
    34ac:	55 95       	asr	r21
    34ae:	47 95       	ror	r20
    34b0:	aa 95       	dec	r26
    34b2:	e1 f7       	brne	.-8      	; 0x34ac <putalign+0x1a0>
    34b4:	a0 91 47 01 	lds	r26, 0x0147
    34b8:	ca 2f       	mov	r28, r26
    34ba:	d0 e0       	ldi	r29, 0x00	; 0
    34bc:	4c 9e       	mul	r4, r28
    34be:	d0 01       	movw	r26, r0
    34c0:	4d 9e       	mul	r4, r29
    34c2:	b0 0d       	add	r27, r0
    34c4:	5c 9e       	mul	r5, r28
    34c6:	b0 0d       	add	r27, r0
    34c8:	11 24       	eor	r1, r1
    34ca:	4a 0f       	add	r20, r26
    34cc:	5b 1f       	adc	r21, r27
    34ce:	a0 91 15 2b 	lds	r26, 0x2B15
    34d2:	b0 91 16 2b 	lds	r27, 0x2B16
    34d6:	a4 0f       	add	r26, r20
    34d8:	b5 1f       	adc	r27, r21
    34da:	e7 70       	andi	r30, 0x07	; 7
    34dc:	f0 70       	andi	r31, 0x00	; 0
    34de:	a8 01       	movw	r20, r16
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <putalign+0x1da>
    34e2:	55 95       	asr	r21
    34e4:	47 95       	ror	r20
    34e6:	ea 95       	dec	r30
    34e8:	e2 f7       	brpl	.-8      	; 0x34e2 <putalign+0x1d6>
    34ea:	fa 01       	movw	r30, r20
    34ec:	4c 91       	ld	r20, X
    34ee:	4e 2b       	or	r20, r30
    34f0:	4c 93       	st	X, r20
static void putalign(int x, int y)
{
    int j;

    SETQRBIT(x, y);
    for (j = -2; j < 2; j++) {
    34f2:	2f 5f       	subi	r18, 0xFF	; 255
    34f4:	3f 4f       	sbci	r19, 0xFF	; 255
    34f6:	22 30       	cpi	r18, 0x02	; 2
    34f8:	31 05       	cpc	r19, r1
    34fa:	09 f0       	breq	.+2      	; 0x34fe <putalign+0x1f2>
    34fc:	7a cf       	rjmp	.-268    	; 0x33f2 <putalign+0xe6>
    34fe:	c0 e0       	ldi	r28, 0x00	; 0
    3500:	d0 e0       	ldi	r29, 0x00	; 0
        SETQRBIT(x - 2, y + j + 1);
        SETQRBIT(x + 2, y + j);
        SETQRBIT(x + j + 1, y + 2);
    }
    for (j = 0; j < 2; j++) {
        setmask(x - 1, y + j);
    3502:	e8 2e       	mov	r14, r24
    3504:	06 2f       	mov	r16, r22
    3506:	48 2e       	mov	r4, r24
    3508:	4a 94       	dec	r4
        setmask(x + 1, y - j);
    350a:	68 2e       	mov	r6, r24
    350c:	63 94       	inc	r6
        setmask(x - j, y - 1);
    350e:	86 2e       	mov	r8, r22
    3510:	8a 94       	dec	r8
        setmask(x + j, y + 1);
    3512:	a6 2e       	mov	r10, r22
    3514:	a3 94       	inc	r10
        SETQRBIT(x - 2, y + j + 1);
        SETQRBIT(x + 2, y + j);
        SETQRBIT(x + j + 1, y + 2);
    }
    for (j = 0; j < 2; j++) {
        setmask(x - 1, y + j);
    3516:	6c 2f       	mov	r22, r28
    3518:	60 0f       	add	r22, r16
    351a:	84 2d       	mov	r24, r4
    351c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x + 1, y - j);
    3520:	60 2f       	mov	r22, r16
    3522:	6c 1b       	sub	r22, r28
    3524:	86 2d       	mov	r24, r6
    3526:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x - j, y - 1);
    352a:	8e 2d       	mov	r24, r14
    352c:	8c 1b       	sub	r24, r28
    352e:	68 2d       	mov	r22, r8
    3530:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x + j, y + 1);
    3534:	8c 2f       	mov	r24, r28
    3536:	8e 0d       	add	r24, r14
    3538:	6a 2d       	mov	r22, r10
    353a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        SETQRBIT(x + j, y - 2);
        SETQRBIT(x - 2, y + j + 1);
        SETQRBIT(x + 2, y + j);
        SETQRBIT(x + j + 1, y + 2);
    }
    for (j = 0; j < 2; j++) {
    353e:	21 96       	adiw	r28, 0x01	; 1
    3540:	c2 30       	cpi	r28, 0x02	; 2
    3542:	d1 05       	cpc	r29, r1
    3544:	41 f7       	brne	.-48     	; 0x3516 <putalign+0x20a>
        setmask(x - 1, y + j);
        setmask(x + 1, y - j);
        setmask(x - j, y - 1);
        setmask(x + j, y + 1);
    }
}
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	ff 90       	pop	r15
    3550:	ef 90       	pop	r14
    3552:	df 90       	pop	r13
    3554:	cf 90       	pop	r12
    3556:	bf 90       	pop	r11
    3558:	af 90       	pop	r10
    355a:	9f 90       	pop	r9
    355c:	8f 90       	pop	r8
    355e:	7f 90       	pop	r7
    3560:	6f 90       	pop	r6
    3562:	5f 90       	pop	r5
    3564:	4f 90       	pop	r4
    3566:	3f 90       	pop	r3
    3568:	2f 90       	pop	r2
    356a:	08 95       	ret

0000356c <initframe>:
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
{
    356c:	2f 92       	push	r2
    356e:	3f 92       	push	r3
    3570:	4f 92       	push	r4
    3572:	5f 92       	push	r5
    3574:	6f 92       	push	r6
    3576:	7f 92       	push	r7
    3578:	8f 92       	push	r8
    357a:	9f 92       	push	r9
    357c:	af 92       	push	r10
    357e:	bf 92       	push	r11
    3580:	cf 92       	push	r12
    3582:	df 92       	push	r13
    3584:	ef 92       	push	r14
    3586:	ff 92       	push	r15
    3588:	0f 93       	push	r16
    358a:	1f 93       	push	r17
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	00 d0       	rcall	.+0      	; 0x3592 <initframe+0x26>
    3592:	00 d0       	rcall	.+0      	; 0x3594 <initframe+0x28>
    3594:	00 d0       	rcall	.+0      	; 0x3596 <initframe+0x2a>
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
    unsigned x, y;

    framebase = calloc(WDB * WD, 1);
    359a:	80 91 46 01 	lds	r24, 0x0146
    359e:	e8 2e       	mov	r14, r24
    35a0:	ff 24       	eor	r15, r15
    35a2:	80 91 47 01 	lds	r24, 0x0147
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	9c 01       	movw	r18, r24
    35aa:	e2 9e       	mul	r14, r18
    35ac:	c0 01       	movw	r24, r0
    35ae:	e3 9e       	mul	r14, r19
    35b0:	90 0d       	add	r25, r0
    35b2:	f2 9e       	mul	r15, r18
    35b4:	90 0d       	add	r25, r0
    35b6:	11 24       	eor	r1, r1
    35b8:	61 e0       	ldi	r22, 0x01	; 1
    35ba:	70 e0       	ldi	r23, 0x00	; 0
    35bc:	0e 94 0e 32 	call	0x641c	; 0x641c <calloc>
    35c0:	80 93 15 2b 	sts	0x2B15, r24
    35c4:	90 93 16 2b 	sts	0x2B16, r25
    framask = calloc(((WD * (WD + 1) / 2) + 7) / 8, 1);
    35c8:	87 01       	movw	r16, r14
    35ca:	0f 5f       	subi	r16, 0xFF	; 255
    35cc:	1f 4f       	sbci	r17, 0xFF	; 255
    35ce:	0e 9d       	mul	r16, r14
    35d0:	c0 01       	movw	r24, r0
    35d2:	0f 9d       	mul	r16, r15
    35d4:	90 0d       	add	r25, r0
    35d6:	1e 9d       	mul	r17, r14
    35d8:	90 0d       	add	r25, r0
    35da:	11 24       	eor	r1, r1
    35dc:	95 95       	asr	r25
    35de:	87 95       	ror	r24
    35e0:	07 96       	adiw	r24, 0x07	; 7
    35e2:	68 e0       	ldi	r22, 0x08	; 8
    35e4:	70 e0       	ldi	r23, 0x00	; 0
    35e6:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <__divmodhi4>
    35ea:	cb 01       	movw	r24, r22
    35ec:	61 e0       	ldi	r22, 0x01	; 1
    35ee:	70 e0       	ldi	r23, 0x00	; 0
    35f0:	0e 94 0e 32 	call	0x641c	; 0x641c <calloc>
    35f4:	80 93 ba 2b 	sts	0x2BBA, r24
    35f8:	90 93 bb 2b 	sts	0x2BBB, r25
    rlens = malloc(WD + 1);
    35fc:	c8 01       	movw	r24, r16
    35fe:	0e 94 32 32 	call	0x6464	; 0x6464 <malloc>
    3602:	80 93 71 04 	sts	0x0471, r24
    3606:	90 93 72 04 	sts	0x0472, r25
}

static void putfind()
{
    unsigned char j, i, k, t;
    for (t = 0; t < 3; t++) {
    360a:	99 24       	eor	r9, r9
        k = 0;
        i = 0;
        if (t == 1)
    360c:	39 2d       	mov	r19, r9
    360e:	31 30       	cpi	r19, 0x01	; 1
    3610:	29 f4       	brne	.+10     	; 0x361c <initframe+0xb0>
            k = (WD - 7);
    3612:	e0 90 46 01 	lds	r14, 0x0146
    3616:	49 ef       	ldi	r20, 0xF9	; 249
    3618:	e4 0e       	add	r14, r20
    361a:	0a c0       	rjmp	.+20     	; 0x3630 <initframe+0xc4>
        if (t == 2)
    361c:	59 2d       	mov	r21, r9
    361e:	52 30       	cpi	r21, 0x02	; 2
    3620:	31 f4       	brne	.+12     	; 0x362e <initframe+0xc2>
            i = (WD - 7);
    3622:	f0 90 46 01 	lds	r15, 0x0146
    3626:	69 ef       	ldi	r22, 0xF9	; 249
    3628:	f6 0e       	add	r15, r22

static void putfind()
{
    unsigned char j, i, k, t;
    for (t = 0; t < 3; t++) {
        k = 0;
    362a:	ee 24       	eor	r14, r14
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <initframe+0xc6>
    362e:	ee 24       	eor	r14, r14
        i = 0;
    3630:	ff 24       	eor	r15, r15
        if (t == 1)
            k = (WD - 7);
        if (t == 2)
            i = (WD - 7);
        SETQRBIT(i + 3, k + 3);
    3632:	cf 2c       	mov	r12, r15
    3634:	dd 24       	eor	r13, r13
    3636:	96 01       	movw	r18, r12
    3638:	2d 5f       	subi	r18, 0xFD	; 253
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	0e 2d       	mov	r16, r14
    363e:	10 e0       	ldi	r17, 0x00	; 0
    3640:	f3 e0       	ldi	r31, 0x03	; 3
    3642:	6f 2e       	mov	r6, r31
    3644:	71 2c       	mov	r7, r1
    3646:	60 0e       	add	r6, r16
    3648:	71 1e       	adc	r7, r17
    364a:	40 91 47 01 	lds	r20, 0x0147
    364e:	50 e0       	ldi	r21, 0x00	; 0
    3650:	64 9e       	mul	r6, r20
    3652:	c0 01       	movw	r24, r0
    3654:	65 9e       	mul	r6, r21
    3656:	90 0d       	add	r25, r0
    3658:	74 9e       	mul	r7, r20
    365a:	90 0d       	add	r25, r0
    365c:	11 24       	eor	r1, r1
    365e:	a9 01       	movw	r20, r18
    3660:	e3 e0       	ldi	r30, 0x03	; 3
    3662:	55 95       	asr	r21
    3664:	47 95       	ror	r20
    3666:	ea 95       	dec	r30
    3668:	e1 f7       	brne	.-8      	; 0x3662 <initframe+0xf6>
    366a:	84 0f       	add	r24, r20
    366c:	95 1f       	adc	r25, r21
    366e:	e0 91 15 2b 	lds	r30, 0x2B15
    3672:	f0 91 16 2b 	lds	r31, 0x2B16
    3676:	e8 0f       	add	r30, r24
    3678:	f9 1f       	adc	r31, r25
    367a:	27 70       	andi	r18, 0x07	; 7
    367c:	30 70       	andi	r19, 0x00	; 0
    367e:	80 e8       	ldi	r24, 0x80	; 128
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	02 c0       	rjmp	.+4      	; 0x3688 <initframe+0x11c>
    3684:	95 95       	asr	r25
    3686:	87 95       	ror	r24
    3688:	2a 95       	dec	r18
    368a:	e2 f7       	brpl	.-8      	; 0x3684 <initframe+0x118>
    368c:	9c 01       	movw	r18, r24
    368e:	80 81       	ld	r24, Z
    3690:	82 2b       	or	r24, r18
    3692:	80 83       	st	Z, r24
        for (j = 0; j < 6; j++) {
            SETQRBIT(i + j, k);
            SETQRBIT(i, k + j + 1);
    3694:	4f 2c       	mov	r4, r15
    3696:	46 94       	lsr	r4
    3698:	46 94       	lsr	r4
    369a:	46 94       	lsr	r4
    369c:	55 24       	eor	r5, r5
    369e:	c6 01       	movw	r24, r12
    36a0:	87 70       	andi	r24, 0x07	; 7
    36a2:	90 70       	andi	r25, 0x00	; 0
    36a4:	a0 e8       	ldi	r26, 0x80	; 128
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	02 c0       	rjmp	.+4      	; 0x36ae <initframe+0x142>
    36aa:	b5 95       	asr	r27
    36ac:	a7 95       	ror	r26
    36ae:	8a 95       	dec	r24
    36b0:	e2 f7       	brpl	.-8      	; 0x36aa <initframe+0x13e>
    36b2:	a9 83       	std	Y+1, r26	; 0x01
            SETQRBIT(i + 6, k + j);
    36b4:	c6 01       	movw	r24, r12
    36b6:	06 96       	adiw	r24, 0x06	; 6
    36b8:	fc 01       	movw	r30, r24
    36ba:	73 e0       	ldi	r23, 0x03	; 3
    36bc:	f5 95       	asr	r31
    36be:	e7 95       	ror	r30
    36c0:	7a 95       	dec	r23
    36c2:	e1 f7       	brne	.-8      	; 0x36bc <initframe+0x150>
    36c4:	fb 83       	std	Y+3, r31	; 0x03
    36c6:	ea 83       	std	Y+2, r30	; 0x02
    36c8:	87 70       	andi	r24, 0x07	; 7
    36ca:	90 70       	andi	r25, 0x00	; 0
    36cc:	20 e8       	ldi	r18, 0x80	; 128
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	02 c0       	rjmp	.+4      	; 0x36d6 <initframe+0x16a>
    36d2:	35 95       	asr	r19
    36d4:	27 95       	ror	r18
    36d6:	8a 95       	dec	r24
    36d8:	e2 f7       	brpl	.-8      	; 0x36d2 <initframe+0x166>
    36da:	82 2e       	mov	r8, r18
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    36dc:	c8 01       	movw	r24, r16
    36de:	01 96       	adiw	r24, 0x01	; 1
    36e0:	56 01       	movw	r10, r12
    36e2:	08 94       	sec
    36e4:	a1 1c       	adc	r10, r1
    36e6:	b1 1c       	adc	r11, r1
    36e8:	67 e0       	ldi	r22, 0x07	; 7
    36ea:	26 2e       	mov	r2, r22
    36ec:	31 2c       	mov	r3, r1
    36ee:	20 0e       	add	r2, r16
    36f0:	31 1e       	adc	r3, r17
        SETQRBIT(i + 3, k + 3);
        for (j = 0; j < 6; j++) {
            SETQRBIT(i + j, k);
            SETQRBIT(i, k + j + 1);
            SETQRBIT(i + 6, k + j);
            SETQRBIT(i + j + 1, k + 6);
    36f2:	a8 01       	movw	r20, r16
    36f4:	4a 5f       	subi	r20, 0xFA	; 250
    36f6:	5f 4f       	sbci	r21, 0xFF	; 255
    36f8:	5d 83       	std	Y+5, r21	; 0x05
    36fa:	4c 83       	std	Y+4, r20	; 0x04
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    36fc:	d5 01       	movw	r26, r10
    36fe:	11 97       	sbiw	r26, 0x01	; 1
            k = (WD - 7);
        if (t == 2)
            i = (WD - 7);
        SETQRBIT(i + 3, k + 3);
        for (j = 0; j < 6; j++) {
            SETQRBIT(i + j, k);
    3700:	9d 01       	movw	r18, r26
    3702:	53 e0       	ldi	r21, 0x03	; 3
    3704:	35 95       	asr	r19
    3706:	27 95       	ror	r18
    3708:	5a 95       	dec	r21
    370a:	e1 f7       	brne	.-8      	; 0x3704 <initframe+0x198>
    370c:	60 91 47 01 	lds	r22, 0x0147
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	06 9f       	mul	r16, r22
    3714:	a0 01       	movw	r20, r0
    3716:	07 9f       	mul	r16, r23
    3718:	50 0d       	add	r21, r0
    371a:	16 9f       	mul	r17, r22
    371c:	50 0d       	add	r21, r0
    371e:	11 24       	eor	r1, r1
    3720:	24 0f       	add	r18, r20
    3722:	35 1f       	adc	r19, r21
    3724:	e0 91 15 2b 	lds	r30, 0x2B15
    3728:	f0 91 16 2b 	lds	r31, 0x2B16
    372c:	e2 0f       	add	r30, r18
    372e:	f3 1f       	adc	r31, r19
    3730:	a7 70       	andi	r26, 0x07	; 7
    3732:	b0 70       	andi	r27, 0x00	; 0
    3734:	60 e8       	ldi	r22, 0x80	; 128
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	02 c0       	rjmp	.+4      	; 0x373e <initframe+0x1d2>
    373a:	75 95       	asr	r23
    373c:	67 95       	ror	r22
    373e:	aa 95       	dec	r26
    3740:	e2 f7       	brpl	.-8      	; 0x373a <initframe+0x1ce>
    3742:	20 81       	ld	r18, Z
    3744:	26 2b       	or	r18, r22
    3746:	20 83       	st	Z, r18
            SETQRBIT(i, k + j + 1);
    3748:	40 91 47 01 	lds	r20, 0x0147
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	84 9f       	mul	r24, r20
    3750:	90 01       	movw	r18, r0
    3752:	85 9f       	mul	r24, r21
    3754:	30 0d       	add	r19, r0
    3756:	94 9f       	mul	r25, r20
    3758:	30 0d       	add	r19, r0
    375a:	11 24       	eor	r1, r1
    375c:	24 0d       	add	r18, r4
    375e:	35 1d       	adc	r19, r5
    3760:	e0 91 15 2b 	lds	r30, 0x2B15
    3764:	f0 91 16 2b 	lds	r31, 0x2B16
    3768:	e2 0f       	add	r30, r18
    376a:	f3 1f       	adc	r31, r19
    376c:	20 81       	ld	r18, Z
    376e:	79 81       	ldd	r23, Y+1	; 0x01
    3770:	27 2b       	or	r18, r23
    3772:	20 83       	st	Z, r18
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    3774:	bc 01       	movw	r22, r24
    3776:	61 50       	subi	r22, 0x01	; 1
    3778:	70 40       	sbci	r23, 0x00	; 0
            i = (WD - 7);
        SETQRBIT(i + 3, k + 3);
        for (j = 0; j < 6; j++) {
            SETQRBIT(i + j, k);
            SETQRBIT(i, k + j + 1);
            SETQRBIT(i + 6, k + j);
    377a:	40 91 47 01 	lds	r20, 0x0147
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	64 9f       	mul	r22, r20
    3782:	90 01       	movw	r18, r0
    3784:	65 9f       	mul	r22, r21
    3786:	30 0d       	add	r19, r0
    3788:	74 9f       	mul	r23, r20
    378a:	30 0d       	add	r19, r0
    378c:	11 24       	eor	r1, r1
    378e:	aa 81       	ldd	r26, Y+2	; 0x02
    3790:	bb 81       	ldd	r27, Y+3	; 0x03
    3792:	2a 0f       	add	r18, r26
    3794:	3b 1f       	adc	r19, r27
    3796:	e0 91 15 2b 	lds	r30, 0x2B15
    379a:	f0 91 16 2b 	lds	r31, 0x2B16
    379e:	e2 0f       	add	r30, r18
    37a0:	f3 1f       	adc	r31, r19
    37a2:	20 81       	ld	r18, Z
    37a4:	28 29       	or	r18, r8
    37a6:	20 83       	st	Z, r18
            SETQRBIT(i + j + 1, k + 6);
    37a8:	95 01       	movw	r18, r10
    37aa:	43 e0       	ldi	r20, 0x03	; 3
    37ac:	35 95       	asr	r19
    37ae:	27 95       	ror	r18
    37b0:	4a 95       	dec	r20
    37b2:	e1 f7       	brne	.-8      	; 0x37ac <initframe+0x240>
    37b4:	60 91 47 01 	lds	r22, 0x0147
    37b8:	70 e0       	ldi	r23, 0x00	; 0
    37ba:	ec 81       	ldd	r30, Y+4	; 0x04
    37bc:	fd 81       	ldd	r31, Y+5	; 0x05
    37be:	e6 9f       	mul	r30, r22
    37c0:	a0 01       	movw	r20, r0
    37c2:	e7 9f       	mul	r30, r23
    37c4:	50 0d       	add	r21, r0
    37c6:	f6 9f       	mul	r31, r22
    37c8:	50 0d       	add	r21, r0
    37ca:	11 24       	eor	r1, r1
    37cc:	24 0f       	add	r18, r20
    37ce:	35 1f       	adc	r19, r21
    37d0:	e0 91 15 2b 	lds	r30, 0x2B15
    37d4:	f0 91 16 2b 	lds	r31, 0x2B16
    37d8:	e2 0f       	add	r30, r18
    37da:	f3 1f       	adc	r31, r19
    37dc:	95 01       	movw	r18, r10
    37de:	27 70       	andi	r18, 0x07	; 7
    37e0:	30 70       	andi	r19, 0x00	; 0
    37e2:	40 e8       	ldi	r20, 0x80	; 128
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	02 c0       	rjmp	.+4      	; 0x37ec <initframe+0x280>
    37e8:	55 95       	asr	r21
    37ea:	47 95       	ror	r20
    37ec:	2a 95       	dec	r18
    37ee:	e2 f7       	brpl	.-8      	; 0x37e8 <initframe+0x27c>
    37f0:	9a 01       	movw	r18, r20
    37f2:	40 81       	ld	r20, Z
    37f4:	42 2b       	or	r20, r18
    37f6:	40 83       	st	Z, r20
    37f8:	01 96       	adiw	r24, 0x01	; 1
    37fa:	08 94       	sec
    37fc:	a1 1c       	adc	r10, r1
    37fe:	b1 1c       	adc	r11, r1
        if (t == 1)
            k = (WD - 7);
        if (t == 2)
            i = (WD - 7);
        SETQRBIT(i + 3, k + 3);
        for (j = 0; j < 6; j++) {
    3800:	82 15       	cp	r24, r2
    3802:	93 05       	cpc	r25, r3
    3804:	09 f0       	breq	.+2      	; 0x3808 <initframe+0x29c>
    3806:	7a cf       	rjmp	.-268    	; 0x36fc <initframe+0x190>
    3808:	bb 24       	eor	r11, r11
    380a:	b3 94       	inc	r11
            SETQRBIT(i, k + j + 1);
            SETQRBIT(i + 6, k + j);
            SETQRBIT(i + j + 1, k + 6);
        }
        for (j = 1; j < 5; j++) {
            setmask(i + j, k + 1);
    380c:	8e 2c       	mov	r8, r14
    380e:	83 94       	inc	r8
            setmask(i + 1, k + j + 1);
    3810:	af 2c       	mov	r10, r15
    3812:	a3 94       	inc	r10
            setmask(i + 5, k + j);
    3814:	85 e0       	ldi	r24, 0x05	; 5
    3816:	28 2e       	mov	r2, r24
    3818:	2f 0c       	add	r2, r15
            setmask(i + j + 1, k + 5);
    381a:	b5 e0       	ldi	r27, 0x05	; 5
    381c:	4b 2e       	mov	r4, r27
    381e:	4e 0c       	add	r4, r14
            SETQRBIT(i, k + j + 1);
            SETQRBIT(i + 6, k + j);
            SETQRBIT(i + j + 1, k + 6);
        }
        for (j = 1; j < 5; j++) {
            setmask(i + j, k + 1);
    3820:	8b 2d       	mov	r24, r11
    3822:	8f 0d       	add	r24, r15
    3824:	68 2d       	mov	r22, r8
    3826:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
            setmask(i + 1, k + j + 1);
    382a:	68 2d       	mov	r22, r8
    382c:	6b 0d       	add	r22, r11
    382e:	8a 2d       	mov	r24, r10
    3830:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
            setmask(i + 5, k + j);
    3834:	6b 2d       	mov	r22, r11
    3836:	6e 0d       	add	r22, r14
    3838:	82 2d       	mov	r24, r2
    383a:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
            setmask(i + j + 1, k + 5);
    383e:	8a 2d       	mov	r24, r10
    3840:	8b 0d       	add	r24, r11
    3842:	64 2d       	mov	r22, r4
    3844:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
            SETQRBIT(i + j, k);
            SETQRBIT(i, k + j + 1);
            SETQRBIT(i + 6, k + j);
            SETQRBIT(i + j + 1, k + 6);
        }
        for (j = 1; j < 5; j++) {
    3848:	b3 94       	inc	r11
    384a:	5b 2d       	mov	r21, r11
    384c:	55 30       	cpi	r21, 0x05	; 5
    384e:	41 f7       	brne	.-48     	; 0x3820 <initframe+0x2b4>
            setmask(i + 5, k + j);
            setmask(i + j + 1, k + 5);
        }
        for (j = 2; j < 4; j++) {
            SETQRBIT(i + j, k + 2);
            SETQRBIT(i + 2, k + j + 1);
    3850:	c6 01       	movw	r24, r12
    3852:	02 96       	adiw	r24, 0x02	; 2
    3854:	2c 01       	movw	r4, r24
    3856:	a3 e0       	ldi	r26, 0x03	; 3
    3858:	55 94       	asr	r5
    385a:	47 94       	ror	r4
    385c:	aa 95       	dec	r26
    385e:	e1 f7       	brne	.-8      	; 0x3858 <initframe+0x2ec>
    3860:	9c 01       	movw	r18, r24
    3862:	27 70       	andi	r18, 0x07	; 7
    3864:	30 70       	andi	r19, 0x00	; 0
    3866:	60 e8       	ldi	r22, 0x80	; 128
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <initframe+0x304>
    386c:	75 95       	asr	r23
    386e:	67 95       	ror	r22
    3870:	2a 95       	dec	r18
    3872:	e2 f7       	brpl	.-8      	; 0x386c <initframe+0x300>
    3874:	86 2e       	mov	r8, r22
            SETQRBIT(i + 4, k + j);
    3876:	a4 e0       	ldi	r26, 0x04	; 4
    3878:	b0 e0       	ldi	r27, 0x00	; 0
    387a:	ca 0e       	add	r12, r26
    387c:	db 1e       	adc	r13, r27
    387e:	56 01       	movw	r10, r12
    3880:	f3 e0       	ldi	r31, 0x03	; 3
    3882:	b5 94       	asr	r11
    3884:	a7 94       	ror	r10
    3886:	fa 95       	dec	r31
    3888:	e1 f7       	brne	.-8      	; 0x3882 <initframe+0x316>
    388a:	b7 e0       	ldi	r27, 0x07	; 7
    388c:	cb 22       	and	r12, r27
    388e:	dd 24       	eor	r13, r13
    3890:	e0 e8       	ldi	r30, 0x80	; 128
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	02 c0       	rjmp	.+4      	; 0x389a <initframe+0x32e>
    3896:	f5 95       	asr	r31
    3898:	e7 95       	ror	r30
    389a:	ca 94       	dec	r12
    389c:	e2 f7       	brpl	.-8      	; 0x3896 <initframe+0x32a>
    389e:	6f 01       	movw	r12, r30
    38a0:	93 01       	movw	r18, r6
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    38a2:	4f 2d       	mov	r20, r15
    38a4:	50 e0       	ldi	r21, 0x00	; 0
    38a6:	4c 5f       	subi	r20, 0xFC	; 252
    38a8:	5f 4f       	sbci	r21, 0xFF	; 255
            setmask(i + 1, k + j + 1);
            setmask(i + 5, k + j);
            setmask(i + j + 1, k + 5);
        }
        for (j = 2; j < 4; j++) {
            SETQRBIT(i + j, k + 2);
    38aa:	e2 e0       	ldi	r30, 0x02	; 2
    38ac:	ee 2e       	mov	r14, r30
    38ae:	f1 2c       	mov	r15, r1
    38b0:	e0 0e       	add	r14, r16
    38b2:	f1 1e       	adc	r15, r17
            SETQRBIT(i + 2, k + j + 1);
            SETQRBIT(i + 4, k + j);
            SETQRBIT(i + j + 1, k + 4);
    38b4:	0c 5f       	subi	r16, 0xFC	; 252
    38b6:	1f 4f       	sbci	r17, 0xFF	; 255
    38b8:	da 01       	movw	r26, r20
            setmask(i + 1, k + j + 1);
            setmask(i + 5, k + j);
            setmask(i + j + 1, k + 5);
        }
        for (j = 2; j < 4; j++) {
            SETQRBIT(i + j, k + 2);
    38ba:	ac 01       	movw	r20, r24
    38bc:	73 e0       	ldi	r23, 0x03	; 3
    38be:	55 95       	asr	r21
    38c0:	47 95       	ror	r20
    38c2:	7a 95       	dec	r23
    38c4:	e1 f7       	brne	.-8      	; 0x38be <initframe+0x352>
    38c6:	e0 91 47 01 	lds	r30, 0x0147
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	ee 9e       	mul	r14, r30
    38ce:	b0 01       	movw	r22, r0
    38d0:	ef 9e       	mul	r14, r31
    38d2:	70 0d       	add	r23, r0
    38d4:	fe 9e       	mul	r15, r30
    38d6:	70 0d       	add	r23, r0
    38d8:	11 24       	eor	r1, r1
    38da:	46 0f       	add	r20, r22
    38dc:	57 1f       	adc	r21, r23
    38de:	e0 91 15 2b 	lds	r30, 0x2B15
    38e2:	f0 91 16 2b 	lds	r31, 0x2B16
    38e6:	e4 0f       	add	r30, r20
    38e8:	f5 1f       	adc	r31, r21
    38ea:	ac 01       	movw	r20, r24
    38ec:	47 70       	andi	r20, 0x07	; 7
    38ee:	50 70       	andi	r21, 0x00	; 0
    38f0:	60 e8       	ldi	r22, 0x80	; 128
    38f2:	70 e0       	ldi	r23, 0x00	; 0
    38f4:	02 c0       	rjmp	.+4      	; 0x38fa <initframe+0x38e>
    38f6:	75 95       	asr	r23
    38f8:	67 95       	ror	r22
    38fa:	4a 95       	dec	r20
    38fc:	e2 f7       	brpl	.-8      	; 0x38f6 <initframe+0x38a>
    38fe:	ab 01       	movw	r20, r22
    3900:	60 81       	ld	r22, Z
    3902:	64 2b       	or	r22, r20
    3904:	60 83       	st	Z, r22
            SETQRBIT(i + 2, k + j + 1);
    3906:	60 91 47 01 	lds	r22, 0x0147
    390a:	70 e0       	ldi	r23, 0x00	; 0
    390c:	26 9f       	mul	r18, r22
    390e:	a0 01       	movw	r20, r0
    3910:	27 9f       	mul	r18, r23
    3912:	50 0d       	add	r21, r0
    3914:	36 9f       	mul	r19, r22
    3916:	50 0d       	add	r21, r0
    3918:	11 24       	eor	r1, r1
    391a:	44 0d       	add	r20, r4
    391c:	55 1d       	adc	r21, r5
    391e:	e0 91 15 2b 	lds	r30, 0x2B15
    3922:	f0 91 16 2b 	lds	r31, 0x2B16
    3926:	e4 0f       	add	r30, r20
    3928:	f5 1f       	adc	r31, r21
    392a:	40 81       	ld	r20, Z
    392c:	48 29       	or	r20, r8
    392e:	40 83       	st	Z, r20
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    3930:	f9 01       	movw	r30, r18
    3932:	31 97       	sbiw	r30, 0x01	; 1
            setmask(i + j + 1, k + 5);
        }
        for (j = 2; j < 4; j++) {
            SETQRBIT(i + j, k + 2);
            SETQRBIT(i + 2, k + j + 1);
            SETQRBIT(i + 4, k + j);
    3934:	60 91 47 01 	lds	r22, 0x0147
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	e6 9f       	mul	r30, r22
    393c:	a0 01       	movw	r20, r0
    393e:	e7 9f       	mul	r30, r23
    3940:	50 0d       	add	r21, r0
    3942:	f6 9f       	mul	r31, r22
    3944:	50 0d       	add	r21, r0
    3946:	11 24       	eor	r1, r1
    3948:	4a 0d       	add	r20, r10
    394a:	5b 1d       	adc	r21, r11
    394c:	e0 91 15 2b 	lds	r30, 0x2B15
    3950:	f0 91 16 2b 	lds	r31, 0x2B16
    3954:	e4 0f       	add	r30, r20
    3956:	f5 1f       	adc	r31, r21
    3958:	40 81       	ld	r20, Z
    395a:	4c 29       	or	r20, r12
    395c:	40 83       	st	Z, r20
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    395e:	01 96       	adiw	r24, 0x01	; 1
        }
        for (j = 2; j < 4; j++) {
            SETQRBIT(i + j, k + 2);
            SETQRBIT(i + 2, k + j + 1);
            SETQRBIT(i + 4, k + j);
            SETQRBIT(i + j + 1, k + 4);
    3960:	ac 01       	movw	r20, r24
    3962:	63 e0       	ldi	r22, 0x03	; 3
    3964:	55 95       	asr	r21
    3966:	47 95       	ror	r20
    3968:	6a 95       	dec	r22
    396a:	e1 f7       	brne	.-8      	; 0x3964 <initframe+0x3f8>
    396c:	e0 91 47 01 	lds	r30, 0x0147
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	0e 9f       	mul	r16, r30
    3974:	b0 01       	movw	r22, r0
    3976:	0f 9f       	mul	r16, r31
    3978:	70 0d       	add	r23, r0
    397a:	1e 9f       	mul	r17, r30
    397c:	70 0d       	add	r23, r0
    397e:	11 24       	eor	r1, r1
    3980:	46 0f       	add	r20, r22
    3982:	57 1f       	adc	r21, r23
    3984:	e0 91 15 2b 	lds	r30, 0x2B15
    3988:	f0 91 16 2b 	lds	r31, 0x2B16
    398c:	e4 0f       	add	r30, r20
    398e:	f5 1f       	adc	r31, r21
    3990:	ac 01       	movw	r20, r24
    3992:	47 70       	andi	r20, 0x07	; 7
    3994:	50 70       	andi	r21, 0x00	; 0
    3996:	60 e8       	ldi	r22, 0x80	; 128
    3998:	70 e0       	ldi	r23, 0x00	; 0
    399a:	02 c0       	rjmp	.+4      	; 0x39a0 <initframe+0x434>
    399c:	75 95       	asr	r23
    399e:	67 95       	ror	r22
    39a0:	4a 95       	dec	r20
    39a2:	e2 f7       	brpl	.-8      	; 0x399c <initframe+0x430>
    39a4:	ab 01       	movw	r20, r22
    39a6:	60 81       	ld	r22, Z
    39a8:	64 2b       	or	r22, r20
    39aa:	60 83       	st	Z, r22
    39ac:	2f 5f       	subi	r18, 0xFF	; 255
    39ae:	3f 4f       	sbci	r19, 0xFF	; 255
            setmask(i + j, k + 1);
            setmask(i + 1, k + j + 1);
            setmask(i + 5, k + j);
            setmask(i + j + 1, k + 5);
        }
        for (j = 2; j < 4; j++) {
    39b0:	8a 17       	cp	r24, r26
    39b2:	9b 07       	cpc	r25, r27
    39b4:	09 f0       	breq	.+2      	; 0x39b8 <initframe+0x44c>
    39b6:	81 cf       	rjmp	.-254    	; 0x38ba <initframe+0x34e>
}

static void putfind()
{
    unsigned char j, i, k, t;
    for (t = 0; t < 3; t++) {
    39b8:	93 94       	inc	r9
    39ba:	79 2d       	mov	r23, r9
    39bc:	73 30       	cpi	r23, 0x03	; 3
    39be:	09 f0       	breq	.+2      	; 0x39c2 <initframe+0x456>
    39c0:	25 ce       	rjmp	.-950    	; 0x360c <initframe+0xa0>
};

static void doaligns(void)
{
    unsigned char delta, x, y;
    if (VERSION < 2)
    39c2:	e0 91 44 01 	lds	r30, 0x0144
    39c6:	e2 30       	cpi	r30, 0x02	; 2
    39c8:	c0 f1       	brcs	.+112    	; 0x3a3a <initframe+0x4ce>
        return;
    delta = __LPM(&adelta[VERSION]);
    39ca:	f0 e0       	ldi	r31, 0x00	; 0
    39cc:	e8 59       	subi	r30, 0x98	; 152
    39ce:	f7 4d       	sbci	r31, 0xD7	; 215
    39d0:	e4 90       	lpm	r14, Z+
    y = WD - 7;
    39d2:	f0 90 46 01 	lds	r15, 0x0146
    39d6:	89 ef       	ldi	r24, 0xF9	; 249
    39d8:	f8 0e       	add	r15, r24
    for (;;) {
        x = WD - 7;
        while (x > delta - 3U) {
    39da:	0e 2d       	mov	r16, r14
    39dc:	10 e0       	ldi	r17, 0x00	; 0
    39de:	c8 01       	movw	r24, r16
    39e0:	03 97       	sbiw	r24, 0x03	; 3
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    39e2:	de 2c       	mov	r13, r14
    39e4:	d1 94       	neg	r13
            putalign(x, y);
            if (x < delta)
                break;
            x -= delta;
        }
        if (y <= delta + 9U)
    39e6:	07 5f       	subi	r16, 0xF7	; 247
    39e8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ea:	5c 01       	movw	r10, r24
    if (VERSION < 2)
        return;
    delta = __LPM(&adelta[VERSION]);
    y = WD - 7;
    for (;;) {
        x = WD - 7;
    39ec:	40 91 46 01 	lds	r20, 0x0146
    39f0:	47 50       	subi	r20, 0x07	; 7
    39f2:	0b c0       	rjmp	.+22     	; 0x3a0a <initframe+0x49e>
        while (x > delta - 3U) {
            putalign(x, y);
    39f4:	84 2f       	mov	r24, r20
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	6f 2d       	mov	r22, r15
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	4e 83       	std	Y+6, r20	; 0x06
    39fe:	0e 94 86 19 	call	0x330c	; 0x330c <putalign>
            if (x < delta)
    3a02:	4e 81       	ldd	r20, Y+6	; 0x06
    3a04:	4e 15       	cp	r20, r14
    3a06:	30 f0       	brcs	.+12     	; 0x3a14 <initframe+0x4a8>
    3a08:	4d 0d       	add	r20, r13
        return;
    delta = __LPM(&adelta[VERSION]);
    y = WD - 7;
    for (;;) {
        x = WD - 7;
        while (x > delta - 3U) {
    3a0a:	24 2f       	mov	r18, r20
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	a2 16       	cp	r10, r18
    3a10:	b3 06       	cpc	r11, r19
    3a12:	80 f3       	brcs	.-32     	; 0x39f4 <initframe+0x488>
            putalign(x, y);
            if (x < delta)
                break;
            x -= delta;
        }
        if (y <= delta + 9U)
    3a14:	2f 2d       	mov	r18, r15
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	02 17       	cp	r16, r18
    3a1a:	13 07       	cpc	r17, r19
    3a1c:	70 f4       	brcc	.+28     	; 0x3a3a <initframe+0x4ce>
    3a1e:	fd 0c       	add	r15, r13
            break;
        y -= delta;
        putalign(6, y);
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	6f 2d       	mov	r22, r15
    3a26:	70 e0       	ldi	r23, 0x00	; 0
    3a28:	0e 94 86 19 	call	0x330c	; 0x330c <putalign>
        putalign(y, 6);
    3a2c:	8f 2d       	mov	r24, r15
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	66 e0       	ldi	r22, 0x06	; 6
    3a32:	70 e0       	ldi	r23, 0x00	; 0
    3a34:	0e 94 86 19 	call	0x330c	; 0x330c <putalign>
    3a38:	d9 cf       	rjmp	.-78     	; 0x39ec <initframe+0x480>
    // finders
    putfind();
    // alignment blocks
    doaligns();
    // single black
    SETQRBIT(8, WD - 8);
    3a3a:	20 91 46 01 	lds	r18, 0x0146
    3a3e:	30 e0       	ldi	r19, 0x00	; 0
    3a40:	28 50       	subi	r18, 0x08	; 8
    3a42:	30 40       	sbci	r19, 0x00	; 0
    3a44:	40 91 47 01 	lds	r20, 0x0147
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	24 9f       	mul	r18, r20
    3a4c:	c0 01       	movw	r24, r0
    3a4e:	25 9f       	mul	r18, r21
    3a50:	90 0d       	add	r25, r0
    3a52:	34 9f       	mul	r19, r20
    3a54:	90 0d       	add	r25, r0
    3a56:	11 24       	eor	r1, r1
    3a58:	01 96       	adiw	r24, 0x01	; 1
    3a5a:	e0 91 15 2b 	lds	r30, 0x2B15
    3a5e:	f0 91 16 2b 	lds	r31, 0x2B16
    3a62:	e8 0f       	add	r30, r24
    3a64:	f9 1f       	adc	r31, r25
    3a66:	80 81       	ld	r24, Z
    3a68:	80 68       	ori	r24, 0x80	; 128
    3a6a:	80 83       	st	Z, r24
    // timing gap - masks only
    for (y = 0; y < 7; y++) {
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	7c 01       	movw	r14, r24
        setmask(7, y);
    3a72:	87 e0       	ldi	r24, 0x07	; 7
    3a74:	6e 2d       	mov	r22, r14
    3a76:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(WD - 8, y);
    3a7a:	80 91 46 01 	lds	r24, 0x0146
    3a7e:	88 50       	subi	r24, 0x08	; 8
    3a80:	6e 2d       	mov	r22, r14
    3a82:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(7, y + WD - 7);
    3a86:	60 91 46 01 	lds	r22, 0x0146
    3a8a:	67 50       	subi	r22, 0x07	; 7
    3a8c:	6e 0d       	add	r22, r14
    3a8e:	87 e0       	ldi	r24, 0x07	; 7
    3a90:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
    // alignment blocks
    doaligns();
    // single black
    SETQRBIT(8, WD - 8);
    // timing gap - masks only
    for (y = 0; y < 7; y++) {
    3a94:	08 94       	sec
    3a96:	e1 1c       	adc	r14, r1
    3a98:	f1 1c       	adc	r15, r1
    3a9a:	97 e0       	ldi	r25, 0x07	; 7
    3a9c:	e9 16       	cp	r14, r25
    3a9e:	f1 04       	cpc	r15, r1
    3aa0:	41 f7       	brne	.-48     	; 0x3a72 <initframe+0x506>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	7c 01       	movw	r14, r24
        setmask(7, y);
        setmask(WD - 8, y);
        setmask(7, y + WD - 7);
    }
    for (x = 0; x < 8; x++) {
        setmask(x, 7);
    3aa8:	8e 2d       	mov	r24, r14
    3aaa:	67 e0       	ldi	r22, 0x07	; 7
    3aac:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x + WD - 8, 7);
    3ab0:	80 91 46 01 	lds	r24, 0x0146
    3ab4:	88 50       	subi	r24, 0x08	; 8
    3ab6:	8e 0d       	add	r24, r14
    3ab8:	67 e0       	ldi	r22, 0x07	; 7
    3aba:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x, WD - 8);
    3abe:	60 91 46 01 	lds	r22, 0x0146
    3ac2:	68 50       	subi	r22, 0x08	; 8
    3ac4:	8e 2d       	mov	r24, r14
    3ac6:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
    for (y = 0; y < 7; y++) {
        setmask(7, y);
        setmask(WD - 8, y);
        setmask(7, y + WD - 7);
    }
    for (x = 0; x < 8; x++) {
    3aca:	08 94       	sec
    3acc:	e1 1c       	adc	r14, r1
    3ace:	f1 1c       	adc	r15, r1
    3ad0:	a8 e0       	ldi	r26, 0x08	; 8
    3ad2:	ea 16       	cp	r14, r26
    3ad4:	f1 04       	cpc	r15, r1
    3ad6:	41 f7       	brne	.-48     	; 0x3aa8 <initframe+0x53c>
    3ad8:	00 e0       	ldi	r16, 0x00	; 0
    3ada:	10 e0       	ldi	r17, 0x00	; 0
        setmask(x + WD - 8, 7);
        setmask(x, WD - 8);
    }
    // reserve mask-format area
    for (x = 0; x < 9; x++)
        setmask(x, 8);
    3adc:	80 2f       	mov	r24, r16
    3ade:	68 e0       	ldi	r22, 0x08	; 8
    3ae0:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x, 7);
        setmask(x + WD - 8, 7);
        setmask(x, WD - 8);
    }
    // reserve mask-format area
    for (x = 0; x < 9; x++)
    3ae4:	0f 5f       	subi	r16, 0xFF	; 255
    3ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae8:	09 30       	cpi	r16, 0x09	; 9
    3aea:	11 05       	cpc	r17, r1
    3aec:	b9 f7       	brne	.-18     	; 0x3adc <initframe+0x570>
    3aee:	00 e0       	ldi	r16, 0x00	; 0
    3af0:	10 e0       	ldi	r17, 0x00	; 0
        setmask(x, 8);
    for (x = 0; x < 8; x++) {
        setmask(x + WD - 8, 8);
    3af2:	80 91 46 01 	lds	r24, 0x0146
    3af6:	88 50       	subi	r24, 0x08	; 8
    3af8:	80 0f       	add	r24, r16
    3afa:	68 e0       	ldi	r22, 0x08	; 8
    3afc:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(8, x);
    3b00:	88 e0       	ldi	r24, 0x08	; 8
    3b02:	60 2f       	mov	r22, r16
    3b04:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x, WD - 8);
    }
    // reserve mask-format area
    for (x = 0; x < 9; x++)
        setmask(x, 8);
    for (x = 0; x < 8; x++) {
    3b08:	0f 5f       	subi	r16, 0xFF	; 255
    3b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0c:	08 30       	cpi	r16, 0x08	; 8
    3b0e:	11 05       	cpc	r17, r1
    3b10:	81 f7       	brne	.-32     	; 0x3af2 <initframe+0x586>
    3b12:	00 e0       	ldi	r16, 0x00	; 0
    3b14:	10 e0       	ldi	r17, 0x00	; 0
        setmask(x + WD - 8, 8);
        setmask(8, x);
    }
    for (y = 0; y < 7; y++)
        setmask(8, y + WD - 7);
    3b16:	60 91 46 01 	lds	r22, 0x0146
    3b1a:	67 50       	subi	r22, 0x07	; 7
    3b1c:	60 0f       	add	r22, r16
    3b1e:	88 e0       	ldi	r24, 0x08	; 8
    3b20:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        setmask(x, 8);
    for (x = 0; x < 8; x++) {
        setmask(x + WD - 8, 8);
        setmask(8, x);
    }
    for (y = 0; y < 7; y++)
    3b24:	0f 5f       	subi	r16, 0xFF	; 255
    3b26:	1f 4f       	sbci	r17, 0xFF	; 255
    3b28:	07 30       	cpi	r16, 0x07	; 7
    3b2a:	11 05       	cpc	r17, r1
    3b2c:	a1 f7       	brne	.-24     	; 0x3b16 <initframe+0x5aa>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    for (x = 0; x < WD - 14; x++)
        if (x & 1) {
            setmask(8 + x, 6);
            setmask(6, 8 + x);
        } else {
            SETQRBIT(8 + x, 6);
    3b32:	46 e0       	ldi	r20, 0x06	; 6
    3b34:	00 e8       	ldi	r16, 0x80	; 128
    3b36:	10 e0       	ldi	r17, 0x00	; 0
    3b38:	6c 01       	movw	r12, r24
    3b3a:	47 c0       	rjmp	.+142    	; 0x3bca <initframe+0x65e>
    }
    for (y = 0; y < 7; y++)
        setmask(8, y + WD - 7);
    // timing
    for (x = 0; x < WD - 14; x++)
        if (x & 1) {
    3b3c:	c0 fe       	sbrs	r12, 0
    3b3e:	0e c0       	rjmp	.+28     	; 0x3b5c <initframe+0x5f0>
    3b40:	f8 e0       	ldi	r31, 0x08	; 8
    3b42:	ff 2e       	mov	r15, r31
    3b44:	fc 0c       	add	r15, r12
            setmask(8 + x, 6);
    3b46:	8f 2d       	mov	r24, r15
    3b48:	66 e0       	ldi	r22, 0x06	; 6
    3b4a:	4e 83       	std	Y+6, r20	; 0x06
    3b4c:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
            setmask(6, 8 + x);
    3b50:	86 e0       	ldi	r24, 0x06	; 6
    3b52:	6f 2d       	mov	r22, r15
    3b54:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
    3b58:	4e 81       	ldd	r20, Y+6	; 0x06
    3b5a:	34 c0       	rjmp	.+104    	; 0x3bc4 <initframe+0x658>
    3b5c:	c6 01       	movw	r24, r12
    3b5e:	08 96       	adiw	r24, 0x08	; 8
        } else {
            SETQRBIT(8 + x, 6);
    3b60:	9c 01       	movw	r18, r24
    3b62:	e3 e0       	ldi	r30, 0x03	; 3
    3b64:	36 95       	lsr	r19
    3b66:	27 95       	ror	r18
    3b68:	ea 95       	dec	r30
    3b6a:	e1 f7       	brne	.-8      	; 0x3b64 <initframe+0x5f8>
    3b6c:	60 91 47 01 	lds	r22, 0x0147
    3b70:	64 9f       	mul	r22, r20
    3b72:	b0 01       	movw	r22, r0
    3b74:	11 24       	eor	r1, r1
    3b76:	26 0f       	add	r18, r22
    3b78:	37 1f       	adc	r19, r23
    3b7a:	e0 91 15 2b 	lds	r30, 0x2B15
    3b7e:	f0 91 16 2b 	lds	r31, 0x2B16
    3b82:	e2 0f       	add	r30, r18
    3b84:	f3 1f       	adc	r31, r19
    3b86:	9c 01       	movw	r18, r24
    3b88:	27 70       	andi	r18, 0x07	; 7
    3b8a:	30 70       	andi	r19, 0x00	; 0
    3b8c:	b8 01       	movw	r22, r16
    3b8e:	02 c0       	rjmp	.+4      	; 0x3b94 <initframe+0x628>
    3b90:	75 95       	asr	r23
    3b92:	67 95       	ror	r22
    3b94:	2a 95       	dec	r18
    3b96:	e2 f7       	brpl	.-8      	; 0x3b90 <initframe+0x624>
    3b98:	50 81       	ld	r21, Z
    3b9a:	56 2b       	or	r21, r22
    3b9c:	50 83       	st	Z, r21
            SETQRBIT(6, 8 + x);
    3b9e:	60 91 47 01 	lds	r22, 0x0147
    3ba2:	70 e0       	ldi	r23, 0x00	; 0
    3ba4:	86 9f       	mul	r24, r22
    3ba6:	90 01       	movw	r18, r0
    3ba8:	87 9f       	mul	r24, r23
    3baa:	30 0d       	add	r19, r0
    3bac:	96 9f       	mul	r25, r22
    3bae:	30 0d       	add	r19, r0
    3bb0:	11 24       	eor	r1, r1
    3bb2:	e0 91 15 2b 	lds	r30, 0x2B15
    3bb6:	f0 91 16 2b 	lds	r31, 0x2B16
    3bba:	e2 0f       	add	r30, r18
    3bbc:	f3 1f       	adc	r31, r19
    3bbe:	80 81       	ld	r24, Z
    3bc0:	82 60       	ori	r24, 0x02	; 2
    3bc2:	80 83       	st	Z, r24
        setmask(8, x);
    }
    for (y = 0; y < 7; y++)
        setmask(8, y + WD - 7);
    // timing
    for (x = 0; x < WD - 14; x++)
    3bc4:	08 94       	sec
    3bc6:	c1 1c       	adc	r12, r1
    3bc8:	d1 1c       	adc	r13, r1
    3bca:	80 91 46 01 	lds	r24, 0x0146
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	0e 97       	sbiw	r24, 0x0e	; 14
    3bd2:	c8 16       	cp	r12, r24
    3bd4:	d9 06       	cpc	r13, r25
    3bd6:	08 f4       	brcc	.+2      	; 0x3bda <initframe+0x66e>
    3bd8:	b1 cf       	rjmp	.-158    	; 0x3b3c <initframe+0x5d0>
    0x541, 0xc69
};

static void putvpat(void)
{
    unsigned char vers = VERSION;
    3bda:	80 91 44 01 	lds	r24, 0x0144
    unsigned char x, y, bc;
    unsigned verinfo;
    if (vers < 7)
    3bde:	87 30       	cpi	r24, 0x07	; 7
    3be0:	08 f4       	brcc	.+2      	; 0x3be4 <initframe+0x678>
    3be2:	9b c0       	rjmp	.+310    	; 0x3d1a <initframe+0x7ae>
        return;
    verinfo = pgm_read_word(&vpat[vers - 7]);
    3be4:	68 2e       	mov	r6, r24
    3be6:	77 24       	eor	r7, r7
    3be8:	f3 01       	movw	r30, r6
    3bea:	ee 0f       	add	r30, r30
    3bec:	ff 1f       	adc	r31, r31
    3bee:	ed 57       	subi	r30, 0x7D	; 125
    3bf0:	f7 4d       	sbci	r31, 0xD7	; 215
    3bf2:	85 90       	lpm	r8, Z+
    3bf4:	94 90       	lpm	r9, Z+
    3bf6:	85 e0       	ldi	r24, 0x05	; 5
    3bf8:	90 e0       	ldi	r25, 0x00	; 0

    bc = 17;
    3bfa:	61 e1       	ldi	r22, 0x11	; 17
    3bfc:	c6 2e       	mov	r12, r22
    for (x = 0; x < 6; x++)
        for (y = 0; y < 3; y++, bc--)
            if (1 & (bc > 11 ? vers >> (bc - 12) : verinfo >> bc)) {
                SETQRBIT(5 - x, 2 - y + WD - 11);
    3bfe:	50 e8       	ldi	r21, 0x80	; 128
    3c00:	a5 2e       	mov	r10, r21
    3c02:	b1 2c       	mov	r11, r1
    3c04:	2c 01       	movw	r4, r24
    3c06:	79 c0       	rjmp	.+242    	; 0x3cfa <initframe+0x78e>
    verinfo = pgm_read_word(&vpat[vers - 7]);

    bc = 17;
    for (x = 0; x < 6; x++)
        for (y = 0; y < 3; y++, bc--)
            if (1 & (bc > 11 ? vers >> (bc - 12) : verinfo >> bc)) {
    3c08:	1c 30       	cpi	r17, 0x0C	; 12
    3c0a:	58 f0       	brcs	.+22     	; 0x3c22 <initframe+0x6b6>
    3c0c:	81 2f       	mov	r24, r17
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	0c 97       	sbiw	r24, 0x0c	; 12
    3c12:	d3 01       	movw	r26, r6
    3c14:	02 c0       	rjmp	.+4      	; 0x3c1a <initframe+0x6ae>
    3c16:	b5 95       	asr	r27
    3c18:	a7 95       	ror	r26
    3c1a:	8a 95       	dec	r24
    3c1c:	e2 f7       	brpl	.-8      	; 0x3c16 <initframe+0x6aa>
    3c1e:	cd 01       	movw	r24, r26
    3c20:	07 c0       	rjmp	.+14     	; 0x3c30 <initframe+0x6c4>
    3c22:	c4 01       	movw	r24, r8
    3c24:	01 2e       	mov	r0, r17
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <initframe+0x6c0>
    3c28:	96 95       	lsr	r25
    3c2a:	87 95       	ror	r24
    3c2c:	0a 94       	dec	r0
    3c2e:	e2 f7       	brpl	.-8      	; 0x3c28 <initframe+0x6bc>
    3c30:	81 70       	andi	r24, 0x01	; 1
    3c32:	60 91 46 01 	lds	r22, 0x0146
    3c36:	88 23       	and	r24, r24
    3c38:	09 f4       	brne	.+2      	; 0x3c3c <initframe+0x6d0>
    3c3a:	43 c0       	rjmp	.+134    	; 0x3cc2 <initframe+0x756>
                SETQRBIT(5 - x, 2 - y + WD - 11);
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	6b 50       	subi	r22, 0x0B	; 11
    3c40:	70 40       	sbci	r23, 0x00	; 0
    3c42:	6e 0d       	add	r22, r14
    3c44:	7f 1d       	adc	r23, r15
    3c46:	80 91 47 01 	lds	r24, 0x0147
    3c4a:	90 e0       	ldi	r25, 0x00	; 0
    3c4c:	68 9f       	mul	r22, r24
    3c4e:	90 01       	movw	r18, r0
    3c50:	69 9f       	mul	r22, r25
    3c52:	30 0d       	add	r19, r0
    3c54:	78 9f       	mul	r23, r24
    3c56:	30 0d       	add	r19, r0
    3c58:	11 24       	eor	r1, r1
    3c5a:	e0 91 15 2b 	lds	r30, 0x2B15
    3c5e:	f0 91 16 2b 	lds	r31, 0x2B16
    3c62:	e2 0f       	add	r30, r18
    3c64:	f3 1f       	adc	r31, r19
    3c66:	80 81       	ld	r24, Z
    3c68:	8d 29       	or	r24, r13
    3c6a:	80 83       	st	Z, r24
                SETQRBIT(2 - y + WD - 11, 5 - x);
    3c6c:	80 91 46 01 	lds	r24, 0x0146
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	0b 97       	sbiw	r24, 0x0b	; 11
    3c74:	8e 0d       	add	r24, r14
    3c76:	9f 1d       	adc	r25, r15
    3c78:	9c 01       	movw	r18, r24
    3c7a:	43 e0       	ldi	r20, 0x03	; 3
    3c7c:	35 95       	asr	r19
    3c7e:	27 95       	ror	r18
    3c80:	4a 95       	dec	r20
    3c82:	e1 f7       	brne	.-8      	; 0x3c7c <initframe+0x710>
    3c84:	60 91 47 01 	lds	r22, 0x0147
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	46 9e       	mul	r4, r22
    3c8c:	a0 01       	movw	r20, r0
    3c8e:	47 9e       	mul	r4, r23
    3c90:	50 0d       	add	r21, r0
    3c92:	56 9e       	mul	r5, r22
    3c94:	50 0d       	add	r21, r0
    3c96:	11 24       	eor	r1, r1
    3c98:	24 0f       	add	r18, r20
    3c9a:	35 1f       	adc	r19, r21
    3c9c:	e0 91 15 2b 	lds	r30, 0x2B15
    3ca0:	f0 91 16 2b 	lds	r31, 0x2B16
    3ca4:	e2 0f       	add	r30, r18
    3ca6:	f3 1f       	adc	r31, r19
    3ca8:	87 70       	andi	r24, 0x07	; 7
    3caa:	90 70       	andi	r25, 0x00	; 0
    3cac:	95 01       	movw	r18, r10
    3cae:	02 c0       	rjmp	.+4      	; 0x3cb4 <initframe+0x748>
    3cb0:	35 95       	asr	r19
    3cb2:	27 95       	ror	r18
    3cb4:	8a 95       	dec	r24
    3cb6:	e2 f7       	brpl	.-8      	; 0x3cb0 <initframe+0x744>
    3cb8:	c9 01       	movw	r24, r18
    3cba:	20 81       	ld	r18, Z
    3cbc:	28 2b       	or	r18, r24
    3cbe:	20 83       	st	Z, r18
    3cc0:	0c c0       	rjmp	.+24     	; 0x3cda <initframe+0x76e>
            } else {
                setmask(5 - x, 2 - y + WD - 11);
    3cc2:	69 50       	subi	r22, 0x09	; 9
    3cc4:	60 1b       	sub	r22, r16
    3cc6:	84 2d       	mov	r24, r4
    3cc8:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
                setmask(2 - y + WD - 11, 5 - x);
    3ccc:	80 91 46 01 	lds	r24, 0x0146
    3cd0:	89 50       	subi	r24, 0x09	; 9
    3cd2:	80 1b       	sub	r24, r16
    3cd4:	64 2d       	mov	r22, r4
    3cd6:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        return;
    verinfo = pgm_read_word(&vpat[vers - 7]);

    bc = 17;
    for (x = 0; x < 6; x++)
        for (y = 0; y < 3; y++, bc--)
    3cda:	0f 5f       	subi	r16, 0xFF	; 255
    3cdc:	11 50       	subi	r17, 0x01	; 1
    3cde:	08 94       	sec
    3ce0:	e1 08       	sbc	r14, r1
    3ce2:	f1 08       	sbc	r15, r1
    3ce4:	03 30       	cpi	r16, 0x03	; 3
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <initframe+0x77e>
    3ce8:	8f cf       	rjmp	.-226    	; 0x3c08 <initframe+0x69c>
    3cea:	3d ef       	ldi	r19, 0xFD	; 253
    3cec:	c3 0e       	add	r12, r19
    3cee:	08 94       	sec
    3cf0:	41 08       	sbc	r4, r1
    3cf2:	51 08       	sbc	r5, r1
    if (vers < 7)
        return;
    verinfo = pgm_read_word(&vpat[vers - 7]);

    bc = 17;
    for (x = 0; x < 6; x++)
    3cf4:	4c 2d       	mov	r20, r12
    3cf6:	4f 3f       	cpi	r20, 0xFF	; 255
    3cf8:	81 f0       	breq	.+32     	; 0x3d1a <initframe+0x7ae>
        for (y = 0; y < 3; y++, bc--)
            if (1 & (bc > 11 ? vers >> (bc - 12) : verinfo >> bc)) {
                SETQRBIT(5 - x, 2 - y + WD - 11);
    3cfa:	c2 01       	movw	r24, r4
    3cfc:	87 70       	andi	r24, 0x07	; 7
    3cfe:	90 70       	andi	r25, 0x00	; 0
    3d00:	b5 01       	movw	r22, r10
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <initframe+0x79c>
    3d04:	75 95       	asr	r23
    3d06:	67 95       	ror	r22
    3d08:	8a 95       	dec	r24
    3d0a:	e2 f7       	brpl	.-8      	; 0x3d04 <initframe+0x798>
    3d0c:	d6 2e       	mov	r13, r22
    3d0e:	1c 2d       	mov	r17, r12
    3d10:	02 e0       	ldi	r16, 0x02	; 2
    3d12:	e0 2e       	mov	r14, r16
    3d14:	f1 2c       	mov	r15, r1
    3d16:	00 e0       	ldi	r16, 0x00	; 0
    3d18:	77 cf       	rjmp	.-274    	; 0x3c08 <initframe+0x69c>
            SETQRBIT(6, 8 + x);
        }

    // version block
    putvpat();
    for (y = 0; y < WD; y++)
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	7c 01       	movw	r14, r24
    3d20:	34 c0       	rjmp	.+104    	; 0x3d8a <initframe+0x81e>
    3d22:	00 e0       	ldi	r16, 0x00	; 0
    3d24:	10 e0       	ldi	r17, 0x00	; 0
        for (x = 0; x <= y; x++)
            if (QRBIT(x, y))
    3d26:	98 01       	movw	r18, r16
    3d28:	b3 e0       	ldi	r27, 0x03	; 3
    3d2a:	36 95       	lsr	r19
    3d2c:	27 95       	ror	r18
    3d2e:	ba 95       	dec	r27
    3d30:	e1 f7       	brne	.-8      	; 0x3d2a <initframe+0x7be>
    3d32:	40 91 47 01 	lds	r20, 0x0147
    3d36:	50 e0       	ldi	r21, 0x00	; 0
    3d38:	e4 9e       	mul	r14, r20
    3d3a:	c0 01       	movw	r24, r0
    3d3c:	e5 9e       	mul	r14, r21
    3d3e:	90 0d       	add	r25, r0
    3d40:	f4 9e       	mul	r15, r20
    3d42:	90 0d       	add	r25, r0
    3d44:	11 24       	eor	r1, r1
    3d46:	e0 91 15 2b 	lds	r30, 0x2B15
    3d4a:	f0 91 16 2b 	lds	r31, 0x2B16
    3d4e:	e2 0f       	add	r30, r18
    3d50:	f3 1f       	adc	r31, r19
    3d52:	e8 0f       	add	r30, r24
    3d54:	f9 1f       	adc	r31, r25
    3d56:	80 81       	ld	r24, Z
    3d58:	90 e0       	ldi	r25, 0x00	; 0
                setmask(5 - x, 2 - y + WD - 11);
                setmask(2 - y + WD - 11, 5 - x);
            }
}

void initframe()
    3d5a:	98 01       	movw	r18, r16
    3d5c:	20 95       	com	r18
    3d5e:	30 95       	com	r19

    // version block
    putvpat();
    for (y = 0; y < WD; y++)
        for (x = 0; x <= y; x++)
            if (QRBIT(x, y))
    3d60:	27 70       	andi	r18, 0x07	; 7
    3d62:	30 70       	andi	r19, 0x00	; 0
    3d64:	02 c0       	rjmp	.+4      	; 0x3d6a <initframe+0x7fe>
    3d66:	95 95       	asr	r25
    3d68:	87 95       	ror	r24
    3d6a:	2a 95       	dec	r18
    3d6c:	e2 f7       	brpl	.-8      	; 0x3d66 <initframe+0x7fa>
    3d6e:	80 ff       	sbrs	r24, 0
    3d70:	04 c0       	rjmp	.+8      	; 0x3d7a <initframe+0x80e>
                setmask(x, y);
    3d72:	80 2f       	mov	r24, r16
    3d74:	6e 2d       	mov	r22, r14
    3d76:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <setmask>
        }

    // version block
    putvpat();
    for (y = 0; y < WD; y++)
        for (x = 0; x <= y; x++)
    3d7a:	0f 5f       	subi	r16, 0xFF	; 255
    3d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7e:	e0 16       	cp	r14, r16
    3d80:	f1 06       	cpc	r15, r17
    3d82:	88 f6       	brcc	.-94     	; 0x3d26 <initframe+0x7ba>
            SETQRBIT(6, 8 + x);
        }

    // version block
    putvpat();
    for (y = 0; y < WD; y++)
    3d84:	08 94       	sec
    3d86:	e1 1c       	adc	r14, r1
    3d88:	f1 1c       	adc	r15, r1
    3d8a:	80 91 46 01 	lds	r24, 0x0146
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	e8 16       	cp	r14, r24
    3d92:	f9 06       	cpc	r15, r25
    3d94:	30 f2       	brcs	.-116    	; 0x3d22 <initframe+0x7b6>
        for (x = 0; x <= y; x++)
            if (QRBIT(x, y))
                setmask(x, y);
}
    3d96:	26 96       	adiw	r28, 0x06	; 6
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	f8 94       	cli
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	ff 90       	pop	r15
    3dac:	ef 90       	pop	r14
    3dae:	df 90       	pop	r13
    3db0:	cf 90       	pop	r12
    3db2:	bf 90       	pop	r11
    3db4:	af 90       	pop	r10
    3db6:	9f 90       	pop	r9
    3db8:	8f 90       	pop	r8
    3dba:	7f 90       	pop	r7
    3dbc:	6f 90       	pop	r6
    3dbe:	5f 90       	pop	r5
    3dc0:	4f 90       	pop	r4
    3dc2:	3f 90       	pop	r3
    3dc4:	2f 90       	pop	r2
    3dc6:	08 95       	ret

00003dc8 <freeframe>:

void freeframe() {
    free( framebase );
    3dc8:	80 91 15 2b 	lds	r24, 0x2B15
    3dcc:	90 91 16 2b 	lds	r25, 0x2B16
    3dd0:	0e 94 cc 32 	call	0x6598	; 0x6598 <free>
    free( framask );
    3dd4:	80 91 ba 2b 	lds	r24, 0x2BBA
    3dd8:	90 91 bb 2b 	lds	r25, 0x2BBB
    3ddc:	0e 94 cc 32 	call	0x6598	; 0x6598 <free>
    free( rlens );
    3de0:	80 91 71 04 	lds	r24, 0x0471
    3de4:	90 91 72 04 	lds	r25, 0x0472
    3de8:	0e 94 cc 32 	call	0x6598	; 0x6598 <free>
}
    3dec:	08 95       	ret

00003dee <initecc>:
#endif

#include "ecctable.h"

unsigned initecc(unsigned char ecc, unsigned char vers)
{
    3dee:	af 92       	push	r10
    3df0:	bf 92       	push	r11
    3df2:	cf 92       	push	r12
    3df4:	df 92       	push	r13
    3df6:	ef 92       	push	r14
    3df8:	ff 92       	push	r15
    3dfa:	0f 93       	push	r16
    3dfc:	1f 93       	push	r17
    3dfe:	df 93       	push	r29
    3e00:	cf 93       	push	r28
    3e02:	0f 92       	push	r0
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	08 2f       	mov	r16, r24
    VERSION = vers;
    3e0a:	60 93 44 01 	sts	0x0144, r22
    WD = 17 + 4 * vers;
    3e0e:	46 2f       	mov	r20, r22
    3e10:	44 0f       	add	r20, r20
    3e12:	44 0f       	add	r20, r20
    3e14:	4f 5e       	subi	r20, 0xEF	; 239
    3e16:	40 93 46 01 	sts	0x0146, r20
    WDB = (WD + 7) / 8;
    3e1a:	50 e0       	ldi	r21, 0x00	; 0
    3e1c:	9a 01       	movw	r18, r20
    3e1e:	29 5f       	subi	r18, 0xF9	; 249
    3e20:	3f 4f       	sbci	r19, 0xFF	; 255
    3e22:	93 e0       	ldi	r25, 0x03	; 3
    3e24:	35 95       	asr	r19
    3e26:	27 95       	ror	r18
    3e28:	9a 95       	dec	r25
    3e2a:	e1 f7       	brne	.-8      	; 0x3e24 <initecc+0x36>
    3e2c:	20 93 47 01 	sts	0x0147, r18

    unsigned fsz = WD * WDB;
    3e30:	24 9f       	mul	r18, r20
    3e32:	50 01       	movw	r10, r0
    3e34:	25 9f       	mul	r18, r21
    3e36:	b0 0c       	add	r11, r0
    3e38:	34 9f       	mul	r19, r20
    3e3a:	b0 0c       	add	r11, r0
    3e3c:	11 24       	eor	r1, r1
    if (fsz < 768)              // for ECC math buffers
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	a8 16       	cp	r10, r24
    3e42:	83 e0       	ldi	r24, 0x03	; 3
    3e44:	b8 06       	cpc	r11, r24
    3e46:	18 f4       	brcc	.+6      	; 0x3e4e <initecc+0x60>
        fsz = 768;
    3e48:	a1 2c       	mov	r10, r1
    3e4a:	83 e0       	ldi	r24, 0x03	; 3
    3e4c:	b8 2e       	mov	r11, r24
    qrframe = malloc(fsz);
    3e4e:	c5 01       	movw	r24, r10
    3e50:	69 83       	std	Y+1, r22	; 0x01
    3e52:	0e 94 32 32 	call	0x6464	; 0x6464 <malloc>
    3e56:	80 93 74 01 	sts	0x0174, r24
    3e5a:	90 93 75 01 	sts	0x0175, r25

    ECCLEVEL = ecc;
    3e5e:	00 93 45 01 	sts	0x0145, r16
    unsigned eccindex = (ecc - 1) * 4 + (vers - 1) * 16;
    3e62:	80 2f       	mov	r24, r16
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	01 97       	sbiw	r24, 0x01	; 1
    3e68:	69 81       	ldd	r22, Y+1	; 0x01
    3e6a:	70 e0       	ldi	r23, 0x00	; 0
    3e6c:	61 50       	subi	r22, 0x01	; 1
    3e6e:	70 40       	sbci	r23, 0x00	; 0
    3e70:	66 0f       	add	r22, r22
    3e72:	77 1f       	adc	r23, r23
    3e74:	66 0f       	add	r22, r22
    3e76:	77 1f       	adc	r23, r23
    3e78:	86 0f       	add	r24, r22
    3e7a:	97 1f       	adc	r25, r23
    3e7c:	88 0f       	add	r24, r24
    3e7e:	99 1f       	adc	r25, r25
    3e80:	88 0f       	add	r24, r24
    3e82:	99 1f       	adc	r25, r25

    neccblk1 = eccblocks[eccindex++];
    3e84:	fc 01       	movw	r30, r24
    3e86:	e8 51       	subi	r30, 0x18	; 24
    3e88:	fa 4d       	sbci	r31, 0xDA	; 218
    3e8a:	20 81       	ld	r18, Z
    3e8c:	20 93 40 01 	sts	0x0140, r18
    3e90:	01 96       	adiw	r24, 0x01	; 1
    neccblk2 = eccblocks[eccindex++];
    3e92:	fc 01       	movw	r30, r24
    3e94:	e8 51       	subi	r30, 0x18	; 24
    3e96:	fa 4d       	sbci	r31, 0xDA	; 218
    3e98:	e0 80       	ld	r14, Z
    3e9a:	e0 92 41 01 	sts	0x0141, r14
    datablkw = eccblocks[eccindex++];
    3e9e:	fc 01       	movw	r30, r24
    3ea0:	e7 51       	subi	r30, 0x17	; 23
    3ea2:	fa 4d       	sbci	r31, 0xDA	; 218
    3ea4:	00 81       	ld	r16, Z
    3ea6:	00 93 42 01 	sts	0x0142, r16
    eccblkwid = eccblocks[eccindex++];
    3eaa:	81 81       	ldd	r24, Z+1	; 0x01
    3eac:	80 93 43 01 	sts	0x0143, r24

    if (fsz < datablkw + (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2)
    3eb0:	10 e0       	ldi	r17, 0x00	; 0
    3eb2:	ff 24       	eor	r15, r15
    3eb4:	67 01       	movw	r12, r14
    3eb6:	c2 0e       	add	r12, r18
    3eb8:	d1 1c       	adc	r13, r1
    3eba:	98 01       	movw	r18, r16
    3ebc:	2e 0d       	add	r18, r14
    3ebe:	3f 1d       	adc	r19, r15
    3ec0:	a8 01       	movw	r20, r16
    3ec2:	48 0f       	add	r20, r24
    3ec4:	51 1d       	adc	r21, r1
    3ec6:	4c 9d       	mul	r20, r12
    3ec8:	c0 01       	movw	r24, r0
    3eca:	4d 9d       	mul	r20, r13
    3ecc:	90 0d       	add	r25, r0
    3ece:	5c 9d       	mul	r21, r12
    3ed0:	90 0d       	add	r25, r0
    3ed2:	11 24       	eor	r1, r1
    3ed4:	28 0f       	add	r18, r24
    3ed6:	39 1f       	adc	r19, r25
        fsz = datablkw + (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2;
    strinbuf = malloc(fsz);
    3ed8:	c5 01       	movw	r24, r10
    3eda:	a2 16       	cp	r10, r18
    3edc:	b3 06       	cpc	r11, r19
    3ede:	08 f4       	brcc	.+2      	; 0x3ee2 <initecc+0xf4>
    3ee0:	c9 01       	movw	r24, r18
    3ee2:	0e 94 32 32 	call	0x6464	; 0x6464 <malloc>
    3ee6:	80 93 cc 03 	sts	0x03CC, r24
    3eea:	90 93 cd 03 	sts	0x03CD, r25
    return datablkw * (neccblk1 + neccblk2) + neccblk2 - 3;     //-2 if vers <= 9!
    3eee:	97 01       	movw	r18, r14
    3ef0:	23 50       	subi	r18, 0x03	; 3
    3ef2:	30 40       	sbci	r19, 0x00	; 0
    3ef4:	c0 9e       	mul	r12, r16
    3ef6:	c0 01       	movw	r24, r0
    3ef8:	c1 9e       	mul	r12, r17
    3efa:	90 0d       	add	r25, r0
    3efc:	d0 9e       	mul	r13, r16
    3efe:	90 0d       	add	r25, r0
    3f00:	11 24       	eor	r1, r1
    3f02:	28 0f       	add	r18, r24
    3f04:	39 1f       	adc	r19, r25
}
    3f06:	c9 01       	movw	r24, r18
    3f08:	0f 90       	pop	r0
    3f0a:	cf 91       	pop	r28
    3f0c:	df 91       	pop	r29
    3f0e:	1f 91       	pop	r17
    3f10:	0f 91       	pop	r16
    3f12:	ff 90       	pop	r15
    3f14:	ef 90       	pop	r14
    3f16:	df 90       	pop	r13
    3f18:	cf 90       	pop	r12
    3f1a:	bf 90       	pop	r11
    3f1c:	af 90       	pop	r10
    3f1e:	08 95       	ret

00003f20 <initeccsize>:

unsigned initeccsize(unsigned char ecc, unsigned size)
{
    3f20:	ff 92       	push	r15
    3f22:	0f 93       	push	r16
    3f24:	1f 93       	push	r17
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	db 01       	movw	r26, r22
    unsigned eccindex;
    unsigned char vers;
    for( vers = 1 ; vers < 40; vers++ ) {
        eccindex = (ecc - 1) * 4 + (vers - 1) * 16;
        neccblk1 = eccblocks[eccindex++];
    3f2c:	e8 2f       	mov	r30, r24
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	ee 0f       	add	r30, r30
    3f32:	ff 1f       	adc	r31, r31
    3f34:	ee 0f       	add	r30, r30
    3f36:	ff 1f       	adc	r31, r31
        fsz = datablkw + (datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2;
    strinbuf = malloc(fsz);
    return datablkw * (neccblk1 + neccblk2) + neccblk2 - 3;     //-2 if vers <= 9!
}

unsigned initeccsize(unsigned char ecc, unsigned size)
    3f38:	ec 51       	subi	r30, 0x1C	; 28
    3f3a:	fa 4d       	sbci	r31, 0xDA	; 218
{
    unsigned eccindex;
    unsigned char vers;
    for( vers = 1 ; vers < 40; vers++ ) {
    3f3c:	61 e0       	ldi	r22, 0x01	; 1
        eccindex = (ecc - 1) * 4 + (vers - 1) * 16;
        neccblk1 = eccblocks[eccindex++];
    3f3e:	f0 80       	ld	r15, Z
        neccblk2 = eccblocks[eccindex++];
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
        datablkw = eccblocks[eccindex++];
    3f42:	92 81       	ldd	r25, Z+2	; 0x02
        if( size < datablkw * (neccblk1 + neccblk2) + neccblk2 - 3 )
    3f44:	47 2f       	mov	r20, r23
    3f46:	50 e0       	ldi	r21, 0x00	; 0
    3f48:	9a 01       	movw	r18, r20
    3f4a:	23 50       	subi	r18, 0x03	; 3
    3f4c:	30 40       	sbci	r19, 0x00	; 0
    3f4e:	4f 0d       	add	r20, r15
    3f50:	51 1d       	adc	r21, r1
    3f52:	09 2f       	mov	r16, r25
    3f54:	10 e0       	ldi	r17, 0x00	; 0
    3f56:	40 9f       	mul	r20, r16
    3f58:	e0 01       	movw	r28, r0
    3f5a:	41 9f       	mul	r20, r17
    3f5c:	d0 0d       	add	r29, r0
    3f5e:	50 9f       	mul	r21, r16
    3f60:	d0 0d       	add	r29, r0
    3f62:	11 24       	eor	r1, r1
    3f64:	2c 0f       	add	r18, r28
    3f66:	3d 1f       	adc	r19, r29
    3f68:	a2 17       	cp	r26, r18
    3f6a:	b3 07       	cpc	r27, r19
    3f6c:	20 f0       	brcs	.+8      	; 0x3f76 <initeccsize+0x56>

unsigned initeccsize(unsigned char ecc, unsigned size)
{
    unsigned eccindex;
    unsigned char vers;
    for( vers = 1 ; vers < 40; vers++ ) {
    3f6e:	6f 5f       	subi	r22, 0xFF	; 255
    3f70:	70 96       	adiw	r30, 0x10	; 16
    3f72:	68 32       	cpi	r22, 0x28	; 40
    3f74:	21 f7       	brne	.-56     	; 0x3f3e <initeccsize+0x1e>
    3f76:	f0 92 40 01 	sts	0x0140, r15
    3f7a:	70 93 41 01 	sts	0x0141, r23
    3f7e:	90 93 42 01 	sts	0x0142, r25
        neccblk2 = eccblocks[eccindex++];
        datablkw = eccblocks[eccindex++];
        if( size < datablkw * (neccblk1 + neccblk2) + neccblk2 - 3 )
            break;
    }
    return initecc( ecc, vers );
    3f82:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <initecc>
}
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	1f 91       	pop	r17
    3f8c:	0f 91       	pop	r16
    3f8e:	ff 90       	pop	r15
    3f90:	08 95       	ret

00003f92 <modnn>:
#endif

//========================================================================
// Reed Solomon error correction
static unsigned modnn(unsigned x)
{
    3f92:	9c 01       	movw	r18, r24
    while (x >= 255) {
    3f94:	07 c0       	rjmp	.+14     	; 0x3fa4 <modnn+0x12>
        x -= 255;
    3f96:	c9 01       	movw	r24, r18
    3f98:	8f 5f       	subi	r24, 0xFF	; 255
    3f9a:	90 40       	sbci	r25, 0x00	; 0
        x = (x >> 8) + (x & 255);
    3f9c:	29 2f       	mov	r18, r25
    3f9e:	33 27       	eor	r19, r19
    3fa0:	28 0f       	add	r18, r24
    3fa2:	31 1d       	adc	r19, r1

//========================================================================
// Reed Solomon error correction
static unsigned modnn(unsigned x)
{
    while (x >= 255) {
    3fa4:	2f 3f       	cpi	r18, 0xFF	; 255
    3fa6:	31 05       	cpc	r19, r1
    3fa8:	b0 f7       	brcc	.-20     	; 0x3f96 <modnn+0x4>
        x -= 255;
        x = (x >> 8) + (x & 255);
    }
    return x;
}
    3faa:	c9 01       	movw	r24, r18
    3fac:	08 95       	ret

00003fae <ismasked>:
//========================================================================
// Frame data insert following the path rules
static unsigned char ismasked(unsigned char x, unsigned char y)
{
    unsigned bt;
    if (x > y) {
    3fae:	68 17       	cp	r22, r24
    3fb0:	18 f4       	brcc	.+6      	; 0x3fb8 <ismasked+0xa>
    3fb2:	98 2f       	mov	r25, r24
    3fb4:	86 2f       	mov	r24, r22
    3fb6:	69 2f       	mov	r22, r25
        bt = x;
        x = y;
        y = bt;
    }
    bt = y;
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    bt += y * y;
    3fba:	66 9f       	mul	r22, r22
    3fbc:	90 01       	movw	r18, r0
    3fbe:	67 9f       	mul	r22, r23
    3fc0:	30 0d       	add	r19, r0
    3fc2:	76 9f       	mul	r23, r22
    3fc4:	30 0d       	add	r19, r0
    3fc6:	11 24       	eor	r1, r1
    3fc8:	26 0f       	add	r18, r22
    3fca:	37 1f       	adc	r19, r23
    while (y--) {
        bt += s;
        s += 2;
    }
#endif
    bt >>= 1;
    3fcc:	36 95       	lsr	r19
    3fce:	27 95       	ror	r18
    bt += x;
    3fd0:	28 0f       	add	r18, r24
    3fd2:	31 1d       	adc	r19, r1
    return (__LPM(&framask[bt >> 3]) >> (7 - (bt & 7))) & 1;
    3fd4:	f9 01       	movw	r30, r18
    3fd6:	43 e0       	ldi	r20, 0x03	; 3
    3fd8:	f6 95       	lsr	r31
    3fda:	e7 95       	ror	r30
    3fdc:	4a 95       	dec	r20
    3fde:	e1 f7       	brne	.-8      	; 0x3fd8 <ismasked+0x2a>
    3fe0:	e6 54       	subi	r30, 0x46	; 70
    3fe2:	f4 4d       	sbci	r31, 0xD4	; 212
    3fe4:	84 91       	lpm	r24, Z+
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	20 95       	com	r18
    3fea:	30 95       	com	r19
    3fec:	27 70       	andi	r18, 0x07	; 7
    3fee:	30 70       	andi	r19, 0x00	; 0
    3ff0:	02 c0       	rjmp	.+4      	; 0x3ff6 <ismasked+0x48>
    3ff2:	95 95       	asr	r25
    3ff4:	87 95       	ror	r24
    3ff6:	2a 95       	dec	r18
    3ff8:	e2 f7       	brpl	.-8      	; 0x3ff2 <ismasked+0x44>
}
    3ffa:	81 70       	andi	r24, 0x01	; 1
    3ffc:	08 95       	ret

00003ffe <applymask>:
}

//========================================================================
// Masking 
static void applymask(unsigned char m)
{
    3ffe:	2f 92       	push	r2
    4000:	3f 92       	push	r3
    4002:	4f 92       	push	r4
    4004:	5f 92       	push	r5
    4006:	6f 92       	push	r6
    4008:	7f 92       	push	r7
    400a:	8f 92       	push	r8
    400c:	9f 92       	push	r9
    400e:	af 92       	push	r10
    4010:	bf 92       	push	r11
    4012:	cf 92       	push	r12
    4014:	df 92       	push	r13
    4016:	ef 92       	push	r14
    4018:	ff 92       	push	r15
    401a:	0f 93       	push	r16
    401c:	1f 93       	push	r17
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	00 d0       	rcall	.+0      	; 0x4024 <applymask+0x26>
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    unsigned char x, y, r3x, r3y;

    switch (m) {
    4028:	83 30       	cpi	r24, 0x03	; 3
    402a:	09 f4       	brne	.+2      	; 0x402e <applymask+0x30>
    402c:	4c c0       	rjmp	.+152    	; 0x40c6 <applymask+0xc8>
    402e:	84 30       	cpi	r24, 0x04	; 4
    4030:	58 f4       	brcc	.+22     	; 0x4048 <applymask+0x4a>
    4032:	81 30       	cpi	r24, 0x01	; 1
    4034:	09 f4       	brne	.+2      	; 0x4038 <applymask+0x3a>
    4036:	5c c0       	rjmp	.+184    	; 0x40f0 <applymask+0xf2>
    4038:	b0 90 46 01 	lds	r11, 0x0146
    403c:	c0 90 47 01 	lds	r12, 0x0147
    4040:	82 30       	cpi	r24, 0x02	; 2
    4042:	08 f0       	brcs	.+2      	; 0x4046 <applymask+0x48>
    4044:	4d c0       	rjmp	.+154    	; 0x40e0 <applymask+0xe2>
    4046:	61 c0       	rjmp	.+194    	; 0x410a <applymask+0x10c>
    4048:	85 30       	cpi	r24, 0x05	; 5
    404a:	11 f1       	breq	.+68     	; 0x4090 <applymask+0x92>
    404c:	85 30       	cpi	r24, 0x05	; 5
    404e:	68 f1       	brcs	.+90     	; 0x40aa <applymask+0xac>
    4050:	86 30       	cpi	r24, 0x06	; 6
    4052:	89 f0       	breq	.+34     	; 0x4076 <applymask+0x78>
    4054:	87 30       	cpi	r24, 0x07	; 7
    4056:	09 f0       	breq	.+2      	; 0x405a <applymask+0x5c>
    4058:	47 c2       	rjmp	.+1166   	; 0x44e8 <applymask+0x4ea>
                    TOGQRBIT(x, y);
            }
        }
        break;
    case 7:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    405a:	b0 90 46 01 	lds	r11, 0x0146
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!(((r3x && (r3x == r3y)) + ((x + y) & 1)) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    405e:	40 90 47 01 	lds	r4, 0x0147
    4062:	55 24       	eor	r5, r5

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    4064:	00 e0       	ldi	r16, 0x00	; 0
    4066:	10 e0       	ldi	r17, 0x00	; 0
    4068:	ee 24       	eor	r14, r14
    406a:	ff 24       	eor	r15, r15
    406c:	30 e0       	ldi	r19, 0x00	; 0
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!(((r3x && (r3x == r3y)) + ((x + y) & 1)) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    406e:	20 e8       	ldi	r18, 0x80	; 128
    4070:	62 2e       	mov	r6, r18
    4072:	71 2c       	mov	r7, r1
    4074:	35 c2       	rjmp	.+1130   	; 0x44e0 <applymask+0x4e2>
                    TOGQRBIT(x, y);
            }
        }
        break;
    case 6:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    4076:	b0 90 46 01 	lds	r11, 0x0146
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!(((x & y & 1) + (r3x && (r3x == r3y))) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    407a:	80 90 47 01 	lds	r8, 0x0147
    407e:	99 24       	eor	r9, r9

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    4080:	00 e0       	ldi	r16, 0x00	; 0
    4082:	10 e0       	ldi	r17, 0x00	; 0
    4084:	70 e0       	ldi	r23, 0x00	; 0
    4086:	cc 24       	eor	r12, r12
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!(((x & y & 1) + (r3x && (r3x == r3y))) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    4088:	90 e8       	ldi	r25, 0x80	; 128
    408a:	e9 2e       	mov	r14, r25
    408c:	f1 2c       	mov	r15, r1
    408e:	dc c1       	rjmp	.+952    	; 0x4448 <applymask+0x44a>
                if (!r3y && !ismasked(x, y))
                    TOGQRBIT(x, y);
            }
        break;
    case 5:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    4090:	b0 90 46 01 	lds	r11, 0x0146
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!((x & y & 1) + !(!r3x | !r3y)) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    4094:	80 90 47 01 	lds	r8, 0x0147
    4098:	99 24       	eor	r9, r9

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    409a:	00 e0       	ldi	r16, 0x00	; 0
    409c:	10 e0       	ldi	r17, 0x00	; 0
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	cc 24       	eor	r12, r12
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!((x & y & 1) + !(!r3x | !r3y)) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40a2:	80 e8       	ldi	r24, 0x80	; 128
    40a4:	e8 2e       	mov	r14, r24
    40a6:	f1 2c       	mov	r15, r1
    40a8:	87 c1       	rjmp	.+782    	; 0x43b8 <applymask+0x3ba>
                    TOGQRBIT(x, y);
            }
        }
        break;
    case 4:
        for (y = 0; y < WD; y++)
    40aa:	b0 90 46 01 	lds	r11, 0x0146
                if (r3x == 3) {
                    r3x = 0;
                    r3y = !r3y;
                }
                if (!r3y && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40ae:	80 90 47 01 	lds	r8, 0x0147
    40b2:	99 24       	eor	r9, r9

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    40b4:	00 e0       	ldi	r16, 0x00	; 0
    40b6:	10 e0       	ldi	r17, 0x00	; 0
    40b8:	cc 24       	eor	r12, r12
    case 4:
        for (y = 0; y < WD; y++)
            for (r3x = 0, r3y = ((y >> 1) & 1), x = 0; x < WD; x++, r3x++) {
                if (r3x == 3) {
                    r3x = 0;
                    r3y = !r3y;
    40ba:	aa 24       	eor	r10, r10
    40bc:	a3 94       	inc	r10
                }
                if (!r3y && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40be:	b0 e8       	ldi	r27, 0x80	; 128
    40c0:	eb 2e       	mov	r14, r27
    40c2:	f1 2c       	mov	r15, r1
    40c4:	2f c1       	rjmp	.+606    	; 0x4324 <applymask+0x326>
                if (!r3x && !ismasked(x, y))
                    TOGQRBIT(x, y);
            }
        break;
    case 3:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    40c6:	a0 90 46 01 	lds	r10, 0x0146
                r3y = 0;
            for (r3x = r3y, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40ca:	c0 90 47 01 	lds	r12, 0x0147
    40ce:	dd 24       	eor	r13, r13

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    40d0:	00 e0       	ldi	r16, 0x00	; 0
    40d2:	10 e0       	ldi	r17, 0x00	; 0
    40d4:	20 e0       	ldi	r18, 0x00	; 0
    40d6:	bb 24       	eor	r11, r11
                r3y = 0;
            for (r3x = r3y, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40d8:	a0 e8       	ldi	r26, 0x80	; 128
    40da:	ea 2e       	mov	r14, r26
    40dc:	f1 2c       	mov	r15, r1
    40de:	e9 c0       	rjmp	.+466    	; 0x42b2 <applymask+0x2b4>
        for (y = 0; y < WD; y++)
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40e0:	dd 24       	eor	r13, r13

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    40e2:	00 e0       	ldi	r16, 0x00	; 0
    40e4:	10 e0       	ldi	r17, 0x00	; 0
    40e6:	aa 24       	eor	r10, r10
        for (y = 0; y < WD; y++)
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40e8:	f0 e8       	ldi	r31, 0x80	; 128
    40ea:	ef 2e       	mov	r14, r31
    40ec:	f1 2c       	mov	r15, r1
    40ee:	a7 c0       	rjmp	.+334    	; 0x423e <applymask+0x240>
            for (x = 0; x < WD; x++)
                if (!((x + y) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
        break;
    case 1:
        for (y = 0; y < WD; y++)
    40f0:	b0 90 46 01 	lds	r11, 0x0146
            for (x = 0; x < WD; x++)
                if (!(y & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    40f4:	60 90 47 01 	lds	r6, 0x0147
    40f8:	77 24       	eor	r7, r7

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    40fa:	ee 24       	eor	r14, r14
    40fc:	ff 24       	eor	r15, r15
    40fe:	00 e0       	ldi	r16, 0x00	; 0
    4100:	10 e0       	ldi	r17, 0x00	; 0
        break;
    case 1:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
                if (!(y & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    4102:	e0 e8       	ldi	r30, 0x80	; 128
    4104:	ce 2e       	mov	r12, r30
    4106:	d1 2c       	mov	r13, r1
    4108:	64 c0       	rjmp	.+200    	; 0x41d2 <applymask+0x1d4>
    switch (m) {
    case 0:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
                if (!((x + y) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    410a:	6c 2c       	mov	r6, r12
    410c:	77 24       	eor	r7, r7

}

//========================================================================
// Masking 
static void applymask(unsigned char m)
    410e:	00 e0       	ldi	r16, 0x00	; 0
    4110:	10 e0       	ldi	r17, 0x00	; 0
    4112:	ee 24       	eor	r14, r14
    4114:	ff 24       	eor	r15, r15
    switch (m) {
    case 0:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
                if (!((x + y) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
    4116:	70 e8       	ldi	r23, 0x80	; 128
    4118:	87 2e       	mov	r8, r23
    411a:	91 2c       	mov	r9, r1
    411c:	2b c0       	rjmp	.+86     	; 0x4174 <applymask+0x176>

    switch (m) {
    case 0:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
                if (!((x + y) & 1) && !ismasked(x, y))
    411e:	c0 fc       	sbrc	r12, 0
    4120:	1b c0       	rjmp	.+54     	; 0x4158 <applymask+0x15a>
    4122:	82 2d       	mov	r24, r2
    4124:	6a 2d       	mov	r22, r10
    4126:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    412a:	88 23       	and	r24, r24
    412c:	a9 f4       	brne	.+42     	; 0x4158 <applymask+0x15a>
                    TOGQRBIT(x, y);
    412e:	46 94       	lsr	r4
    4130:	46 94       	lsr	r4
    4132:	46 94       	lsr	r4
    4134:	f8 01       	movw	r30, r16
    4136:	e4 0d       	add	r30, r4
    4138:	f1 1d       	adc	r31, r1
    413a:	ec 58       	subi	r30, 0x8C	; 140
    413c:	fe 4f       	sbci	r31, 0xFE	; 254
    413e:	c1 01       	movw	r24, r2
    4140:	87 70       	andi	r24, 0x07	; 7
    4142:	90 70       	andi	r25, 0x00	; 0
    4144:	94 01       	movw	r18, r8
    4146:	02 c0       	rjmp	.+4      	; 0x414c <applymask+0x14e>
    4148:	35 95       	asr	r19
    414a:	27 95       	ror	r18
    414c:	8a 95       	dec	r24
    414e:	e2 f7       	brpl	.-8      	; 0x4148 <applymask+0x14a>
    4150:	c9 01       	movw	r24, r18
    4152:	20 81       	ld	r18, Z
    4154:	28 27       	eor	r18, r24
    4156:	20 83       	st	Z, r18
    4158:	08 94       	sec
    415a:	21 1c       	adc	r2, r1
    415c:	31 1c       	adc	r3, r1
    415e:	08 94       	sec
    4160:	c1 1c       	adc	r12, r1
    4162:	d1 1c       	adc	r13, r1
    4164:	42 2c       	mov	r4, r2
    unsigned char x, y, r3x, r3y;

    switch (m) {
    case 0:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
    4166:	2b 14       	cp	r2, r11
    4168:	d0 f2       	brcs	.-76     	; 0x411e <applymask+0x120>
    416a:	08 94       	sec
    416c:	e1 1c       	adc	r14, r1
    416e:	f1 1c       	adc	r15, r1
    4170:	06 0d       	add	r16, r6
    4172:	17 1d       	adc	r17, r7
    4174:	ae 2c       	mov	r10, r14
{
    unsigned char x, y, r3x, r3y;

    switch (m) {
    case 0:
        for (y = 0; y < WD; y++)
    4176:	eb 14       	cp	r14, r11
    4178:	08 f0       	brcs	.+2      	; 0x417c <applymask+0x17e>
    417a:	b6 c1       	rjmp	.+876    	; 0x44e8 <applymask+0x4ea>
    417c:	67 01       	movw	r12, r14
    417e:	22 24       	eor	r2, r2
    4180:	33 24       	eor	r3, r3
    4182:	f0 cf       	rjmp	.-32     	; 0x4164 <applymask+0x166>
                    TOGQRBIT(x, y);
        break;
    case 1:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
                if (!(y & 1) && !ismasked(x, y))
    4184:	81 14       	cp	r8, r1
    4186:	91 04       	cpc	r9, r1
    4188:	d1 f4       	brne	.+52     	; 0x41be <applymask+0x1c0>
    418a:	82 2d       	mov	r24, r2
    418c:	6a 2d       	mov	r22, r10
    418e:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    4192:	88 23       	and	r24, r24
    4194:	a1 f4       	brne	.+40     	; 0x41be <applymask+0x1c0>
                    TOGQRBIT(x, y);
    4196:	46 94       	lsr	r4
    4198:	46 94       	lsr	r4
    419a:	46 94       	lsr	r4
    419c:	f7 01       	movw	r30, r14
    419e:	e4 0d       	add	r30, r4
    41a0:	f1 1d       	adc	r31, r1
    41a2:	ec 58       	subi	r30, 0x8C	; 140
    41a4:	fe 4f       	sbci	r31, 0xFE	; 254
    41a6:	c1 01       	movw	r24, r2
    41a8:	87 70       	andi	r24, 0x07	; 7
    41aa:	90 70       	andi	r25, 0x00	; 0
    41ac:	a6 01       	movw	r20, r12
    41ae:	02 c0       	rjmp	.+4      	; 0x41b4 <applymask+0x1b6>
    41b0:	55 95       	asr	r21
    41b2:	47 95       	ror	r20
    41b4:	8a 95       	dec	r24
    41b6:	e2 f7       	brpl	.-8      	; 0x41b0 <applymask+0x1b2>
    41b8:	20 81       	ld	r18, Z
    41ba:	24 27       	eor	r18, r20
    41bc:	20 83       	st	Z, r18
    41be:	08 94       	sec
    41c0:	21 1c       	adc	r2, r1
    41c2:	31 1c       	adc	r3, r1
    41c4:	42 2c       	mov	r4, r2
                if (!((x + y) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
        break;
    case 1:
        for (y = 0; y < WD; y++)
            for (x = 0; x < WD; x++)
    41c6:	2b 14       	cp	r2, r11
    41c8:	e8 f2       	brcs	.-70     	; 0x4184 <applymask+0x186>
    41ca:	0f 5f       	subi	r16, 0xFF	; 255
    41cc:	1f 4f       	sbci	r17, 0xFF	; 255
    41ce:	e6 0c       	add	r14, r6
    41d0:	f7 1c       	adc	r15, r7
    41d2:	a0 2e       	mov	r10, r16
            for (x = 0; x < WD; x++)
                if (!((x + y) & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
        break;
    case 1:
        for (y = 0; y < WD; y++)
    41d4:	0b 15       	cp	r16, r11
    41d6:	08 f0       	brcs	.+2      	; 0x41da <applymask+0x1dc>
    41d8:	87 c1       	rjmp	.+782    	; 0x44e8 <applymask+0x4ea>
    41da:	22 24       	eor	r2, r2
    41dc:	33 24       	eor	r3, r3
            for (x = 0; x < WD; x++)
                if (!(y & 1) && !ismasked(x, y))
    41de:	61 e0       	ldi	r22, 0x01	; 1
    41e0:	86 2e       	mov	r8, r22
    41e2:	91 2c       	mov	r9, r1
    41e4:	80 22       	and	r8, r16
    41e6:	91 22       	and	r9, r17
    41e8:	ed cf       	rjmp	.-38     	; 0x41c4 <applymask+0x1c6>
                    TOGQRBIT(x, y);
        break;
    case 2:
        for (y = 0; y < WD; y++)
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
    41ea:	83 30       	cpi	r24, 0x03	; 3
    41ec:	11 f0       	breq	.+4      	; 0x41f2 <applymask+0x1f4>
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
    41ee:	88 23       	and	r24, r24
    41f0:	e1 f4       	brne	.+56     	; 0x422a <applymask+0x22c>
    41f2:	88 2d       	mov	r24, r8
    41f4:	6a 2d       	mov	r22, r10
    41f6:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    41fa:	88 23       	and	r24, r24
    41fc:	a9 f4       	brne	.+42     	; 0x4228 <applymask+0x22a>
                    TOGQRBIT(x, y);
    41fe:	86 94       	lsr	r8
    4200:	86 94       	lsr	r8
    4202:	86 94       	lsr	r8
    4204:	f8 01       	movw	r30, r16
    4206:	e8 0d       	add	r30, r8
    4208:	f1 1d       	adc	r31, r1
    420a:	ec 58       	subi	r30, 0x8C	; 140
    420c:	fe 4f       	sbci	r31, 0xFE	; 254
    420e:	c3 01       	movw	r24, r6
    4210:	87 70       	andi	r24, 0x07	; 7
    4212:	90 70       	andi	r25, 0x00	; 0
    4214:	97 01       	movw	r18, r14
    4216:	02 c0       	rjmp	.+4      	; 0x421c <applymask+0x21e>
    4218:	35 95       	asr	r19
    421a:	27 95       	ror	r18
    421c:	8a 95       	dec	r24
    421e:	e2 f7       	brpl	.-8      	; 0x4218 <applymask+0x21a>
    4220:	c9 01       	movw	r24, r18
    4222:	20 81       	ld	r18, Z
    4224:	28 27       	eor	r18, r24
    4226:	20 83       	st	Z, r18
    case 2:
        for (y = 0; y < WD; y++)
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
    4228:	80 e0       	ldi	r24, 0x00	; 0
                if (!(y & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
        break;
    case 2:
        for (y = 0; y < WD; y++)
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    422a:	8f 5f       	subi	r24, 0xFF	; 255
    422c:	08 94       	sec
    422e:	61 1c       	adc	r6, r1
    4230:	71 1c       	adc	r7, r1
    4232:	86 2c       	mov	r8, r6
    4234:	6b 14       	cp	r6, r11
    4236:	c8 f2       	brcs	.-78     	; 0x41ea <applymask+0x1ec>
            for (x = 0; x < WD; x++)
                if (!(y & 1) && !ismasked(x, y))
                    TOGQRBIT(x, y);
        break;
    case 2:
        for (y = 0; y < WD; y++)
    4238:	a3 94       	inc	r10
    423a:	0c 0d       	add	r16, r12
    423c:	1d 1d       	adc	r17, r13
    423e:	ab 14       	cp	r10, r11
    4240:	08 f0       	brcs	.+2      	; 0x4244 <applymask+0x246>
    4242:	52 c1       	rjmp	.+676    	; 0x44e8 <applymask+0x4ea>
    4244:	66 24       	eor	r6, r6
    4246:	77 24       	eor	r7, r7
    4248:	80 e0       	ldi	r24, 0x00	; 0
    424a:	f3 cf       	rjmp	.-26     	; 0x4232 <applymask+0x234>
                    TOGQRBIT(x, y);
            }
        break;
    case 3:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
    424c:	23 30       	cpi	r18, 0x03	; 3
    424e:	09 f4       	brne	.+2      	; 0x4252 <applymask+0x254>
                r3y = 0;
    4250:	20 e0       	ldi	r18, 0x00	; 0
            for (r3x = r3y, x = 0; x < WD; x++, r3x++) {
    4252:	82 2f       	mov	r24, r18
    4254:	66 24       	eor	r6, r6
    4256:	77 24       	eor	r7, r7
    4258:	25 c0       	rjmp	.+74     	; 0x42a4 <applymask+0x2a6>
                if (r3x == 3)
    425a:	83 30       	cpi	r24, 0x03	; 3
    425c:	11 f0       	breq	.+4      	; 0x4262 <applymask+0x264>
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
    425e:	88 23       	and	r24, r24
    4260:	e9 f4       	brne	.+58     	; 0x429c <applymask+0x29e>
    4262:	88 2d       	mov	r24, r8
    4264:	6b 2d       	mov	r22, r11
    4266:	2a 83       	std	Y+2, r18	; 0x02
    4268:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    426c:	2a 81       	ldd	r18, Y+2	; 0x02
    426e:	88 23       	and	r24, r24
    4270:	a1 f4       	brne	.+40     	; 0x429a <applymask+0x29c>
                    TOGQRBIT(x, y);
    4272:	86 94       	lsr	r8
    4274:	86 94       	lsr	r8
    4276:	86 94       	lsr	r8
    4278:	f8 01       	movw	r30, r16
    427a:	e8 0d       	add	r30, r8
    427c:	f1 1d       	adc	r31, r1
    427e:	ec 58       	subi	r30, 0x8C	; 140
    4280:	fe 4f       	sbci	r31, 0xFE	; 254
    4282:	c3 01       	movw	r24, r6
    4284:	87 70       	andi	r24, 0x07	; 7
    4286:	90 70       	andi	r25, 0x00	; 0
    4288:	a7 01       	movw	r20, r14
    428a:	02 c0       	rjmp	.+4      	; 0x4290 <applymask+0x292>
    428c:	55 95       	asr	r21
    428e:	47 95       	ror	r20
    4290:	8a 95       	dec	r24
    4292:	e2 f7       	brpl	.-8      	; 0x428c <applymask+0x28e>
    4294:	30 81       	ld	r19, Z
    4296:	34 27       	eor	r19, r20
    4298:	30 83       	st	Z, r19
            if (r3y == 3)
                r3y = 0;
            for (r3x = r3y, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
                if (!r3x && !ismasked(x, y))
    429a:	80 e0       	ldi	r24, 0x00	; 0
        break;
    case 3:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
                r3y = 0;
            for (r3x = r3y, x = 0; x < WD; x++, r3x++) {
    429c:	8f 5f       	subi	r24, 0xFF	; 255
    429e:	08 94       	sec
    42a0:	61 1c       	adc	r6, r1
    42a2:	71 1c       	adc	r7, r1
    42a4:	86 2c       	mov	r8, r6
    42a6:	6a 14       	cp	r6, r10
    42a8:	c0 f2       	brcs	.-80     	; 0x425a <applymask+0x25c>
                if (!r3x && !ismasked(x, y))
                    TOGQRBIT(x, y);
            }
        break;
    case 3:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    42aa:	b3 94       	inc	r11
    42ac:	2f 5f       	subi	r18, 0xFF	; 255
    42ae:	0c 0d       	add	r16, r12
    42b0:	1d 1d       	adc	r17, r13
    42b2:	ba 14       	cp	r11, r10
    42b4:	58 f2       	brcs	.-106    	; 0x424c <applymask+0x24e>
    42b6:	18 c1       	rjmp	.+560    	; 0x44e8 <applymask+0x4ea>
            }
        }
        break;
    case 4:
        for (y = 0; y < WD; y++)
            for (r3x = 0, r3y = ((y >> 1) & 1), x = 0; x < WD; x++, r3x++) {
    42b8:	2c 2d       	mov	r18, r12
    42ba:	26 95       	lsr	r18
    42bc:	21 70       	andi	r18, 0x01	; 1
    42be:	44 24       	eor	r4, r4
    42c0:	55 24       	eor	r5, r5
    42c2:	30 e0       	ldi	r19, 0x00	; 0
    42c4:	29 c0       	rjmp	.+82     	; 0x4318 <applymask+0x31a>
                if (r3x == 3) {
    42c6:	33 30       	cpi	r19, 0x03	; 3
    42c8:	11 f4       	brne	.+4      	; 0x42ce <applymask+0x2d0>
                    r3x = 0;
                    r3y = !r3y;
    42ca:	2a 25       	eor	r18, r10
        break;
    case 4:
        for (y = 0; y < WD; y++)
            for (r3x = 0, r3y = ((y >> 1) & 1), x = 0; x < WD; x++, r3x++) {
                if (r3x == 3) {
                    r3x = 0;
    42cc:	30 e0       	ldi	r19, 0x00	; 0
                    r3y = !r3y;
                }
                if (!r3y && !ismasked(x, y))
    42ce:	22 23       	and	r18, r18
    42d0:	f9 f4       	brne	.+62     	; 0x4310 <applymask+0x312>
    42d2:	86 2d       	mov	r24, r6
    42d4:	6c 2d       	mov	r22, r12
    42d6:	2a 83       	std	Y+2, r18	; 0x02
    42d8:	39 83       	std	Y+1, r19	; 0x01
    42da:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    42de:	2a 81       	ldd	r18, Y+2	; 0x02
    42e0:	39 81       	ldd	r19, Y+1	; 0x01
    42e2:	88 23       	and	r24, r24
    42e4:	a9 f4       	brne	.+42     	; 0x4310 <applymask+0x312>
                    TOGQRBIT(x, y);
    42e6:	66 94       	lsr	r6
    42e8:	66 94       	lsr	r6
    42ea:	66 94       	lsr	r6
    42ec:	f8 01       	movw	r30, r16
    42ee:	e6 0d       	add	r30, r6
    42f0:	f1 1d       	adc	r31, r1
    42f2:	ec 58       	subi	r30, 0x8C	; 140
    42f4:	fe 4f       	sbci	r31, 0xFE	; 254
    42f6:	c2 01       	movw	r24, r4
    42f8:	87 70       	andi	r24, 0x07	; 7
    42fa:	90 70       	andi	r25, 0x00	; 0
    42fc:	a7 01       	movw	r20, r14
    42fe:	02 c0       	rjmp	.+4      	; 0x4304 <applymask+0x306>
    4300:	55 95       	asr	r21
    4302:	47 95       	ror	r20
    4304:	8a 95       	dec	r24
    4306:	e2 f7       	brpl	.-8      	; 0x4300 <applymask+0x302>
    4308:	ca 01       	movw	r24, r20
    430a:	40 81       	ld	r20, Z
    430c:	48 27       	eor	r20, r24
    430e:	40 83       	st	Z, r20
            }
        }
        break;
    case 4:
        for (y = 0; y < WD; y++)
            for (r3x = 0, r3y = ((y >> 1) & 1), x = 0; x < WD; x++, r3x++) {
    4310:	3f 5f       	subi	r19, 0xFF	; 255
    4312:	08 94       	sec
    4314:	41 1c       	adc	r4, r1
    4316:	51 1c       	adc	r5, r1
    4318:	64 2c       	mov	r6, r4
    431a:	4b 14       	cp	r4, r11
    431c:	a0 f2       	brcs	.-88     	; 0x42c6 <applymask+0x2c8>
                    TOGQRBIT(x, y);
            }
        }
        break;
    case 4:
        for (y = 0; y < WD; y++)
    431e:	c3 94       	inc	r12
    4320:	08 0d       	add	r16, r8
    4322:	19 1d       	adc	r17, r9
    4324:	cb 14       	cp	r12, r11
    4326:	40 f2       	brcs	.-112    	; 0x42b8 <applymask+0x2ba>
    4328:	df c0       	rjmp	.+446    	; 0x44e8 <applymask+0x4ea>
                    TOGQRBIT(x, y);
            }
        break;
    case 5:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
    432a:	23 30       	cpi	r18, 0x03	; 3
    432c:	09 f4       	brne	.+2      	; 0x4330 <applymask+0x332>
                r3y = 0;
    432e:	20 e0       	ldi	r18, 0x00	; 0
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    4330:	66 24       	eor	r6, r6
    4332:	77 24       	eor	r7, r7
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	39 c0       	rjmp	.+114    	; 0x43aa <applymask+0x3ac>
                if (r3x == 3)
    4338:	33 30       	cpi	r19, 0x03	; 3
    433a:	09 f4       	brne	.+2      	; 0x433e <applymask+0x340>
                    r3x = 0;
    433c:	30 e0       	ldi	r19, 0x00	; 0
                if (!((x & y & 1) + !(!r3x | !r3y)) && !ismasked(x, y))
    433e:	91 e0       	ldi	r25, 0x01	; 1
    4340:	33 23       	and	r19, r19
    4342:	09 f4       	brne	.+2      	; 0x4346 <applymask+0x348>
    4344:	90 e0       	ldi	r25, 0x00	; 0
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	22 23       	and	r18, r18
    434a:	09 f4       	brne	.+2      	; 0x434e <applymask+0x350>
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	89 23       	and	r24, r25
    4350:	4a 2d       	mov	r20, r10
    4352:	4c 21       	and	r20, r12
    4354:	50 e0       	ldi	r21, 0x00	; 0
    4356:	41 70       	andi	r20, 0x01	; 1
    4358:	50 70       	andi	r21, 0x00	; 0
    435a:	48 0f       	add	r20, r24
    435c:	51 1d       	adc	r21, r1
    435e:	41 15       	cp	r20, r1
    4360:	51 05       	cpc	r21, r1
    4362:	f9 f4       	brne	.+62     	; 0x43a2 <applymask+0x3a4>
    4364:	8a 2d       	mov	r24, r10
    4366:	6c 2d       	mov	r22, r12
    4368:	2a 83       	std	Y+2, r18	; 0x02
    436a:	39 83       	std	Y+1, r19	; 0x01
    436c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    4370:	2a 81       	ldd	r18, Y+2	; 0x02
    4372:	39 81       	ldd	r19, Y+1	; 0x01
    4374:	88 23       	and	r24, r24
    4376:	a9 f4       	brne	.+42     	; 0x43a2 <applymask+0x3a4>
                    TOGQRBIT(x, y);
    4378:	a6 94       	lsr	r10
    437a:	a6 94       	lsr	r10
    437c:	a6 94       	lsr	r10
    437e:	f8 01       	movw	r30, r16
    4380:	ea 0d       	add	r30, r10
    4382:	f1 1d       	adc	r31, r1
    4384:	ec 58       	subi	r30, 0x8C	; 140
    4386:	fe 4f       	sbci	r31, 0xFE	; 254
    4388:	c3 01       	movw	r24, r6
    438a:	87 70       	andi	r24, 0x07	; 7
    438c:	90 70       	andi	r25, 0x00	; 0
    438e:	a7 01       	movw	r20, r14
    4390:	02 c0       	rjmp	.+4      	; 0x4396 <applymask+0x398>
    4392:	55 95       	asr	r21
    4394:	47 95       	ror	r20
    4396:	8a 95       	dec	r24
    4398:	e2 f7       	brpl	.-8      	; 0x4392 <applymask+0x394>
    439a:	ca 01       	movw	r24, r20
    439c:	40 81       	ld	r20, Z
    439e:	48 27       	eor	r20, r24
    43a0:	40 83       	st	Z, r20
        break;
    case 5:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    43a2:	3f 5f       	subi	r19, 0xFF	; 255
    43a4:	08 94       	sec
    43a6:	61 1c       	adc	r6, r1
    43a8:	71 1c       	adc	r7, r1
    43aa:	a6 2c       	mov	r10, r6
    43ac:	6b 14       	cp	r6, r11
    43ae:	20 f2       	brcs	.-120    	; 0x4338 <applymask+0x33a>
                if (!r3y && !ismasked(x, y))
                    TOGQRBIT(x, y);
            }
        break;
    case 5:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    43b0:	c3 94       	inc	r12
    43b2:	2f 5f       	subi	r18, 0xFF	; 255
    43b4:	08 0d       	add	r16, r8
    43b6:	19 1d       	adc	r17, r9
    43b8:	cb 14       	cp	r12, r11
    43ba:	08 f4       	brcc	.+2      	; 0x43be <applymask+0x3c0>
    43bc:	b6 cf       	rjmp	.-148    	; 0x432a <applymask+0x32c>
    43be:	94 c0       	rjmp	.+296    	; 0x44e8 <applymask+0x4ea>
            }
        }
        break;
    case 6:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
    43c0:	73 30       	cpi	r23, 0x03	; 3
    43c2:	09 f4       	brne	.+2      	; 0x43c6 <applymask+0x3c8>
                r3y = 0;
    43c4:	70 e0       	ldi	r23, 0x00	; 0
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    43c6:	66 24       	eor	r6, r6
    43c8:	77 24       	eor	r7, r7
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	36 c0       	rjmp	.+108    	; 0x443a <applymask+0x43c>
                if (r3x == 3)
    43ce:	93 30       	cpi	r25, 0x03	; 3
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <applymask+0x3d6>
                    r3x = 0;
    43d2:	90 e0       	ldi	r25, 0x00	; 0
                if (!(((x & y & 1) + (r3x && (r3x == r3y))) & 1) && !ismasked(x, y))
    43d4:	2a 2d       	mov	r18, r10
    43d6:	2c 21       	and	r18, r12
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	21 70       	andi	r18, 0x01	; 1
    43dc:	30 70       	andi	r19, 0x00	; 0
    43de:	99 23       	and	r25, r25
    43e0:	21 f0       	breq	.+8      	; 0x43ea <applymask+0x3ec>
    43e2:	41 e0       	ldi	r20, 0x01	; 1
    43e4:	50 e0       	ldi	r21, 0x00	; 0
    43e6:	97 17       	cp	r25, r23
    43e8:	11 f0       	breq	.+4      	; 0x43ee <applymask+0x3f0>
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	24 0f       	add	r18, r20
    43f0:	35 1f       	adc	r19, r21
    43f2:	20 fd       	sbrc	r18, 0
    43f4:	1e c0       	rjmp	.+60     	; 0x4432 <applymask+0x434>
    43f6:	8a 2d       	mov	r24, r10
    43f8:	6c 2d       	mov	r22, r12
    43fa:	7a 83       	std	Y+2, r23	; 0x02
    43fc:	99 83       	std	Y+1, r25	; 0x01
    43fe:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    4402:	7a 81       	ldd	r23, Y+2	; 0x02
    4404:	99 81       	ldd	r25, Y+1	; 0x01
    4406:	88 23       	and	r24, r24
    4408:	a1 f4       	brne	.+40     	; 0x4432 <applymask+0x434>
                    TOGQRBIT(x, y);
    440a:	a6 94       	lsr	r10
    440c:	a6 94       	lsr	r10
    440e:	a6 94       	lsr	r10
    4410:	f8 01       	movw	r30, r16
    4412:	ea 0d       	add	r30, r10
    4414:	f1 1d       	adc	r31, r1
    4416:	ec 58       	subi	r30, 0x8C	; 140
    4418:	fe 4f       	sbci	r31, 0xFE	; 254
    441a:	93 01       	movw	r18, r6
    441c:	27 70       	andi	r18, 0x07	; 7
    441e:	30 70       	andi	r19, 0x00	; 0
    4420:	a7 01       	movw	r20, r14
    4422:	02 c0       	rjmp	.+4      	; 0x4428 <applymask+0x42a>
    4424:	55 95       	asr	r21
    4426:	47 95       	ror	r20
    4428:	2a 95       	dec	r18
    442a:	e2 f7       	brpl	.-8      	; 0x4424 <applymask+0x426>
    442c:	80 81       	ld	r24, Z
    442e:	84 27       	eor	r24, r20
    4430:	80 83       	st	Z, r24
        break;
    case 6:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    4432:	9f 5f       	subi	r25, 0xFF	; 255
    4434:	08 94       	sec
    4436:	61 1c       	adc	r6, r1
    4438:	71 1c       	adc	r7, r1
    443a:	a6 2c       	mov	r10, r6
    443c:	6b 14       	cp	r6, r11
    443e:	38 f2       	brcs	.-114    	; 0x43ce <applymask+0x3d0>
                    TOGQRBIT(x, y);
            }
        }
        break;
    case 6:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    4440:	c3 94       	inc	r12
    4442:	7f 5f       	subi	r23, 0xFF	; 255
    4444:	08 0d       	add	r16, r8
    4446:	19 1d       	adc	r17, r9
    4448:	cb 14       	cp	r12, r11
    444a:	08 f4       	brcc	.+2      	; 0x444e <applymask+0x450>
    444c:	b9 cf       	rjmp	.-142    	; 0x43c0 <applymask+0x3c2>
    444e:	4c c0       	rjmp	.+152    	; 0x44e8 <applymask+0x4ea>
            }
        }
        break;
    case 7:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
    4450:	33 30       	cpi	r19, 0x03	; 3
    4452:	09 f4       	brne	.+2      	; 0x4456 <applymask+0x458>
                r3y = 0;
    4454:	30 e0       	ldi	r19, 0x00	; 0
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    4456:	67 01       	movw	r12, r14
    4458:	22 24       	eor	r2, r2
    445a:	33 24       	eor	r3, r3
    445c:	20 e0       	ldi	r18, 0x00	; 0
    445e:	37 c0       	rjmp	.+110    	; 0x44ce <applymask+0x4d0>
                if (r3x == 3)
    4460:	23 30       	cpi	r18, 0x03	; 3
    4462:	29 f0       	breq	.+10     	; 0x446e <applymask+0x470>
                    r3x = 0;
                if (!(((r3x && (r3x == r3y)) + ((x + y) & 1)) & 1) && !ismasked(x, y))
    4464:	22 23       	and	r18, r18
    4466:	21 f0       	breq	.+8      	; 0x4470 <applymask+0x472>
    4468:	23 17       	cp	r18, r19
    446a:	11 f4       	brne	.+4      	; 0x4470 <applymask+0x472>
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <applymask+0x478>
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
                if (r3x == 3)
                    r3x = 0;
    446e:	20 e0       	ldi	r18, 0x00	; 0
                if (!(((r3x && (r3x == r3y)) + ((x + y) & 1)) & 1) && !ismasked(x, y))
    4470:	40 e0       	ldi	r20, 0x00	; 0
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	02 c0       	rjmp	.+4      	; 0x447a <applymask+0x47c>
    4476:	41 e0       	ldi	r20, 0x01	; 1
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	4c 0d       	add	r20, r12
    447c:	5d 1d       	adc	r21, r13
    447e:	40 fd       	sbrc	r20, 0
    4480:	1f c0       	rjmp	.+62     	; 0x44c0 <applymask+0x4c2>
    4482:	88 2d       	mov	r24, r8
    4484:	6a 2d       	mov	r22, r10
    4486:	2a 83       	std	Y+2, r18	; 0x02
    4488:	39 83       	std	Y+1, r19	; 0x01
    448a:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    448e:	2a 81       	ldd	r18, Y+2	; 0x02
    4490:	39 81       	ldd	r19, Y+1	; 0x01
    4492:	88 23       	and	r24, r24
    4494:	a9 f4       	brne	.+42     	; 0x44c0 <applymask+0x4c2>
                    TOGQRBIT(x, y);
    4496:	86 94       	lsr	r8
    4498:	86 94       	lsr	r8
    449a:	86 94       	lsr	r8
    449c:	f8 01       	movw	r30, r16
    449e:	e8 0d       	add	r30, r8
    44a0:	f1 1d       	adc	r31, r1
    44a2:	ec 58       	subi	r30, 0x8C	; 140
    44a4:	fe 4f       	sbci	r31, 0xFE	; 254
    44a6:	c1 01       	movw	r24, r2
    44a8:	87 70       	andi	r24, 0x07	; 7
    44aa:	90 70       	andi	r25, 0x00	; 0
    44ac:	a3 01       	movw	r20, r6
    44ae:	02 c0       	rjmp	.+4      	; 0x44b4 <applymask+0x4b6>
    44b0:	55 95       	asr	r21
    44b2:	47 95       	ror	r20
    44b4:	8a 95       	dec	r24
    44b6:	e2 f7       	brpl	.-8      	; 0x44b0 <applymask+0x4b2>
    44b8:	ca 01       	movw	r24, r20
    44ba:	40 81       	ld	r20, Z
    44bc:	48 27       	eor	r20, r24
    44be:	40 83       	st	Z, r20
        break;
    case 7:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
            if (r3y == 3)
                r3y = 0;
            for (r3x = 0, x = 0; x < WD; x++, r3x++) {
    44c0:	2f 5f       	subi	r18, 0xFF	; 255
    44c2:	08 94       	sec
    44c4:	21 1c       	adc	r2, r1
    44c6:	31 1c       	adc	r3, r1
    44c8:	08 94       	sec
    44ca:	c1 1c       	adc	r12, r1
    44cc:	d1 1c       	adc	r13, r1
    44ce:	82 2c       	mov	r8, r2
    44d0:	2b 14       	cp	r2, r11
    44d2:	30 f2       	brcs	.-116    	; 0x4460 <applymask+0x462>
                    TOGQRBIT(x, y);
            }
        }
        break;
    case 7:
        for (r3y = 0, y = 0; y < WD; y++, r3y++) {
    44d4:	3f 5f       	subi	r19, 0xFF	; 255
    44d6:	08 94       	sec
    44d8:	e1 1c       	adc	r14, r1
    44da:	f1 1c       	adc	r15, r1
    44dc:	04 0d       	add	r16, r4
    44de:	15 1d       	adc	r17, r5
    44e0:	ae 2c       	mov	r10, r14
    44e2:	eb 14       	cp	r14, r11
    44e4:	08 f4       	brcc	.+2      	; 0x44e8 <applymask+0x4ea>
    44e6:	b4 cf       	rjmp	.-152    	; 0x4450 <applymask+0x452>
            }
        }
        break;
    }
    return;
}
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	cf 91       	pop	r28
    44ee:	df 91       	pop	r29
    44f0:	1f 91       	pop	r17
    44f2:	0f 91       	pop	r16
    44f4:	ff 90       	pop	r15
    44f6:	ef 90       	pop	r14
    44f8:	df 90       	pop	r13
    44fa:	cf 90       	pop	r12
    44fc:	bf 90       	pop	r11
    44fe:	af 90       	pop	r10
    4500:	9f 90       	pop	r9
    4502:	8f 90       	pop	r8
    4504:	7f 90       	pop	r7
    4506:	6f 90       	pop	r6
    4508:	5f 90       	pop	r5
    450a:	4f 90       	pop	r4
    450c:	3f 90       	pop	r3
    450e:	2f 90       	pop	r2
    4510:	08 95       	ret

00004512 <badruns>:
static const unsigned char N2 = 3;
static const unsigned char N3 = 40;
static const unsigned char N4 = 10;

static unsigned badruns(unsigned char length)
{
    4512:	ff 92       	push	r15
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    unsigned char i;
    unsigned runsbad = 0;
    451c:	20 e0       	ldi	r18, 0x00	; 0
    451e:	30 e0       	ldi	r19, 0x00	; 0
    for (i = 0; i <= length; i++)
    4520:	90 e0       	ldi	r25, 0x00	; 0
        if (rlens[i] >= 5)
    4522:	e9 2f       	mov	r30, r25
    4524:	f0 e0       	ldi	r31, 0x00	; 0
    4526:	ef 58       	subi	r30, 0x8F	; 143
    4528:	fb 4f       	sbci	r31, 0xFB	; 251
    452a:	40 81       	ld	r20, Z
    452c:	45 30       	cpi	r20, 0x05	; 5
    452e:	20 f0       	brcs	.+8      	; 0x4538 <badruns+0x26>
            runsbad += N1 + rlens[i] - 5;
    4530:	22 50       	subi	r18, 0x02	; 2
    4532:	30 40       	sbci	r19, 0x00	; 0
    4534:	24 0f       	add	r18, r20
    4536:	31 1d       	adc	r19, r1

static unsigned badruns(unsigned char length)
{
    unsigned char i;
    unsigned runsbad = 0;
    for (i = 0; i <= length; i++)
    4538:	9f 5f       	subi	r25, 0xFF	; 255
    453a:	89 17       	cp	r24, r25
    453c:	90 f7       	brcc	.-28     	; 0x4522 <badruns+0x10>
    453e:	03 e0       	ldi	r16, 0x03	; 3
        if (rlens[i] >= 5)
            runsbad += N1 + rlens[i] - 5;
    // BwBBBwB
    for (i = 3; i < length - 1; i += 2)
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	dc 01       	movw	r26, r24
    4544:	11 97       	sbiw	r26, 0x01	; 1
        if (rlens[i - 2] == rlens[i + 2]
          && rlens[i + 2] == rlens[i - 1]
          && rlens[i - 1] == rlens[i + 1]
          && rlens[i - 1] * 3 == rlens[i]
    4546:	13 e0       	ldi	r17, 0x03	; 3
    4548:	3c c0       	rjmp	.+120    	; 0x45c2 <badruns+0xb0>
    for (i = 0; i <= length; i++)
        if (rlens[i] >= 5)
            runsbad += N1 + rlens[i] - 5;
    // BwBBBwB
    for (i = 3; i < length - 1; i += 2)
        if (rlens[i - 2] == rlens[i + 2]
    454a:	fb 01       	movw	r30, r22
    454c:	ef 58       	subi	r30, 0x8F	; 143
    454e:	fb 4f       	sbci	r31, 0xFB	; 251
    4550:	ef 01       	movw	r28, r30
    4552:	22 97       	sbiw	r28, 0x02	; 2
    4554:	48 81       	ld	r20, Y
    4556:	6e 5f       	subi	r22, 0xFE	; 254
    4558:	7f 4f       	sbci	r23, 0xFF	; 255
    455a:	eb 01       	movw	r28, r22
    455c:	cf 58       	subi	r28, 0x8F	; 143
    455e:	db 4f       	sbci	r29, 0xFB	; 251
    4560:	58 81       	ld	r21, Y
    4562:	45 17       	cp	r20, r21
    4564:	69 f5       	brne	.+90     	; 0x45c0 <badruns+0xae>
          && rlens[i + 2] == rlens[i - 1]
    4566:	ef 01       	movw	r28, r30
    4568:	21 97       	sbiw	r28, 0x01	; 1
    456a:	58 81       	ld	r21, Y
    456c:	45 17       	cp	r20, r21
    456e:	41 f5       	brne	.+80     	; 0x45c0 <badruns+0xae>
          && rlens[i - 1] == rlens[i + 1]
    4570:	51 81       	ldd	r21, Z+1	; 0x01
    4572:	45 17       	cp	r20, r21
    4574:	29 f5       	brne	.+74     	; 0x45c0 <badruns+0xae>
          && rlens[i - 1] * 3 == rlens[i]
    4576:	41 9f       	mul	r20, r17
    4578:	a0 01       	movw	r20, r0
    457a:	11 24       	eor	r1, r1
    457c:	f0 80       	ld	r15, Z
    457e:	cf 2d       	mov	r28, r15
    4580:	d0 e0       	ldi	r29, 0x00	; 0
    4582:	4c 17       	cp	r20, r28
    4584:	5d 07       	cpc	r21, r29
    4586:	e1 f4       	brne	.+56     	; 0x45c0 <badruns+0xae>
          // white around the black pattern?  Not part of spec
          && (rlens[i - 3] == 0 // beginning
    4588:	ef 01       	movw	r28, r30
    458a:	23 97       	sbiw	r28, 0x03	; 3
    458c:	f8 80       	ld	r15, Y
    458e:	ff 20       	and	r15, r15
    4590:	a9 f0       	breq	.+42     	; 0x45bc <badruns+0xaa>
            || i + 3 > length   // end
    4592:	68 17       	cp	r22, r24
    4594:	79 07       	cpc	r23, r25
    4596:	94 f4       	brge	.+36     	; 0x45bc <badruns+0xaa>
            || rlens[i - 3] * 3 >= rlens[i] * 4 || rlens[i + 3] * 3 >= rlens[i] * 4)
    4598:	44 0f       	add	r20, r20
    459a:	55 1f       	adc	r21, r21
    459c:	44 0f       	add	r20, r20
    459e:	55 1f       	adc	r21, r21
    45a0:	6f 2d       	mov	r22, r15
    45a2:	61 9f       	mul	r22, r17
    45a4:	e0 01       	movw	r28, r0
    45a6:	11 24       	eor	r1, r1
    45a8:	c4 17       	cp	r28, r20
    45aa:	d5 07       	cpc	r29, r21
    45ac:	3c f4       	brge	.+14     	; 0x45bc <badruns+0xaa>
    45ae:	63 81       	ldd	r22, Z+3	; 0x03
    45b0:	61 9f       	mul	r22, r17
    45b2:	b0 01       	movw	r22, r0
    45b4:	11 24       	eor	r1, r1
    45b6:	64 17       	cp	r22, r20
    45b8:	75 07       	cpc	r23, r21
    45ba:	14 f0       	brlt	.+4      	; 0x45c0 <badruns+0xae>
          )
            runsbad += N3;
    45bc:	28 5d       	subi	r18, 0xD8	; 216
    45be:	3f 4f       	sbci	r19, 0xFF	; 255
    unsigned runsbad = 0;
    for (i = 0; i <= length; i++)
        if (rlens[i] >= 5)
            runsbad += N1 + rlens[i] - 5;
    // BwBBBwB
    for (i = 3; i < length - 1; i += 2)
    45c0:	0e 5f       	subi	r16, 0xFE	; 254
    45c2:	60 2f       	mov	r22, r16
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	6a 17       	cp	r22, r26
    45c8:	7b 07       	cpc	r23, r27
    45ca:	0c f4       	brge	.+2      	; 0x45ce <badruns+0xbc>
    45cc:	be cf       	rjmp	.-132    	; 0x454a <badruns+0x38>
            || i + 3 > length   // end
            || rlens[i - 3] * 3 >= rlens[i] * 4 || rlens[i + 3] * 3 >= rlens[i] * 4)
          )
            runsbad += N3;
    return runsbad;
}
    45ce:	c9 01       	movw	r24, r18
    45d0:	df 91       	pop	r29
    45d2:	cf 91       	pop	r28
    45d4:	1f 91       	pop	r17
    45d6:	0f 91       	pop	r16
    45d8:	ff 90       	pop	r15
    45da:	08 95       	ret

000045dc <appendrs.clone.0>:
    }
    for (i = 0; i <= eclen; i++)
        genpoly[i] = glog(genpoly[i]);     // use logs for genpoly[]
}

static void appendrs(unsigned char *data, unsigned char dlen, 
    45dc:	2f 92       	push	r2
    45de:	3f 92       	push	r3
    45e0:	4f 92       	push	r4
    45e2:	5f 92       	push	r5
    45e4:	6f 92       	push	r6
    45e6:	7f 92       	push	r7
    45e8:	8f 92       	push	r8
    45ea:	9f 92       	push	r9
    45ec:	af 92       	push	r10
    45ee:	bf 92       	push	r11
    45f0:	cf 92       	push	r12
    45f2:	df 92       	push	r13
    45f4:	ef 92       	push	r14
    45f6:	ff 92       	push	r15
    45f8:	0f 93       	push	r16
    45fa:	1f 93       	push	r17
    45fc:	df 93       	push	r29
    45fe:	cf 93       	push	r28
    4600:	cd b7       	in	r28, 0x3d	; 61
    4602:	de b7       	in	r29, 0x3e	; 62
    4604:	27 97       	sbiw	r28, 0x07	; 7
    4606:	0f b6       	in	r0, 0x3f	; 63
    4608:	f8 94       	cli
    460a:	de bf       	out	0x3e, r29	; 62
    460c:	0f be       	out	0x3f, r0	; 63
    460e:	cd bf       	out	0x3d, r28	; 61
    4610:	a8 2e       	mov	r10, r24
    4612:	e9 2e       	mov	r14, r25
    4614:	66 2e       	mov	r6, r22
    4616:	5f 83       	std	Y+7, r21	; 0x07
    4618:	4e 83       	std	Y+6, r20	; 0x06
    461a:	b2 2e       	mov	r11, r18
              unsigned char *ecbuf, unsigned char eclen, unsigned char *genpoly)
{
    unsigned char i, j, fb;

    memset(ecbuf, 0, eclen);
    461c:	02 2f       	mov	r16, r18
    461e:	10 e0       	ldi	r17, 0x00	; 0
    4620:	8e 81       	ldd	r24, Y+6	; 0x06
    4622:	9f 81       	ldd	r25, Y+7	; 0x07
    4624:	60 e0       	ldi	r22, 0x00	; 0
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	42 2f       	mov	r20, r18
    462a:	50 e0       	ldi	r21, 0x00	; 0
    462c:	0e 94 89 33 	call	0x6712	; 0x6712 <memset>
    4630:	8a 2c       	mov	r8, r10
    4632:	9e 2c       	mov	r9, r14
        fb = glog(data[i] ^ ecbuf[0]);
        if (fb != 255)          /* fb term is non-zero */
            for (j = 1; j < eclen; j++)
                ecbuf[j-1] = ecbuf[j] ^ gexp(modnn(fb + genpoly[eclen - j]));
        else
            memmove(ecbuf, ecbuf + 1, eclen - 1);
    4634:	4e 80       	ldd	r4, Y+6	; 0x06
    4636:	5f 80       	ldd	r5, Y+7	; 0x07
    4638:	08 94       	sec
    463a:	41 1c       	adc	r4, r1
    463c:	51 1c       	adc	r5, r1
    463e:	01 50       	subi	r16, 0x01	; 1
    4640:	10 40       	sbci	r17, 0x00	; 0
    }
    for (i = 0; i <= eclen; i++)
        genpoly[i] = glog(genpoly[i]);     // use logs for genpoly[]
}

static void appendrs(unsigned char *data, unsigned char dlen, 
    4642:	98 01       	movw	r18, r16
    4644:	2b 58       	subi	r18, 0x8B	; 139
    4646:	3e 4f       	sbci	r19, 0xFE	; 254
    4648:	3a 83       	std	Y+2, r19	; 0x02
    464a:	29 83       	std	Y+1, r18	; 0x01
        if (fb != 255)          /* fb term is non-zero */
            for (j = 1; j < eclen; j++)
                ecbuf[j-1] = ecbuf[j] ^ gexp(modnn(fb + genpoly[eclen - j]));
        else
            memmove(ecbuf, ecbuf + 1, eclen - 1);
        ecbuf[eclen - 1] = fb == 255 ? 0 : gexp(modnn(fb + genpoly[0]));
    464c:	4e 81       	ldd	r20, Y+6	; 0x06
    464e:	5f 81       	ldd	r21, Y+7	; 0x07
    4650:	40 0f       	add	r20, r16
    4652:	51 1f       	adc	r21, r17
    4654:	5c 83       	std	Y+4, r21	; 0x04
    4656:	4b 83       	std	Y+3, r20	; 0x03
    4658:	48 c0       	rjmp	.+144    	; 0x46ea <appendrs.clone.0+0x10e>
{
    unsigned char i, j, fb;

    memset(ecbuf, 0, eclen);
    for (i = 0; i < dlen; i++) {
        fb = glog(data[i] ^ ecbuf[0]);
    465a:	d4 01       	movw	r26, r8
    465c:	ed 91       	ld	r30, X+
    465e:	4d 01       	movw	r8, r26
    4660:	ae 81       	ldd	r26, Y+6	; 0x06
    4662:	bf 81       	ldd	r27, Y+7	; 0x07
    4664:	8c 91       	ld	r24, X
    4666:	e8 27       	eor	r30, r24
    4668:	f0 e0       	ldi	r31, 0x00	; 0
    466a:	eb 52       	subi	r30, 0x2B	; 43
    466c:	f7 4d       	sbci	r31, 0xD7	; 215
    466e:	24 91       	lpm	r18, Z+
        if (fb != 255)          /* fb term is non-zero */
    4670:	2f 3f       	cpi	r18, 0xFF	; 255
    4672:	11 f1       	breq	.+68     	; 0x46b8 <appendrs.clone.0+0xdc>
    }
    for (i = 0; i <= eclen; i++)
        genpoly[i] = glog(genpoly[i]);     // use logs for genpoly[]
}

static void appendrs(unsigned char *data, unsigned char dlen, 
    4674:	c9 80       	ldd	r12, Y+1	; 0x01
    4676:	da 80       	ldd	r13, Y+2	; 0x02
    unsigned char i, j, fb;

    memset(ecbuf, 0, eclen);
    for (i = 0; i < dlen; i++) {
        fb = glog(data[i] ^ ecbuf[0]);
        if (fb != 255)          /* fb term is non-zero */
    4678:	7d 01       	movw	r14, r26
    }
    for (i = 0; i <= eclen; i++)
        genpoly[i] = glog(genpoly[i]);     // use logs for genpoly[]
}

static void appendrs(unsigned char *data, unsigned char dlen, 
    467a:	77 24       	eor	r7, r7
    467c:	73 94       	inc	r7
    memset(ecbuf, 0, eclen);
    for (i = 0; i < dlen; i++) {
        fb = glog(data[i] ^ ecbuf[0]);
        if (fb != 255)          /* fb term is non-zero */
            for (j = 1; j < eclen; j++)
                ecbuf[j-1] = ecbuf[j] ^ gexp(modnn(fb + genpoly[eclen - j]));
    467e:	22 2e       	mov	r2, r18
    4680:	33 24       	eor	r3, r3
    4682:	17 c0       	rjmp	.+46     	; 0x46b2 <appendrs.clone.0+0xd6>
    4684:	f6 01       	movw	r30, r12
    4686:	82 91       	ld	r24, -Z
    4688:	6f 01       	movw	r12, r30
    468a:	a1 01       	movw	r20, r2
    468c:	48 0f       	add	r20, r24
    468e:	51 1d       	adc	r21, r1
    4690:	ca 01       	movw	r24, r20
    4692:	2d 83       	std	Y+5, r18	; 0x05
    4694:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <modnn>
    4698:	fc 01       	movw	r30, r24
    469a:	eb 52       	subi	r30, 0x2B	; 43
    469c:	f6 4d       	sbci	r31, 0xD6	; 214
    469e:	e4 91       	lpm	r30, Z+
    46a0:	d7 01       	movw	r26, r14
    46a2:	11 96       	adiw	r26, 0x01	; 1
    46a4:	8c 91       	ld	r24, X
    46a6:	11 97       	sbiw	r26, 0x01	; 1
    46a8:	e8 27       	eor	r30, r24
    46aa:	ed 93       	st	X+, r30
    46ac:	7d 01       	movw	r14, r26

    memset(ecbuf, 0, eclen);
    for (i = 0; i < dlen; i++) {
        fb = glog(data[i] ^ ecbuf[0]);
        if (fb != 255)          /* fb term is non-zero */
            for (j = 1; j < eclen; j++)
    46ae:	73 94       	inc	r7
    46b0:	2d 81       	ldd	r18, Y+5	; 0x05
    46b2:	7b 14       	cp	r7, r11
    46b4:	38 f3       	brcs	.-50     	; 0x4684 <appendrs.clone.0+0xa8>
    46b6:	07 c0       	rjmp	.+14     	; 0x46c6 <appendrs.clone.0+0xea>
                ecbuf[j-1] = ecbuf[j] ^ gexp(modnn(fb + genpoly[eclen - j]));
        else
            memmove(ecbuf, ecbuf + 1, eclen - 1);
    46b8:	8e 81       	ldd	r24, Y+6	; 0x06
    46ba:	9f 81       	ldd	r25, Y+7	; 0x07
    46bc:	b2 01       	movw	r22, r4
    46be:	a8 01       	movw	r20, r16
    46c0:	0e 94 77 33 	call	0x66ee	; 0x66ee <memmove>
    46c4:	0e c0       	rjmp	.+28     	; 0x46e2 <appendrs.clone.0+0x106>
        ecbuf[eclen - 1] = fb == 255 ? 0 : gexp(modnn(fb + genpoly[0]));
    46c6:	2f 3f       	cpi	r18, 0xFF	; 255
    46c8:	61 f0       	breq	.+24     	; 0x46e2 <appendrs.clone.0+0x106>
    46ca:	80 91 74 01 	lds	r24, 0x0174
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	82 0f       	add	r24, r18
    46d2:	91 1d       	adc	r25, r1
    46d4:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <modnn>
    46d8:	fc 01       	movw	r30, r24
    46da:	eb 52       	subi	r30, 0x2B	; 43
    46dc:	f6 4d       	sbci	r31, 0xD6	; 214
    46de:	e4 91       	lpm	r30, Z+
    46e0:	01 c0       	rjmp	.+2      	; 0x46e4 <appendrs.clone.0+0x108>
    46e2:	e0 e0       	ldi	r30, 0x00	; 0
    46e4:	ab 81       	ldd	r26, Y+3	; 0x03
    46e6:	bc 81       	ldd	r27, Y+4	; 0x04
    46e8:	ec 93       	st	X, r30
              unsigned char *ecbuf, unsigned char eclen, unsigned char *genpoly)
{
    unsigned char i, j, fb;

    memset(ecbuf, 0, eclen);
    for (i = 0; i < dlen; i++) {
    46ea:	88 2d       	mov	r24, r8
    46ec:	8a 19       	sub	r24, r10
    46ee:	86 15       	cp	r24, r6
    46f0:	08 f4       	brcc	.+2      	; 0x46f4 <appendrs.clone.0+0x118>
    46f2:	b3 cf       	rjmp	.-154    	; 0x465a <appendrs.clone.0+0x7e>
                ecbuf[j-1] = ecbuf[j] ^ gexp(modnn(fb + genpoly[eclen - j]));
        else
            memmove(ecbuf, ecbuf + 1, eclen - 1);
        ecbuf[eclen - 1] = fb == 255 ? 0 : gexp(modnn(fb + genpoly[0]));
    }
}
    46f4:	27 96       	adiw	r28, 0x07	; 7
    46f6:	0f b6       	in	r0, 0x3f	; 63
    46f8:	f8 94       	cli
    46fa:	de bf       	out	0x3e, r29	; 62
    46fc:	0f be       	out	0x3f, r0	; 63
    46fe:	cd bf       	out	0x3d, r28	; 61
    4700:	cf 91       	pop	r28
    4702:	df 91       	pop	r29
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	ff 90       	pop	r15
    470a:	ef 90       	pop	r14
    470c:	df 90       	pop	r13
    470e:	cf 90       	pop	r12
    4710:	bf 90       	pop	r11
    4712:	af 90       	pop	r10
    4714:	9f 90       	pop	r9
    4716:	8f 90       	pop	r8
    4718:	7f 90       	pop	r7
    471a:	6f 90       	pop	r6
    471c:	5f 90       	pop	r5
    471e:	4f 90       	pop	r4
    4720:	3f 90       	pop	r3
    4722:	2f 90       	pop	r2
    4724:	08 95       	ret

00004726 <qrencode>:
                SETQRBIT(7, 8);
        }
}

void qrencode()
{
    4726:	2f 92       	push	r2
    4728:	3f 92       	push	r3
    472a:	4f 92       	push	r4
    472c:	5f 92       	push	r5
    472e:	6f 92       	push	r6
    4730:	7f 92       	push	r7
    4732:	8f 92       	push	r8
    4734:	9f 92       	push	r9
    4736:	af 92       	push	r10
    4738:	bf 92       	push	r11
    473a:	cf 92       	push	r12
    473c:	df 92       	push	r13
    473e:	ef 92       	push	r14
    4740:	ff 92       	push	r15
    4742:	0f 93       	push	r16
    4744:	1f 93       	push	r17
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	2f 97       	sbiw	r28, 0x0f	; 15
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	f8 94       	cli
    4754:	de bf       	out	0x3e, r29	; 62
    4756:	0f be       	out	0x3f, r0	; 63
    4758:	cd bf       	out	0x3d, r28	; 61
// 8 bit data to QR-coded 8 bit data
static void stringtoqr(void)
{
    unsigned i;
    unsigned size, max;
    size = strlen((char *) strinbuf);
    475a:	ec ec       	ldi	r30, 0xCC	; 204
    475c:	f3 e0       	ldi	r31, 0x03	; 3
    475e:	01 90       	ld	r0, Z+
    4760:	00 20       	and	r0, r0
    4762:	e9 f7       	brne	.-6      	; 0x475e <qrencode+0x38>
    4764:	31 97       	sbiw	r30, 0x01	; 1
    4766:	ec 5c       	subi	r30, 0xCC	; 204
    4768:	f3 40       	sbci	r31, 0x03	; 3

    max = datablkw * (neccblk1 + neccblk2) + neccblk2;
    476a:	80 91 41 01 	lds	r24, 0x0141
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	20 91 40 01 	lds	r18, 0x0140
    4774:	ac 01       	movw	r20, r24
    4776:	42 0f       	add	r20, r18
    4778:	51 1d       	adc	r21, r1
    477a:	20 91 42 01 	lds	r18, 0x0142
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	42 9f       	mul	r20, r18
    4782:	30 01       	movw	r6, r0
    4784:	43 9f       	mul	r20, r19
    4786:	70 0c       	add	r7, r0
    4788:	52 9f       	mul	r21, r18
    478a:	70 0c       	add	r7, r0
    478c:	11 24       	eor	r1, r1
    478e:	68 0e       	add	r6, r24
    4790:	79 1e       	adc	r7, r25
    if (size >= max - 2) {
    4792:	c3 01       	movw	r24, r6
    4794:	02 97       	sbiw	r24, 0x02	; 2
    4796:	e8 17       	cp	r30, r24
    4798:	f9 07       	cpc	r31, r25
    479a:	40 f0       	brcs	.+16     	; 0x47ac <qrencode+0x86>
        size = max - 2;
        if (VERSION > 9)
    479c:	20 91 44 01 	lds	r18, 0x0144
    47a0:	2a 30       	cpi	r18, 0x0A	; 10
    47a2:	18 f0       	brcs	.+6      	; 0x47aa <qrencode+0x84>
            size--;
    47a4:	f3 01       	movw	r30, r6
    47a6:	33 97       	sbiw	r30, 0x03	; 3
    47a8:	01 c0       	rjmp	.+2      	; 0x47ac <qrencode+0x86>
    size = strlen((char *) strinbuf);

    max = datablkw * (neccblk1 + neccblk2) + neccblk2;
    if (size >= max - 2) {
        size = max - 2;
        if (VERSION > 9)
    47aa:	fc 01       	movw	r30, r24
            size--;
    }

    i = size;
    if (VERSION > 9) {
    47ac:	30 91 44 01 	lds	r19, 0x0144
    47b0:	df 01       	movw	r26, r30
    47b2:	a4 53       	subi	r26, 0x34	; 52
    47b4:	bc 4f       	sbci	r27, 0xFC	; 252
    47b6:	3a 30       	cpi	r19, 0x0A	; 10
    47b8:	68 f1       	brcs	.+90     	; 0x4814 <qrencode+0xee>
        strinbuf[i + 2] = 0;
    47ba:	12 96       	adiw	r26, 0x02	; 2
    47bc:	1c 92       	st	X, r1
    47be:	12 97       	sbiw	r26, 0x02	; 2
        size = max - 2;
        if (VERSION > 9)
            size--;
    }

    i = size;
    47c0:	cf 01       	movw	r24, r30
    47c2:	11 c0       	rjmp	.+34     	; 0x47e6 <qrencode+0xc0>
    if (VERSION > 9) {
        strinbuf[i + 2] = 0;
        while (i--) {
    47c4:	01 97       	sbiw	r24, 0x01	; 1
            strinbuf[i + 3] |= strinbuf[i] << 4;
    47c6:	4c 91       	ld	r20, X
    47c8:	24 2f       	mov	r18, r20
    47ca:	22 95       	swap	r18
    47cc:	20 7f       	andi	r18, 0xF0	; 240
    47ce:	13 96       	adiw	r26, 0x03	; 3
    47d0:	5c 91       	ld	r21, X
    47d2:	13 97       	sbiw	r26, 0x03	; 3
    47d4:	25 2b       	or	r18, r21
    47d6:	13 96       	adiw	r26, 0x03	; 3
    47d8:	2c 93       	st	X, r18
    47da:	13 97       	sbiw	r26, 0x03	; 3
            strinbuf[i + 2] = strinbuf[i] >> 4;
    47dc:	42 95       	swap	r20
    47de:	4f 70       	andi	r20, 0x0F	; 15
    47e0:	12 96       	adiw	r26, 0x02	; 2
    47e2:	4c 93       	st	X, r20
    47e4:	12 97       	sbiw	r26, 0x02	; 2
    47e6:	11 97       	sbiw	r26, 0x01	; 1
    }

    i = size;
    if (VERSION > 9) {
        strinbuf[i + 2] = 0;
        while (i--) {
    47e8:	00 97       	sbiw	r24, 0x00	; 0
    47ea:	61 f7       	brne	.-40     	; 0x47c4 <qrencode+0x9e>
            strinbuf[i + 3] |= strinbuf[i] << 4;
            strinbuf[i + 2] = strinbuf[i] >> 4;
        }
        strinbuf[2] |= size << 4;
    47ec:	8e 2f       	mov	r24, r30
    47ee:	82 95       	swap	r24
    47f0:	80 7f       	andi	r24, 0xF0	; 240
    47f2:	90 91 ce 03 	lds	r25, 0x03CE
    47f6:	89 2b       	or	r24, r25
    47f8:	80 93 ce 03 	sts	0x03CE, r24
        strinbuf[1] = size >> 4;
    47fc:	cf 01       	movw	r24, r30
    47fe:	64 e0       	ldi	r22, 0x04	; 4
    4800:	96 95       	lsr	r25
    4802:	87 95       	ror	r24
    4804:	6a 95       	dec	r22
    4806:	e1 f7       	brne	.-8      	; 0x4800 <qrencode+0xda>
    4808:	80 93 cd 03 	sts	0x03CD, r24
        strinbuf[0] = 0x40 | (size >> 12);
    480c:	8f 2f       	mov	r24, r31
    480e:	82 95       	swap	r24
    4810:	8f 70       	andi	r24, 0x0F	; 15
    4812:	27 c0       	rjmp	.+78     	; 0x4862 <qrencode+0x13c>
    } else {
        strinbuf[i + 1] = 0;
    4814:	11 96       	adiw	r26, 0x01	; 1
    4816:	1c 92       	st	X, r1
    4818:	11 97       	sbiw	r26, 0x01	; 1
        size = max - 2;
        if (VERSION > 9)
            size--;
    }

    i = size;
    481a:	cf 01       	movw	r24, r30
    481c:	11 c0       	rjmp	.+34     	; 0x4840 <qrencode+0x11a>
        strinbuf[2] |= size << 4;
        strinbuf[1] = size >> 4;
        strinbuf[0] = 0x40 | (size >> 12);
    } else {
        strinbuf[i + 1] = 0;
        while (i--) {
    481e:	01 97       	sbiw	r24, 0x01	; 1
            strinbuf[i + 2] |= strinbuf[i] << 4;
    4820:	4c 91       	ld	r20, X
    4822:	24 2f       	mov	r18, r20
    4824:	22 95       	swap	r18
    4826:	20 7f       	andi	r18, 0xF0	; 240
    4828:	12 96       	adiw	r26, 0x02	; 2
    482a:	5c 91       	ld	r21, X
    482c:	12 97       	sbiw	r26, 0x02	; 2
    482e:	25 2b       	or	r18, r21
    4830:	12 96       	adiw	r26, 0x02	; 2
    4832:	2c 93       	st	X, r18
    4834:	12 97       	sbiw	r26, 0x02	; 2
            strinbuf[i + 1] = strinbuf[i] >> 4;
    4836:	42 95       	swap	r20
    4838:	4f 70       	andi	r20, 0x0F	; 15
    483a:	11 96       	adiw	r26, 0x01	; 1
    483c:	4c 93       	st	X, r20
    483e:	11 97       	sbiw	r26, 0x01	; 1
    4840:	11 97       	sbiw	r26, 0x01	; 1
        strinbuf[2] |= size << 4;
        strinbuf[1] = size >> 4;
        strinbuf[0] = 0x40 | (size >> 12);
    } else {
        strinbuf[i + 1] = 0;
        while (i--) {
    4842:	00 97       	sbiw	r24, 0x00	; 0
    4844:	61 f7       	brne	.-40     	; 0x481e <qrencode+0xf8>
            strinbuf[i + 2] |= strinbuf[i] << 4;
            strinbuf[i + 1] = strinbuf[i] >> 4;
        }
        strinbuf[1] |= size << 4;
    4846:	8e 2f       	mov	r24, r30
    4848:	82 95       	swap	r24
    484a:	80 7f       	andi	r24, 0xF0	; 240
    484c:	90 91 cd 03 	lds	r25, 0x03CD
    4850:	89 2b       	or	r24, r25
    4852:	80 93 cd 03 	sts	0x03CD, r24
        strinbuf[0] = 0x40 | (size >> 4);
    4856:	cf 01       	movw	r24, r30
    4858:	54 e0       	ldi	r21, 0x04	; 4
    485a:	96 95       	lsr	r25
    485c:	87 95       	ror	r24
    485e:	5a 95       	dec	r21
    4860:	e1 f7       	brne	.-8      	; 0x485a <qrencode+0x134>
    4862:	80 64       	ori	r24, 0x40	; 64
    4864:	80 93 cc 03 	sts	0x03CC, r24
    }
    i = size + 3 - (VERSION < 10);
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	3a 30       	cpi	r19, 0x0A	; 10
    486e:	10 f0       	brcs	.+4      	; 0x4874 <qrencode+0x14e>
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	e8 1b       	sub	r30, r24
    4876:	f9 0b       	sbc	r31, r25
    4878:	33 96       	adiw	r30, 0x03	; 3
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    487a:	df 01       	movw	r26, r30
    487c:	a4 53       	subi	r26, 0x34	; 52
    487e:	bc 4f       	sbci	r27, 0xFC	; 252
        strinbuf[1] |= size << 4;
        strinbuf[0] = 0x40 | (size >> 4);
    }
    i = size + 3 - (VERSION < 10);
    while (i < max) {
        strinbuf[i++] = 0xec;
    4880:	9c ee       	ldi	r25, 0xEC	; 236
        // buffer has room        if (i == max)            break;
        strinbuf[i++] = 0x11;
    4882:	81 e1       	ldi	r24, 0x11	; 17
    4884:	06 c0       	rjmp	.+12     	; 0x4892 <qrencode+0x16c>
        strinbuf[1] |= size << 4;
        strinbuf[0] = 0x40 | (size >> 4);
    }
    i = size + 3 - (VERSION < 10);
    while (i < max) {
        strinbuf[i++] = 0xec;
    4886:	9c 93       	st	X, r25
        // buffer has room        if (i == max)            break;
        strinbuf[i++] = 0x11;
    4888:	11 96       	adiw	r26, 0x01	; 1
    488a:	8c 93       	st	X, r24
    488c:	11 97       	sbiw	r26, 0x01	; 1
    488e:	32 96       	adiw	r30, 0x02	; 2
    4890:	12 96       	adiw	r26, 0x02	; 2
        }
        strinbuf[1] |= size << 4;
        strinbuf[0] = 0x40 | (size >> 4);
    }
    i = size + 3 - (VERSION < 10);
    while (i < max) {
    4892:	e6 15       	cp	r30, r6
    4894:	f7 05       	cpc	r31, r7
    4896:	b8 f3       	brcs	.-18     	; 0x4886 <qrencode+0x160>
        // buffer has room        if (i == max)            break;
        strinbuf[i++] = 0x11;
    }

    // calculate and append ECC
    unsigned char *ecc = &strinbuf[max];
    4898:	93 01       	movw	r18, r6
    489a:	24 53       	subi	r18, 0x34	; 52
    489c:	3c 4f       	sbci	r19, 0xFC	; 252
    unsigned char *dat = strinbuf;
    initrspoly(eccblkwid,qrframe);
    489e:	90 90 43 01 	lds	r9, 0x0143

#ifdef RTGENEXPLOG
    gentables();
#endif

    genpoly[0] = 1;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	80 93 74 01 	sts	0x0174, r24
    48a8:	45 e7       	ldi	r20, 0x75	; 117
    48aa:	51 e0       	ldi	r21, 0x01	; 1
    48ac:	5c 83       	std	Y+4, r21	; 0x04
    48ae:	4b 83       	std	Y+3, r20	; 0x03
    48b0:	00 e0       	ldi	r16, 0x00	; 0
    48b2:	10 e0       	ldi	r17, 0x00	; 0
    for (i = 0; i < eclen; i++) {
        genpoly[i + 1] = 1;
    48b4:	33 24       	eor	r3, r3
    48b6:	33 94       	inc	r3
    48b8:	79 01       	movw	r14, r18
    48ba:	5a 83       	std	Y+2, r21	; 0x02
    48bc:	49 83       	std	Y+1, r20	; 0x01
    48be:	46 c0       	rjmp	.+140    	; 0x494c <qrencode+0x226>
    48c0:	a9 81       	ldd	r26, Y+1	; 0x01
    48c2:	ba 81       	ldd	r27, Y+2	; 0x02
    48c4:	3d 92       	st	X+, r3
    48c6:	ba 83       	std	Y+2, r27	; 0x02
    48c8:	a9 83       	std	Y+1, r26	; 0x01
    48ca:	b0 2e       	mov	r11, r16
        for (j = i; j > 0; j--)
            genpoly[j] = genpoly[j]
                ? genpoly[j - 1] ^ gexp(modnn(glog(genpoly[j]) + i)) : genpoly[j - 1];
    48cc:	20 2f       	mov	r18, r16
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	28 c0       	rjmp	.+80     	; 0x4922 <qrencode+0x1fc>

    genpoly[0] = 1;
    for (i = 0; i < eclen; i++) {
        genpoly[i + 1] = 1;
        for (j = i; j > 0; j--)
            genpoly[j] = genpoly[j]
    48d2:	4b 2c       	mov	r4, r11
    48d4:	55 24       	eor	r5, r5
    48d6:	d2 01       	movw	r26, r4
    48d8:	ac 58       	subi	r26, 0x8C	; 140
    48da:	be 4f       	sbci	r27, 0xFE	; 254
    48dc:	ec 91       	ld	r30, X
    48de:	6d 01       	movw	r12, r26
    48e0:	08 94       	sec
    48e2:	c1 08       	sbc	r12, r1
    48e4:	d1 08       	sbc	r13, r1
    48e6:	ee 23       	and	r30, r30
    48e8:	a9 f0       	breq	.+42     	; 0x4914 <qrencode+0x1ee>
                ? genpoly[j - 1] ^ gexp(modnn(glog(genpoly[j]) + i)) : genpoly[j - 1];
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	eb 52       	subi	r30, 0x2B	; 43
    48ee:	f7 4d       	sbci	r31, 0xD7	; 215
    48f0:	e4 91       	lpm	r30, Z+
    48f2:	c9 01       	movw	r24, r18
    48f4:	8e 0f       	add	r24, r30
    48f6:	91 1d       	adc	r25, r1
    48f8:	2b 87       	std	Y+11, r18	; 0x0b
    48fa:	3c 87       	std	Y+12, r19	; 0x0c
    48fc:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <modnn>
    4900:	fc 01       	movw	r30, r24
    4902:	eb 52       	subi	r30, 0x2B	; 43
    4904:	f6 4d       	sbci	r31, 0xD6	; 214
    4906:	e4 91       	lpm	r30, Z+

    genpoly[0] = 1;
    for (i = 0; i < eclen; i++) {
        genpoly[i + 1] = 1;
        for (j = i; j > 0; j--)
            genpoly[j] = genpoly[j]
    4908:	d6 01       	movw	r26, r12
    490a:	8c 91       	ld	r24, X
    490c:	e8 27       	eor	r30, r24
    490e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4910:	3c 85       	ldd	r19, Y+12	; 0x0c
    4912:	02 c0       	rjmp	.+4      	; 0x4918 <qrencode+0x1f2>
    4914:	d6 01       	movw	r26, r12
    4916:	ec 91       	ld	r30, X
    4918:	d2 01       	movw	r26, r4
    491a:	ac 58       	subi	r26, 0x8C	; 140
    491c:	be 4f       	sbci	r27, 0xFE	; 254
    491e:	ec 93       	st	X, r30
#endif

    genpoly[0] = 1;
    for (i = 0; i < eclen; i++) {
        genpoly[i + 1] = 1;
        for (j = i; j > 0; j--)
    4920:	ba 94       	dec	r11
    4922:	bb 20       	and	r11, r11
    4924:	b1 f6       	brne	.-84     	; 0x48d2 <qrencode+0x1ac>
            genpoly[j] = genpoly[j]
                ? genpoly[j - 1] ^ gexp(modnn(glog(genpoly[j]) + i)) : genpoly[j - 1];
        genpoly[0] = gexp(modnn(glog(genpoly[0]) + i));
    4926:	e0 91 74 01 	lds	r30, 0x0174
    492a:	f0 e0       	ldi	r31, 0x00	; 0
    492c:	eb 52       	subi	r30, 0x2B	; 43
    492e:	f7 4d       	sbci	r31, 0xD7	; 215
    4930:	e4 91       	lpm	r30, Z+
    4932:	c8 01       	movw	r24, r16
    4934:	8e 0f       	add	r24, r30
    4936:	91 1d       	adc	r25, r1
    4938:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <modnn>
    493c:	fc 01       	movw	r30, r24
    493e:	eb 52       	subi	r30, 0x2B	; 43
    4940:	f6 4d       	sbci	r31, 0xD6	; 214
    4942:	e4 91       	lpm	r30, Z+
    4944:	e0 93 74 01 	sts	0x0174, r30
    4948:	0f 5f       	subi	r16, 0xFF	; 255
    494a:	1f 4f       	sbci	r17, 0xFF	; 255
#ifdef RTGENEXPLOG
    gentables();
#endif

    genpoly[0] = 1;
    for (i = 0; i < eclen; i++) {
    494c:	09 15       	cp	r16, r9
    494e:	08 f4       	brcc	.+2      	; 0x4952 <qrencode+0x22c>
    4950:	b7 cf       	rjmp	.-146    	; 0x48c0 <qrencode+0x19a>
    4952:	97 01       	movw	r18, r14
    4954:	80 e0       	ldi	r24, 0x00	; 0
            genpoly[j] = genpoly[j]
                ? genpoly[j - 1] ^ gexp(modnn(glog(genpoly[j]) + i)) : genpoly[j - 1];
        genpoly[0] = gexp(modnn(glog(genpoly[0]) + i));
    }
    for (i = 0; i <= eclen; i++)
        genpoly[i] = glog(genpoly[i]);     // use logs for genpoly[]
    4956:	a8 2f       	mov	r26, r24
    4958:	b0 e0       	ldi	r27, 0x00	; 0
    495a:	ac 58       	subi	r26, 0x8C	; 140
    495c:	be 4f       	sbci	r27, 0xFE	; 254
    495e:	ec 91       	ld	r30, X
    4960:	f0 e0       	ldi	r31, 0x00	; 0
    4962:	eb 52       	subi	r30, 0x2B	; 43
    4964:	f7 4d       	sbci	r31, 0xD7	; 215
    4966:	e4 91       	lpm	r30, Z+
    4968:	ec 93       	st	X, r30
        for (j = i; j > 0; j--)
            genpoly[j] = genpoly[j]
                ? genpoly[j - 1] ^ gexp(modnn(glog(genpoly[j]) + i)) : genpoly[j - 1];
        genpoly[0] = gexp(modnn(glog(genpoly[0]) + i));
    }
    for (i = 0; i <= eclen; i++)
    496a:	8f 5f       	subi	r24, 0xFF	; 255
    496c:	98 16       	cp	r9, r24
    496e:	98 f7       	brcc	.-26     	; 0x4956 <qrencode+0x230>
    4970:	0c ec       	ldi	r16, 0xCC	; 204
    4972:	13 e0       	ldi	r17, 0x03	; 3
    4974:	ee 24       	eor	r14, r14
    4976:	ff 24       	eor	r15, r15
    4978:	69 01       	movw	r12, r18
    497a:	13 c0       	rjmp	.+38     	; 0x49a2 <qrencode+0x27c>
    unsigned char *ecc = &strinbuf[max];
    unsigned char *dat = strinbuf;
    initrspoly(eccblkwid,qrframe);

    for (i = 0; i < neccblk1; i++) {
        appendrs(dat, datablkw, ecc, eccblkwid, qrframe);
    497c:	c8 01       	movw	r24, r16
    497e:	60 91 42 01 	lds	r22, 0x0142
    4982:	a6 01       	movw	r20, r12
    4984:	20 91 43 01 	lds	r18, 0x0143
    4988:	0e 94 ee 22 	call	0x45dc	; 0x45dc <appendrs.clone.0>
        dat += datablkw;
    498c:	80 91 42 01 	lds	r24, 0x0142
    4990:	08 0f       	add	r16, r24
    4992:	11 1d       	adc	r17, r1
        ecc += eccblkwid;
    4994:	80 91 43 01 	lds	r24, 0x0143
    4998:	c8 0e       	add	r12, r24
    499a:	d1 1c       	adc	r13, r1
    // calculate and append ECC
    unsigned char *ecc = &strinbuf[max];
    unsigned char *dat = strinbuf;
    initrspoly(eccblkwid,qrframe);

    for (i = 0; i < neccblk1; i++) {
    499c:	08 94       	sec
    499e:	e1 1c       	adc	r14, r1
    49a0:	f1 1c       	adc	r15, r1
    49a2:	80 91 40 01 	lds	r24, 0x0140
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	e8 16       	cp	r14, r24
    49aa:	f9 06       	cpc	r15, r25
    49ac:	38 f3       	brcs	.-50     	; 0x497c <qrencode+0x256>
    49ae:	ee 24       	eor	r14, r14
    49b0:	ff 24       	eor	r15, r15
    49b2:	56 01       	movw	r10, r12
    49b4:	14 c0       	rjmp	.+40     	; 0x49de <qrencode+0x2b8>
        appendrs(dat, datablkw, ecc, eccblkwid, qrframe);
        dat += datablkw;
        ecc += eccblkwid;
    }
    for (i = 0; i < neccblk2; i++) {
        appendrs(dat, datablkw + 1, ecc, eccblkwid, qrframe);
    49b6:	6f 5f       	subi	r22, 0xFF	; 255
    49b8:	c8 01       	movw	r24, r16
    49ba:	a5 01       	movw	r20, r10
    49bc:	20 91 43 01 	lds	r18, 0x0143
    49c0:	0e 94 ee 22 	call	0x45dc	; 0x45dc <appendrs.clone.0>
        dat += datablkw + 1;
    49c4:	80 91 42 01 	lds	r24, 0x0142
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	01 96       	adiw	r24, 0x01	; 1
    49cc:	08 0f       	add	r16, r24
    49ce:	19 1f       	adc	r17, r25
        ecc += eccblkwid;
    49d0:	80 91 43 01 	lds	r24, 0x0143
    49d4:	a8 0e       	add	r10, r24
    49d6:	b1 1c       	adc	r11, r1
    for (i = 0; i < neccblk1; i++) {
        appendrs(dat, datablkw, ecc, eccblkwid, qrframe);
        dat += datablkw;
        ecc += eccblkwid;
    }
    for (i = 0; i < neccblk2; i++) {
    49d8:	08 94       	sec
    49da:	e1 1c       	adc	r14, r1
    49dc:	f1 1c       	adc	r15, r1
    49de:	20 90 41 01 	lds	r2, 0x0141
    49e2:	c2 2c       	mov	r12, r2
    49e4:	dd 24       	eor	r13, r13
    49e6:	60 91 42 01 	lds	r22, 0x0142
    49ea:	ec 14       	cp	r14, r12
    49ec:	fd 04       	cpc	r15, r13
    49ee:	18 f3       	brcs	.-58     	; 0x49b6 <qrencode+0x290>
        dat += datablkw + 1;
        ecc += eccblkwid;
    }
    unsigned j;
    dat = qrframe;
    for (i = 0; i < datablkw; i++) {
    49f0:	70 e0       	ldi	r23, 0x00	; 0
        for (j = 0; j < neccblk1; j++)
    49f2:	20 91 40 01 	lds	r18, 0x0140
    49f6:	30 e0       	ldi	r19, 0x00	; 0
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    49f8:	46 01       	movw	r8, r12
    49fa:	82 0e       	add	r8, r18
    49fc:	93 1e       	adc	r9, r19
    49fe:	44 e7       	ldi	r20, 0x74	; 116
    4a00:	e4 2e       	mov	r14, r20
    4a02:	41 e0       	ldi	r20, 0x01	; 1
    4a04:	f4 2e       	mov	r15, r20
    4a06:	e2 0e       	add	r14, r18
    4a08:	f3 1e       	adc	r15, r19
    4a0a:	62 9f       	mul	r22, r18
    4a0c:	50 01       	movw	r10, r0
    4a0e:	63 9f       	mul	r22, r19
    4a10:	b0 0c       	add	r11, r0
    4a12:	72 9f       	mul	r23, r18
    4a14:	b0 0c       	add	r11, r0
    4a16:	11 24       	eor	r1, r1
    4a18:	e4 e7       	ldi	r30, 0x74	; 116
    4a1a:	f1 e0       	ldi	r31, 0x01	; 1
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	90 e0       	ldi	r25, 0x00	; 0
    4a20:	44 24       	eor	r4, r4
    4a22:	55 24       	eor	r5, r5
    4a24:	46 1a       	sub	r4, r22
    4a26:	57 0a       	sbc	r5, r23
    4a28:	ab 01       	movw	r20, r22
    4a2a:	4f 5f       	subi	r20, 0xFF	; 255
    4a2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a2e:	5a 83       	std	Y+2, r21	; 0x02
    4a30:	49 83       	std	Y+1, r20	; 0x01
    4a32:	d9 01       	movw	r26, r18
    4a34:	34 c0       	rjmp	.+104    	; 0x4a9e <qrencode+0x378>
    4a36:	d9 01       	movw	r26, r18
    4a38:	a4 0d       	add	r26, r4
    4a3a:	b5 1d       	adc	r27, r5
    }
    unsigned j;
    dat = qrframe;
    for (i = 0; i < datablkw; i++) {
        for (j = 0; j < neccblk1; j++)
            *dat++ = strinbuf[i + j * datablkw];
    4a3c:	ac 91       	ld	r26, X
    4a3e:	a1 93       	st	Z+, r26
        ecc += eccblkwid;
    }
    unsigned j;
    dat = qrframe;
    for (i = 0; i < datablkw; i++) {
        for (j = 0; j < neccblk1; j++)
    4a40:	4f 5f       	subi	r20, 0xFF	; 255
    4a42:	5f 4f       	sbci	r21, 0xFF	; 255
    4a44:	26 0f       	add	r18, r22
    4a46:	37 1f       	adc	r19, r23
    4a48:	ad 81       	ldd	r26, Y+5	; 0x05
    4a4a:	be 81       	ldd	r27, Y+6	; 0x06
    4a4c:	4a 17       	cp	r20, r26
    4a4e:	5b 07       	cpc	r21, r27
    4a50:	90 f3       	brcs	.-28     	; 0x4a36 <qrencode+0x310>
    4a52:	fc 01       	movw	r30, r24
    4a54:	c8 01       	movw	r24, r16
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4a56:	95 01       	movw	r18, r10
    4a58:	24 53       	subi	r18, 0x34	; 52
    4a5a:	3c 4f       	sbci	r19, 0xFC	; 252
    4a5c:	40 e0       	ldi	r20, 0x00	; 0
    4a5e:	50 e0       	ldi	r21, 0x00	; 0
    4a60:	d7 01       	movw	r26, r14
    4a62:	8c 01       	movw	r16, r24
    4a64:	cf 01       	movw	r24, r30
    4a66:	08 c0       	rjmp	.+16     	; 0x4a78 <qrencode+0x352>
    4a68:	f9 01       	movw	r30, r18
    4a6a:	e4 0d       	add	r30, r4
    4a6c:	f5 1d       	adc	r31, r5
    4a6e:	31 97       	sbiw	r30, 0x01	; 1
    dat = qrframe;
    for (i = 0; i < datablkw; i++) {
        for (j = 0; j < neccblk1; j++)
            *dat++ = strinbuf[i + j * datablkw];
        for (j = 0; j < neccblk2; j++)
            *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    4a70:	e0 81       	ld	r30, Z
    4a72:	ed 93       	st	X+, r30
    unsigned j;
    dat = qrframe;
    for (i = 0; i < datablkw; i++) {
        for (j = 0; j < neccblk1; j++)
            *dat++ = strinbuf[i + j * datablkw];
        for (j = 0; j < neccblk2; j++)
    4a74:	4f 5f       	subi	r20, 0xFF	; 255
    4a76:	5f 4f       	sbci	r21, 0xFF	; 255
    4a78:	e9 81       	ldd	r30, Y+1	; 0x01
    4a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a7c:	2e 0f       	add	r18, r30
    4a7e:	3f 1f       	adc	r19, r31
    4a80:	4c 15       	cp	r20, r12
    4a82:	5d 05       	cpc	r21, r13
    4a84:	88 f3       	brcs	.-30     	; 0x4a68 <qrencode+0x342>
    4a86:	ad 81       	ldd	r26, Y+5	; 0x05
    4a88:	be 81       	ldd	r27, Y+6	; 0x06
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	c8 01       	movw	r24, r16
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4a8e:	e8 0d       	add	r30, r8
    4a90:	f9 1d       	adc	r31, r9
        dat += datablkw + 1;
        ecc += eccblkwid;
    }
    unsigned j;
    dat = qrframe;
    for (i = 0; i < datablkw; i++) {
    4a92:	01 96       	adiw	r24, 0x01	; 1
    4a94:	e8 0c       	add	r14, r8
    4a96:	f9 1c       	adc	r15, r9
    4a98:	08 94       	sec
    4a9a:	a1 1c       	adc	r10, r1
    4a9c:	b1 1c       	adc	r11, r1
    4a9e:	86 17       	cp	r24, r22
    4aa0:	97 07       	cpc	r25, r23
    4aa2:	58 f4       	brcc	.+22     	; 0x4aba <qrencode+0x394>
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4aa4:	9c 01       	movw	r18, r24
    4aa6:	24 53       	subi	r18, 0x34	; 52
    4aa8:	3c 4f       	sbci	r19, 0xFC	; 252
    4aaa:	40 e0       	ldi	r20, 0x00	; 0
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	be 83       	std	Y+6, r27	; 0x06
    4ab0:	ad 83       	std	Y+5, r26	; 0x05
    4ab2:	df 01       	movw	r26, r30
    4ab4:	8c 01       	movw	r16, r24
    4ab6:	cd 01       	movw	r24, r26
    4ab8:	c5 cf       	rjmp	.-118    	; 0x4a44 <qrencode+0x31e>
    4aba:	ab 01       	movw	r20, r22
    4abc:	4f 5f       	subi	r20, 0xFF	; 255
    4abe:	5f 4f       	sbci	r21, 0xFF	; 255
            *dat++ = strinbuf[i + j * datablkw];
        for (j = 0; j < neccblk2; j++)
            *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    }
    for (j = 0; j < neccblk2; j++)
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    4ac0:	20 91 40 01 	lds	r18, 0x0140
    4ac4:	30 e0       	ldi	r19, 0x00	; 0
    4ac6:	62 9f       	mul	r22, r18
    4ac8:	c0 01       	movw	r24, r0
    4aca:	63 9f       	mul	r22, r19
    4acc:	90 0d       	add	r25, r0
    4ace:	72 9f       	mul	r23, r18
    4ad0:	90 0d       	add	r25, r0
    4ad2:	11 24       	eor	r1, r1
    4ad4:	86 0f       	add	r24, r22
    4ad6:	97 1f       	adc	r25, r23
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4ad8:	84 53       	subi	r24, 0x34	; 52
    4ada:	9c 4f       	sbci	r25, 0xFC	; 252
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	70 95       	com	r23
    4ae2:	61 95       	neg	r22
    4ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae6:	8f 01       	movw	r16, r30
    4ae8:	08 c0       	rjmp	.+16     	; 0x4afa <qrencode+0x3d4>
    4aea:	dc 01       	movw	r26, r24
    4aec:	a6 0f       	add	r26, r22
    4aee:	b7 1f       	adc	r27, r23
    4af0:	11 97       	sbiw	r26, 0x01	; 1
            *dat++ = strinbuf[i + j * datablkw];
        for (j = 0; j < neccblk2; j++)
            *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    }
    for (j = 0; j < neccblk2; j++)
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    4af2:	ac 91       	ld	r26, X
    4af4:	a1 93       	st	Z+, r26
        for (j = 0; j < neccblk1; j++)
            *dat++ = strinbuf[i + j * datablkw];
        for (j = 0; j < neccblk2; j++)
            *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    }
    for (j = 0; j < neccblk2; j++)
    4af6:	2f 5f       	subi	r18, 0xFF	; 255
    4af8:	3f 4f       	sbci	r19, 0xFF	; 255
    4afa:	84 0f       	add	r24, r20
    4afc:	95 1f       	adc	r25, r21
    4afe:	2c 15       	cp	r18, r12
    4b00:	3d 05       	cpc	r19, r13
    4b02:	98 f3       	brcs	.-26     	; 0x4aea <qrencode+0x3c4>
    4b04:	c0 0e       	add	r12, r16
    4b06:	d1 1e       	adc	r13, r17
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    for (i = 0; i < eccblkwid; i++)
    4b08:	b0 90 43 01 	lds	r11, 0x0143
    4b0c:	4b 2d       	mov	r20, r11
    4b0e:	50 e0       	ldi	r21, 0x00	; 0
        for (j = 0; j < neccblk1 + neccblk2; j++)
    4b10:	02 2d       	mov	r16, r2
    4b12:	10 e0       	ldi	r17, 0x00	; 0
    4b14:	80 91 40 01 	lds	r24, 0x0140
    4b18:	48 01       	movw	r8, r16
    4b1a:	88 0e       	add	r8, r24
    4b1c:	91 1c       	adc	r9, r1
    4b1e:	20 e0       	ldi	r18, 0x00	; 0
    4b20:	30 e0       	ldi	r19, 0x00	; 0
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4b22:	ee 24       	eor	r14, r14
    4b24:	ff 24       	eor	r15, r15
    4b26:	e4 1a       	sub	r14, r20
    4b28:	f5 0a       	sbc	r15, r21
    4b2a:	10 c0       	rjmp	.+32     	; 0x4b4c <qrencode+0x426>
    4b2c:	fc 01       	movw	r30, r24
    4b2e:	ee 0d       	add	r30, r14
    4b30:	ff 1d       	adc	r31, r15
    }
    for (j = 0; j < neccblk2; j++)
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    for (i = 0; i < eccblkwid; i++)
        for (j = 0; j < neccblk1 + neccblk2; j++)
            *dat++ = strinbuf[max + i + j * eccblkwid];
    4b32:	e0 81       	ld	r30, Z
    4b34:	ed 93       	st	X+, r30
            *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    }
    for (j = 0; j < neccblk2; j++)
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    for (i = 0; i < eccblkwid; i++)
        for (j = 0; j < neccblk1 + neccblk2; j++)
    4b36:	6f 5f       	subi	r22, 0xFF	; 255
    4b38:	7f 4f       	sbci	r23, 0xFF	; 255
    4b3a:	84 0f       	add	r24, r20
    4b3c:	95 1f       	adc	r25, r21
    4b3e:	68 15       	cp	r22, r8
    4b40:	79 05       	cpc	r23, r9
    4b42:	a0 f3       	brcs	.-24     	; 0x4b2c <qrencode+0x406>
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4b44:	c8 0c       	add	r12, r8
    4b46:	d9 1c       	adc	r13, r9
        for (j = 0; j < neccblk2; j++)
            *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    }
    for (j = 0; j < neccblk2; j++)
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    for (i = 0; i < eccblkwid; i++)
    4b48:	2f 5f       	subi	r18, 0xFF	; 255
    4b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4c:	24 17       	cp	r18, r20
    4b4e:	35 07       	cpc	r19, r21
    4b50:	48 f4       	brcc	.+18     	; 0x4b64 <qrencode+0x43e>
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4b52:	c9 01       	movw	r24, r18
    4b54:	86 0d       	add	r24, r6
    4b56:	97 1d       	adc	r25, r7
    4b58:	84 53       	subi	r24, 0x34	; 52
    4b5a:	9c 4f       	sbci	r25, 0xFC	; 252
    4b5c:	d6 01       	movw	r26, r12
    4b5e:	60 e0       	ldi	r22, 0x00	; 0
    4b60:	70 e0       	ldi	r23, 0x00	; 0
    4b62:	eb cf       	rjmp	.-42     	; 0x4b3a <qrencode+0x414>
    for (j = 0; j < neccblk2; j++)
        *dat++ = strinbuf[(neccblk1 * datablkw) + i + (j * (datablkw + 1))];
    for (i = 0; i < eccblkwid; i++)
        for (j = 0; j < neccblk1 + neccblk2; j++)
            *dat++ = strinbuf[max + i + j * eccblkwid];
    memcpy(strinbuf, qrframe, max + eccblkwid * (neccblk1 + neccblk2));
    4b64:	9c ec       	ldi	r25, 0xCC	; 204
    4b66:	e9 2e       	mov	r14, r25
    4b68:	93 e0       	ldi	r25, 0x03	; 3
    4b6a:	f9 2e       	mov	r15, r25
    4b6c:	80 91 40 01 	lds	r24, 0x0140
    4b70:	08 0f       	add	r16, r24
    4b72:	11 1d       	adc	r17, r1
    4b74:	8b 2d       	mov	r24, r11
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	08 9f       	mul	r16, r24
    4b7a:	90 01       	movw	r18, r0
    4b7c:	09 9f       	mul	r16, r25
    4b7e:	30 0d       	add	r19, r0
    4b80:	18 9f       	mul	r17, r24
    4b82:	30 0d       	add	r19, r0
    4b84:	11 24       	eor	r1, r1
    4b86:	26 0d       	add	r18, r6
    4b88:	37 1d       	adc	r19, r7
    4b8a:	04 e7       	ldi	r16, 0x74	; 116
    4b8c:	11 e0       	ldi	r17, 0x01	; 1
    4b8e:	c7 01       	movw	r24, r14
    4b90:	b8 01       	movw	r22, r16
    4b92:	a9 01       	movw	r20, r18
    4b94:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
{
    unsigned i;
    unsigned char d, j;
    unsigned char x, y, ffdecy, ffgohv;

    memcpy_P(qrframe, framebase, WDB * WD);
    4b98:	40 91 46 01 	lds	r20, 0x0146
    4b9c:	80 91 47 01 	lds	r24, 0x0147
    4ba0:	48 9f       	mul	r20, r24
    4ba2:	a0 01       	movw	r20, r0
    4ba4:	11 24       	eor	r1, r1
    4ba6:	c8 01       	movw	r24, r16
    4ba8:	65 e1       	ldi	r22, 0x15	; 21
    4baa:	7b e2       	ldi	r23, 0x2B	; 43
    4bac:	0e 94 65 33 	call	0x66ca	; 0x66ca <memcpy_P>
    x = y = WD - 1;
    4bb0:	b0 90 46 01 	lds	r11, 0x0146
    4bb4:	9b 2d       	mov	r25, r11
    4bb6:	91 50       	subi	r25, 0x01	; 1
    ffdecy = 1;                 // up, minus
    ffgohv = 1;

    /* inteleaved data and ecc codes */
    for (i = 0; i < ((datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2); i++) {
    4bb8:	40 91 41 01 	lds	r20, 0x0141
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	80 91 40 01 	lds	r24, 0x0140
    4bc2:	ba 01       	movw	r22, r20
    4bc4:	68 0f       	add	r22, r24
    4bc6:	71 1d       	adc	r23, r1
    4bc8:	80 91 43 01 	lds	r24, 0x0143
    4bcc:	20 91 42 01 	lds	r18, 0x0142
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	28 0f       	add	r18, r24
    4bd4:	31 1d       	adc	r19, r1
    4bd6:	62 9f       	mul	r22, r18
    4bd8:	80 01       	movw	r16, r0
    4bda:	63 9f       	mul	r22, r19
    4bdc:	10 0d       	add	r17, r0
    4bde:	72 9f       	mul	r23, r18
    4be0:	10 0d       	add	r17, r0
    4be2:	11 24       	eor	r1, r1
    4be4:	04 0f       	add	r16, r20
    4be6:	15 1f       	adc	r17, r21
        d = strinbuf[i];
        for (j = 0; j < 8; j++, d <<= 1) {
            if (0x80 & d)
                SETQRBIT(x, y);
    4be8:	40 90 47 01 	lds	r4, 0x0147
    4bec:	55 24       	eor	r5, r5
    4bee:	47 01       	movw	r8, r14
    unsigned i;
    unsigned char d, j;
    unsigned char x, y, ffdecy, ffgohv;

    memcpy_P(qrframe, framebase, WDB * WD);
    x = y = WD - 1;
    4bf0:	49 2f       	mov	r20, r25
    ffdecy = 1;                 // up, minus
    ffgohv = 1;
    4bf2:	dd 24       	eor	r13, r13
    4bf4:	d3 94       	inc	r13
    unsigned char d, j;
    unsigned char x, y, ffdecy, ffgohv;

    memcpy_P(qrframe, framebase, WDB * WD);
    x = y = WD - 1;
    ffdecy = 1;                 // up, minus
    4bf6:	51 e0       	ldi	r21, 0x01	; 1
    ffgohv = 1;

    /* inteleaved data and ecc codes */
    for (i = 0; i < ((datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2); i++) {
    4bf8:	20 e0       	ldi	r18, 0x00	; 0
    4bfa:	30 e0       	ldi	r19, 0x00	; 0
        d = strinbuf[i];
        for (j = 0; j < 8; j++, d <<= 1) {
            if (0x80 & d)
                SETQRBIT(x, y);
    4bfc:	80 e8       	ldi	r24, 0x80	; 128
    4bfe:	68 2e       	mov	r6, r24
    4c00:	71 2c       	mov	r7, r1
                                x--;
                                y = 9;
                            }
                        }
                    } else {
                        if (y != WD - 1)
    4c02:	eb 2c       	mov	r14, r11
    4c04:	ff 24       	eor	r15, r15
    4c06:	08 94       	sec
    4c08:	e1 08       	sbc	r14, r1
    4c0a:	f1 08       	sbc	r15, r1
    4c0c:	ab 2c       	mov	r10, r11
    4c0e:	19 01       	movw	r2, r18
    4c10:	5c c0       	rjmp	.+184    	; 0x4cca <qrencode+0x5a4>
    ffdecy = 1;                 // up, minus
    ffgohv = 1;

    /* inteleaved data and ecc codes */
    for (i = 0; i < ((datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2); i++) {
        d = strinbuf[i];
    4c12:	d4 01       	movw	r26, r8
    4c14:	cd 90       	ld	r12, X+
    4c16:	4d 01       	movw	r8, r26
    4c18:	b8 e0       	ldi	r27, 0x08	; 8
    4c1a:	bb 2e       	mov	r11, r27
        for (j = 0; j < 8; j++, d <<= 1) {
            if (0x80 & d)
    4c1c:	c7 fe       	sbrs	r12, 7
    4c1e:	1c c0       	rjmp	.+56     	; 0x4c58 <qrencode+0x532>
                SETQRBIT(x, y);
    4c20:	24 2f       	mov	r18, r20
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	24 9d       	mul	r18, r4
    4c26:	f0 01       	movw	r30, r0
    4c28:	25 9d       	mul	r18, r5
    4c2a:	f0 0d       	add	r31, r0
    4c2c:	34 9d       	mul	r19, r4
    4c2e:	f0 0d       	add	r31, r0
    4c30:	11 24       	eor	r1, r1
    4c32:	89 2f       	mov	r24, r25
    4c34:	86 95       	lsr	r24
    4c36:	86 95       	lsr	r24
    4c38:	86 95       	lsr	r24
    4c3a:	e8 0f       	add	r30, r24
    4c3c:	f1 1d       	adc	r31, r1
    4c3e:	ec 58       	subi	r30, 0x8C	; 140
    4c40:	fe 4f       	sbci	r31, 0xFE	; 254
    4c42:	29 2f       	mov	r18, r25
    4c44:	27 70       	andi	r18, 0x07	; 7
    4c46:	b3 01       	movw	r22, r6
    4c48:	02 c0       	rjmp	.+4      	; 0x4c4e <qrencode+0x528>
    4c4a:	75 95       	asr	r23
    4c4c:	67 95       	ror	r22
    4c4e:	2a 95       	dec	r18
    4c50:	e2 f7       	brpl	.-8      	; 0x4c4a <qrencode+0x524>
    4c52:	80 81       	ld	r24, Z
    4c54:	86 2b       	or	r24, r22
    4c56:	80 83       	st	Z, r24
            do {                // find next fill position
                if (ffgohv)
    4c58:	dd 20       	and	r13, r13
    4c5a:	11 f0       	breq	.+4      	; 0x4c60 <qrencode+0x53a>
                    x--;
    4c5c:	91 50       	subi	r25, 0x01	; 1
    4c5e:	1e c0       	rjmp	.+60     	; 0x4c9c <qrencode+0x576>
                else {
                    x++;
    4c60:	9f 5f       	subi	r25, 0xFF	; 255
                    if (ffdecy) {
    4c62:	55 23       	and	r21, r21
    4c64:	51 f0       	breq	.+20     	; 0x4c7a <qrencode+0x554>
                        if (y != 0)
    4c66:	44 23       	and	r20, r20
    4c68:	11 f0       	breq	.+4      	; 0x4c6e <qrencode+0x548>
                            y--;
    4c6a:	41 50       	subi	r20, 0x01	; 1
    4c6c:	16 c0       	rjmp	.+44     	; 0x4c9a <qrencode+0x574>
                        else {
                            x -= 2;
    4c6e:	92 50       	subi	r25, 0x02	; 2
                            ffdecy = !ffdecy;
                            if (x == 6) {
    4c70:	96 30       	cpi	r25, 0x06	; 6
    4c72:	89 f4       	brne	.+34     	; 0x4c96 <qrencode+0x570>
                    if (ffdecy) {
                        if (y != 0)
                            y--;
                        else {
                            x -= 2;
                            ffdecy = !ffdecy;
    4c74:	50 e0       	ldi	r21, 0x00	; 0
                            if (x == 6) {
                                x--;
                                y = 9;
    4c76:	49 e0       	ldi	r20, 0x09	; 9
    4c78:	0c c0       	rjmp	.+24     	; 0x4c92 <qrencode+0x56c>
                            }
                        }
                    } else {
                        if (y != WD - 1)
    4c7a:	24 2f       	mov	r18, r20
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	2e 15       	cp	r18, r14
    4c80:	3f 05       	cpc	r19, r15
    4c82:	11 f0       	breq	.+4      	; 0x4c88 <qrencode+0x562>
                            y++;
    4c84:	4f 5f       	subi	r20, 0xFF	; 255
    4c86:	0a c0       	rjmp	.+20     	; 0x4c9c <qrencode+0x576>
                        else {
                            x -= 2;
    4c88:	92 50       	subi	r25, 0x02	; 2
                            ffdecy = !ffdecy;
                            if (x == 6) {
    4c8a:	96 30       	cpi	r25, 0x06	; 6
    4c8c:	31 f4       	brne	.+12     	; 0x4c9a <qrencode+0x574>
                                x--;
                                y -= 8;
    4c8e:	48 50       	subi	r20, 0x08	; 8
                    } else {
                        if (y != WD - 1)
                            y++;
                        else {
                            x -= 2;
                            ffdecy = !ffdecy;
    4c90:	51 e0       	ldi	r21, 0x01	; 1
                            if (x == 6) {
                                x--;
    4c92:	95 e0       	ldi	r25, 0x05	; 5
    4c94:	03 c0       	rjmp	.+6      	; 0x4c9c <qrencode+0x576>
                    if (ffdecy) {
                        if (y != 0)
                            y--;
                        else {
                            x -= 2;
                            ffdecy = !ffdecy;
    4c96:	50 e0       	ldi	r21, 0x00	; 0
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <qrencode+0x576>
                    } else {
                        if (y != WD - 1)
                            y++;
                        else {
                            x -= 2;
                            ffdecy = !ffdecy;
    4c9a:	51 e0       	ldi	r21, 0x01	; 1
                                y -= 8;
                            }
                        }
                    }
                }
                ffgohv = !ffgohv;
    4c9c:	81 e0       	ldi	r24, 0x01	; 1
    4c9e:	d1 10       	cpse	r13, r1
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	d8 2e       	mov	r13, r24
            } while (ismasked(x, y));
    4ca4:	89 2f       	mov	r24, r25
    4ca6:	64 2f       	mov	r22, r20
    4ca8:	4d 87       	std	Y+13, r20	; 0x0d
    4caa:	5c 87       	std	Y+12, r21	; 0x0c
    4cac:	9b 87       	std	Y+11, r25	; 0x0b
    4cae:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <ismasked>
    4cb2:	4d 85       	ldd	r20, Y+13	; 0x0d
    4cb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    4cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cb8:	88 23       	and	r24, r24
    4cba:	71 f6       	brne	.-100    	; 0x4c58 <qrencode+0x532>
    4cbc:	ba 94       	dec	r11
    ffgohv = 1;

    /* inteleaved data and ecc codes */
    for (i = 0; i < ((datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2); i++) {
        d = strinbuf[i];
        for (j = 0; j < 8; j++, d <<= 1) {
    4cbe:	11 f0       	breq	.+4      	; 0x4cc4 <qrencode+0x59e>
    4cc0:	cc 0c       	add	r12, r12
    4cc2:	ac cf       	rjmp	.-168    	; 0x4c1c <qrencode+0x4f6>
    x = y = WD - 1;
    ffdecy = 1;                 // up, minus
    ffgohv = 1;

    /* inteleaved data and ecc codes */
    for (i = 0; i < ((datablkw + eccblkwid) * (neccblk1 + neccblk2) + neccblk2); i++) {
    4cc4:	08 94       	sec
    4cc6:	21 1c       	adc	r2, r1
    4cc8:	31 1c       	adc	r3, r1
    4cca:	20 16       	cp	r2, r16
    4ccc:	31 06       	cpc	r3, r17
    4cce:	08 f4       	brcc	.+2      	; 0x4cd2 <qrencode+0x5ac>
    4cd0:	a0 cf       	rjmp	.-192    	; 0x4c12 <qrencode+0x4ec>
    unsigned char i;
    unsigned badness;

    stringtoqr();
    fillframe();                // Inisde loop to avoid having separate mask buffer
    memcpy(strinbuf, qrframe, WD * WDB);
    4cd2:	0c ec       	ldi	r16, 0xCC	; 204
    4cd4:	13 e0       	ldi	r17, 0x03	; 3
    4cd6:	20 91 47 01 	lds	r18, 0x0147
    4cda:	7a 2d       	mov	r23, r10
    4cdc:	72 9f       	mul	r23, r18
    4cde:	90 01       	movw	r18, r0
    4ce0:	11 24       	eor	r1, r1
    4ce2:	a4 e7       	ldi	r26, 0x74	; 116
    4ce4:	8a 2e       	mov	r8, r26
    4ce6:	a1 e0       	ldi	r26, 0x01	; 1
    4ce8:	9a 2e       	mov	r9, r26
    4cea:	c8 01       	movw	r24, r16
    4cec:	b4 01       	movw	r22, r8
    4cee:	a9 01       	movw	r20, r18
    4cf0:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
    for (i = 0; i < 8; i++) {
    4cf4:	dd 24       	eor	r13, r13
}

void qrencode()
{
    unsigned mindem = 30000;
    unsigned char best = 0;
    4cf6:	bb 24       	eor	r11, r11
        }
}

void qrencode()
{
    unsigned mindem = 30000;
    4cf8:	80 e3       	ldi	r24, 0x30	; 48
    4cfa:	95 e7       	ldi	r25, 0x75	; 117
    4cfc:	9a 83       	std	Y+2, r25	; 0x02
    4cfe:	89 83       	std	Y+1, r24	; 0x01
        rlens[0] = 0;
        for (h = b = x = 0; x < WD; x++) {
            if ((b1 = QRBIT(x, y)) == b)
                rlens[h]++;
            else
                rlens[++h] = 1;
    4d00:	aa 24       	eor	r10, r10
    4d02:	a3 94       	inc	r10
            mindem = badness;
            best = i;
        }
        if (best == 7)
            break;              // don't increment i to avoid redoing mask
        memcpy(qrframe, strinbuf, WD * WDB);    // reset filled frame
    4d04:	8f 82       	std	Y+7, r8	; 0x07
    4d06:	98 86       	std	Y+8, r9	; 0x08
    4d08:	09 87       	std	Y+9, r16	; 0x09
    4d0a:	1a 87       	std	Y+10, r17	; 0x0a

    stringtoqr();
    fillframe();                // Inisde loop to avoid having separate mask buffer
    memcpy(strinbuf, qrframe, WD * WDB);
    for (i = 0; i < 8; i++) {
        applymask(i);           // returns black-white imbalance
    4d0c:	8d 2d       	mov	r24, r13
    4d0e:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <applymask>
    unsigned char x, y, h, b, b1;
    unsigned thisbad = 0;
    int bw = 0;

    // blocks of same color.
    for (y = 0; y < WD - 1; y++)
    4d12:	c0 90 46 01 	lds	r12, 0x0146
    4d16:	2c 2c       	mov	r2, r12
    4d18:	33 24       	eor	r3, r3
    4d1a:	31 01       	movw	r6, r2
    4d1c:	08 94       	sec
    4d1e:	61 08       	sbc	r6, r1
    4d20:	71 08       	sbc	r7, r1
        for (x = 0; x < WD - 1; x++)
            if ((QRBIT(x, y) && QRBIT(x + 1, y) && QRBIT(x, y + 1) && QRBIT(x + 1, y + 1))      // all black
    4d22:	40 90 47 01 	lds	r4, 0x0147
    4d26:	55 24       	eor	r5, r5
}

static int badcheck()
{
    unsigned char x, y, h, b, b1;
    unsigned thisbad = 0;
    4d28:	ee 24       	eor	r14, r14
    4d2a:	ff 24       	eor	r15, r15
    int bw = 0;

    // blocks of same color.
    for (y = 0; y < WD - 1; y++)
    4d2c:	00 e0       	ldi	r16, 0x00	; 0
    4d2e:	d7 01       	movw	r26, r14
    4d30:	8a c0       	rjmp	.+276    	; 0x4e46 <qrencode+0x720>
        for (x = 0; x < WD - 1; x++)
            if ((QRBIT(x, y) && QRBIT(x + 1, y) && QRBIT(x, y + 1) && QRBIT(x + 1, y + 1))      // all black
    4d32:	81 2f       	mov	r24, r17
    4d34:	86 95       	lsr	r24
    4d36:	86 95       	lsr	r24
    4d38:	86 95       	lsr	r24
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	fa 01       	movw	r30, r20
    4d3e:	e0 95       	com	r30
    4d40:	f0 95       	com	r31
    4d42:	e7 70       	andi	r30, 0x07	; 7
    4d44:	f0 70       	andi	r31, 0x00	; 0
    4d46:	ff 87       	std	Y+15, r31	; 0x0f
    4d48:	ee 87       	std	Y+14, r30	; 0x0e
    4d4a:	8c 58       	subi	r24, 0x8C	; 140
    4d4c:	9e 4f       	sbci	r25, 0xFE	; 254
    4d4e:	fc 01       	movw	r30, r24
    4d50:	e8 0d       	add	r30, r8
    4d52:	f9 1d       	adc	r31, r9
    4d54:	60 81       	ld	r22, Z
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	0e 84       	ldd	r0, Y+14	; 0x0e
    4d5a:	02 c0       	rjmp	.+4      	; 0x4d60 <qrencode+0x63a>
    4d5c:	75 95       	asr	r23
    4d5e:	67 95       	ror	r22
    4d60:	0a 94       	dec	r0
    4d62:	e2 f7       	brpl	.-8      	; 0x4d5c <qrencode+0x636>
    4d64:	4f 5f       	subi	r20, 0xFF	; 255
    4d66:	5f 4f       	sbci	r21, 0xFF	; 255
    4d68:	60 ff       	sbrs	r22, 0
    4d6a:	33 c0       	rjmp	.+102    	; 0x4dd2 <qrencode+0x6ac>
    4d6c:	ba 01       	movw	r22, r20
    4d6e:	f3 e0       	ldi	r31, 0x03	; 3
    4d70:	75 95       	asr	r23
    4d72:	67 95       	ror	r22
    4d74:	fa 95       	dec	r31
    4d76:	e1 f7       	brne	.-8      	; 0x4d70 <qrencode+0x64a>
    4d78:	40 95       	com	r20
    4d7a:	50 95       	com	r21
    4d7c:	47 70       	andi	r20, 0x07	; 7
    4d7e:	50 70       	andi	r21, 0x00	; 0
    4d80:	f7 01       	movw	r30, r14
    4d82:	e6 0f       	add	r30, r22
    4d84:	f7 1f       	adc	r31, r23
    4d86:	e0 81       	ld	r30, Z
    4d88:	f0 e0       	ldi	r31, 0x00	; 0
    4d8a:	04 2e       	mov	r0, r20
    4d8c:	02 c0       	rjmp	.+4      	; 0x4d92 <qrencode+0x66c>
    4d8e:	f5 95       	asr	r31
    4d90:	e7 95       	ror	r30
    4d92:	0a 94       	dec	r0
    4d94:	e2 f7       	brpl	.-8      	; 0x4d8e <qrencode+0x668>
    4d96:	e0 ff       	sbrs	r30, 0
    4d98:	4e c0       	rjmp	.+156    	; 0x4e36 <qrencode+0x710>
    4d9a:	82 0f       	add	r24, r18
    4d9c:	93 1f       	adc	r25, r19
    4d9e:	fc 01       	movw	r30, r24
    4da0:	80 81       	ld	r24, Z
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	0e 84       	ldd	r0, Y+14	; 0x0e
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <qrencode+0x686>
    4da8:	95 95       	asr	r25
    4daa:	87 95       	ror	r24
    4dac:	0a 94       	dec	r0
    4dae:	e2 f7       	brpl	.-8      	; 0x4da8 <qrencode+0x682>
    4db0:	80 ff       	sbrs	r24, 0
    4db2:	41 c0       	rjmp	.+130    	; 0x4e36 <qrencode+0x710>
    4db4:	6c 58       	subi	r22, 0x8C	; 140
    4db6:	7e 4f       	sbci	r23, 0xFE	; 254
    4db8:	62 0f       	add	r22, r18
    4dba:	73 1f       	adc	r23, r19
    4dbc:	fb 01       	movw	r30, r22
    4dbe:	80 81       	ld	r24, Z
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	02 c0       	rjmp	.+4      	; 0x4dc8 <qrencode+0x6a2>
    4dc4:	95 95       	asr	r25
    4dc6:	87 95       	ror	r24
    4dc8:	4a 95       	dec	r20
    4dca:	e2 f7       	brpl	.-8      	; 0x4dc4 <qrencode+0x69e>
    4dcc:	80 fd       	sbrc	r24, 0
    4dce:	32 c0       	rjmp	.+100    	; 0x4e34 <qrencode+0x70e>
    4dd0:	32 c0       	rjmp	.+100    	; 0x4e36 <qrencode+0x710>
              || !(QRBIT(x, y) || QRBIT(x + 1, y) || QRBIT(x, y + 1) || QRBIT(x + 1, y + 1)))   // all white
    4dd2:	ba 01       	movw	r22, r20
    4dd4:	e3 e0       	ldi	r30, 0x03	; 3
    4dd6:	75 95       	asr	r23
    4dd8:	67 95       	ror	r22
    4dda:	ea 95       	dec	r30
    4ddc:	e1 f7       	brne	.-8      	; 0x4dd6 <qrencode+0x6b0>
    4dde:	40 95       	com	r20
    4de0:	50 95       	com	r21
    4de2:	47 70       	andi	r20, 0x07	; 7
    4de4:	50 70       	andi	r21, 0x00	; 0
    4de6:	f7 01       	movw	r30, r14
    4de8:	e6 0f       	add	r30, r22
    4dea:	f7 1f       	adc	r31, r23
    4dec:	e0 81       	ld	r30, Z
    4dee:	f0 e0       	ldi	r31, 0x00	; 0
    4df0:	04 2e       	mov	r0, r20
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <qrencode+0x6d2>
    4df4:	f5 95       	asr	r31
    4df6:	e7 95       	ror	r30
    4df8:	0a 94       	dec	r0
    4dfa:	e2 f7       	brpl	.-8      	; 0x4df4 <qrencode+0x6ce>
    4dfc:	e0 fd       	sbrc	r30, 0
    4dfe:	1b c0       	rjmp	.+54     	; 0x4e36 <qrencode+0x710>
    4e00:	82 0f       	add	r24, r18
    4e02:	93 1f       	adc	r25, r19
    4e04:	fc 01       	movw	r30, r24
    4e06:	80 81       	ld	r24, Z
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	0e 84       	ldd	r0, Y+14	; 0x0e
    4e0c:	02 c0       	rjmp	.+4      	; 0x4e12 <qrencode+0x6ec>
    4e0e:	95 95       	asr	r25
    4e10:	87 95       	ror	r24
    4e12:	0a 94       	dec	r0
    4e14:	e2 f7       	brpl	.-8      	; 0x4e0e <qrencode+0x6e8>
    4e16:	80 fd       	sbrc	r24, 0
    4e18:	0e c0       	rjmp	.+28     	; 0x4e36 <qrencode+0x710>
    4e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e1e:	68 0f       	add	r22, r24
    4e20:	79 1f       	adc	r23, r25
    4e22:	fb 01       	movw	r30, r22
    4e24:	80 81       	ld	r24, Z
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	02 c0       	rjmp	.+4      	; 0x4e2e <qrencode+0x708>
    4e2a:	95 95       	asr	r25
    4e2c:	87 95       	ror	r24
    4e2e:	4a 95       	dec	r20
    4e30:	e2 f7       	brpl	.-8      	; 0x4e2a <qrencode+0x704>
    4e32:	80 ff       	sbrs	r24, 0
                thisbad += N2;
    4e34:	13 96       	adiw	r26, 0x03	; 3
    unsigned thisbad = 0;
    int bw = 0;

    // blocks of same color.
    for (y = 0; y < WD - 1; y++)
        for (x = 0; x < WD - 1; x++)
    4e36:	1f 5f       	subi	r17, 0xFF	; 255
    4e38:	41 2f       	mov	r20, r17
    4e3a:	50 e0       	ldi	r21, 0x00	; 0
    4e3c:	46 15       	cp	r20, r6
    4e3e:	57 05       	cpc	r21, r7
    4e40:	0c f4       	brge	.+2      	; 0x4e44 <qrencode+0x71e>
    4e42:	77 cf       	rjmp	.-274    	; 0x4d32 <qrencode+0x60c>
    unsigned char x, y, h, b, b1;
    unsigned thisbad = 0;
    int bw = 0;

    // blocks of same color.
    for (y = 0; y < WD - 1; y++)
    4e44:	0f 5f       	subi	r16, 0xFF	; 255
    4e46:	80 2f       	mov	r24, r16
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	86 15       	cp	r24, r6
    4e4c:	97 05       	cpc	r25, r7
    4e4e:	3c f0       	brlt	.+14     	; 0x4e5e <qrencode+0x738>
    4e50:	7d 01       	movw	r14, r26
    4e52:	80 e0       	ldi	r24, 0x00	; 0
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	00 e0       	ldi	r16, 0x00	; 0
    4e58:	10 e0       	ldi	r17, 0x00	; 0
    4e5a:	4c 01       	movw	r8, r24
    4e5c:	68 c0       	rjmp	.+208    	; 0x4f2e <qrencode+0x808>
        for (x = 0; x < WD - 1; x++)
            if ((QRBIT(x, y) && QRBIT(x + 1, y) && QRBIT(x, y + 1) && QRBIT(x + 1, y + 1))      // all black
    4e5e:	84 9d       	mul	r24, r4
    4e60:	40 01       	movw	r8, r0
    4e62:	85 9d       	mul	r24, r5
    4e64:	90 0c       	add	r9, r0
    4e66:	94 9d       	mul	r25, r4
    4e68:	90 0c       	add	r9, r0
    4e6a:	11 24       	eor	r1, r1
    4e6c:	01 96       	adiw	r24, 0x01	; 1
    4e6e:	84 9d       	mul	r24, r4
    4e70:	90 01       	movw	r18, r0
    4e72:	85 9d       	mul	r24, r5
    4e74:	30 0d       	add	r19, r0
    4e76:	94 9d       	mul	r25, r4
    4e78:	30 0d       	add	r19, r0
    4e7a:	11 24       	eor	r1, r1
    4e7c:	10 e0       	ldi	r17, 0x00	; 0
    4e7e:	54 e7       	ldi	r21, 0x74	; 116
    4e80:	e5 2e       	mov	r14, r21
    4e82:	51 e0       	ldi	r21, 0x01	; 1
    4e84:	f5 2e       	mov	r15, r21
    4e86:	e8 0c       	add	r14, r8
    4e88:	f9 1c       	adc	r15, r9
              || !(QRBIT(x, y) || QRBIT(x + 1, y) || QRBIT(x, y + 1) || QRBIT(x + 1, y + 1)))   // all white
    4e8a:	a9 01       	movw	r20, r18
    4e8c:	4c 58       	subi	r20, 0x8C	; 140
    4e8e:	5e 4f       	sbci	r21, 0xFE	; 254
    4e90:	5e 83       	std	Y+6, r21	; 0x06
    4e92:	4d 83       	std	Y+5, r20	; 0x05
    4e94:	d1 cf       	rjmp	.-94     	; 0x4e38 <qrencode+0x712>
                thisbad += N2;

    // X runs
    for (y = 0; y < WD; y++) {
        rlens[0] = 0;
    4e96:	10 92 71 04 	sts	0x0471, r1
        for (h = b = x = 0; x < WD; x++) {
            if ((b1 = QRBIT(x, y)) == b)
    4e9a:	80 91 47 01 	lds	r24, 0x0147
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	88 9e       	mul	r8, r24
    4ea2:	90 01       	movw	r18, r0
    4ea4:	89 9e       	mul	r8, r25
    4ea6:	30 0d       	add	r19, r0
    4ea8:	98 9e       	mul	r9, r24
    4eaa:	30 0d       	add	r19, r0
    4eac:	11 24       	eor	r1, r1
    4eae:	4f ef       	ldi	r20, 0xFF	; 255
    4eb0:	5f ef       	ldi	r21, 0xFF	; 255
                thisbad += N2;

    // X runs
    for (y = 0; y < WD; y++) {
        rlens[0] = 0;
        for (h = b = x = 0; x < WD; x++) {
    4eb2:	80 e0       	ldi	r24, 0x00	; 0
    4eb4:	a0 e0       	ldi	r26, 0x00	; 0
    4eb6:	90 e0       	ldi	r25, 0x00	; 0
            if ((b1 = QRBIT(x, y)) == b)
    4eb8:	2c 58       	subi	r18, 0x8C	; 140
    4eba:	3e 4f       	sbci	r19, 0xFE	; 254
    4ebc:	01 c0       	rjmp	.+2      	; 0x4ec0 <qrencode+0x79a>
    4ebe:	ae 2f       	mov	r26, r30
    4ec0:	69 2f       	mov	r22, r25
    4ec2:	66 95       	lsr	r22
    4ec4:	66 95       	lsr	r22
    4ec6:	66 95       	lsr	r22
    4ec8:	f9 01       	movw	r30, r18
    4eca:	e6 0f       	add	r30, r22
    4ecc:	f1 1d       	adc	r31, r1
    4ece:	e0 81       	ld	r30, Z
    4ed0:	f0 e0       	ldi	r31, 0x00	; 0
    4ed2:	ba 01       	movw	r22, r20
    4ed4:	67 70       	andi	r22, 0x07	; 7
    4ed6:	70 70       	andi	r23, 0x00	; 0
    4ed8:	02 c0       	rjmp	.+4      	; 0x4ede <qrencode+0x7b8>
    4eda:	f5 95       	asr	r31
    4edc:	e7 95       	ror	r30
    4ede:	6a 95       	dec	r22
    4ee0:	e2 f7       	brpl	.-8      	; 0x4eda <qrencode+0x7b4>
    4ee2:	e1 70       	andi	r30, 0x01	; 1
    4ee4:	ea 17       	cp	r30, r26
    4ee6:	41 f4       	brne	.+16     	; 0x4ef8 <qrencode+0x7d2>
                rlens[h]++;
    4ee8:	a8 2f       	mov	r26, r24
    4eea:	b0 e0       	ldi	r27, 0x00	; 0
    4eec:	af 58       	subi	r26, 0x8F	; 143
    4eee:	bb 4f       	sbci	r27, 0xFB	; 251
    4ef0:	6c 91       	ld	r22, X
    4ef2:	6f 5f       	subi	r22, 0xFF	; 255
    4ef4:	6c 93       	st	X, r22
    4ef6:	06 c0       	rjmp	.+12     	; 0x4f04 <qrencode+0x7de>
            else
                rlens[++h] = 1;
    4ef8:	8f 5f       	subi	r24, 0xFF	; 255
    4efa:	a8 2f       	mov	r26, r24
    4efc:	b0 e0       	ldi	r27, 0x00	; 0
    4efe:	af 58       	subi	r26, 0x8F	; 143
    4f00:	bb 4f       	sbci	r27, 0xFB	; 251
    4f02:	ac 92       	st	X, r10
            b = b1;
            bw += b ? 1 : -1;
    4f04:	ee 23       	and	r30, r30
    4f06:	19 f0       	breq	.+6      	; 0x4f0e <qrencode+0x7e8>
    4f08:	61 e0       	ldi	r22, 0x01	; 1
    4f0a:	70 e0       	ldi	r23, 0x00	; 0
    4f0c:	02 c0       	rjmp	.+4      	; 0x4f12 <qrencode+0x7ec>
    4f0e:	6f ef       	ldi	r22, 0xFF	; 255
    4f10:	7f ef       	ldi	r23, 0xFF	; 255
    4f12:	06 0f       	add	r16, r22
    4f14:	17 1f       	adc	r17, r23
                thisbad += N2;

    // X runs
    for (y = 0; y < WD; y++) {
        rlens[0] = 0;
        for (h = b = x = 0; x < WD; x++) {
    4f16:	9f 5f       	subi	r25, 0xFF	; 255
    4f18:	41 50       	subi	r20, 0x01	; 1
    4f1a:	50 40       	sbci	r21, 0x00	; 0
    4f1c:	9c 15       	cp	r25, r12
    4f1e:	78 f2       	brcs	.-98     	; 0x4ebe <qrencode+0x798>
            else
                rlens[++h] = 1;
            b = b1;
            bw += b ? 1 : -1;
        }
        thisbad += badruns(h);
    4f20:	0e 94 89 22 	call	0x4512	; 0x4512 <badruns>
    4f24:	e8 0e       	add	r14, r24
    4f26:	f9 1e       	adc	r15, r25
    4f28:	08 94       	sec
    4f2a:	81 1c       	adc	r8, r1
    4f2c:	91 1c       	adc	r9, r1
            if ((QRBIT(x, y) && QRBIT(x + 1, y) && QRBIT(x, y + 1) && QRBIT(x + 1, y + 1))      // all black
              || !(QRBIT(x, y) || QRBIT(x + 1, y) || QRBIT(x, y + 1) || QRBIT(x + 1, y + 1)))   // all white
                thisbad += N2;

    // X runs
    for (y = 0; y < WD; y++) {
    4f2e:	8c 14       	cp	r8, r12
    4f30:	08 f4       	brcc	.+2      	; 0x4f34 <qrencode+0x80e>
    4f32:	b1 cf       	rjmp	.-158    	; 0x4e96 <qrencode+0x770>

    // black/white imbalance
    if (bw < 0)
        bw = -bw;

    unsigned long big = bw;
    4f34:	17 ff       	sbrs	r17, 7
    4f36:	03 c0       	rjmp	.+6      	; 0x4f3e <qrencode+0x818>
    4f38:	10 95       	com	r17
    4f3a:	01 95       	neg	r16
    4f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3e:	22 27       	eor	r18, r18
    4f40:	17 fd       	sbrc	r17, 7
    4f42:	20 95       	com	r18
    4f44:	32 2f       	mov	r19, r18
    unsigned count = 0;
    big += big << 2;
    4f46:	d9 01       	movw	r26, r18
    4f48:	c8 01       	movw	r24, r16
    4f4a:	42 e0       	ldi	r20, 0x02	; 2
    4f4c:	88 0f       	add	r24, r24
    4f4e:	99 1f       	adc	r25, r25
    4f50:	aa 1f       	adc	r26, r26
    4f52:	bb 1f       	adc	r27, r27
    4f54:	4a 95       	dec	r20
    4f56:	d1 f7       	brne	.-12     	; 0x4f4c <qrencode+0x826>
    4f58:	80 0f       	add	r24, r16
    4f5a:	91 1f       	adc	r25, r17
    4f5c:	a2 1f       	adc	r26, r18
    4f5e:	b3 1f       	adc	r27, r19
    big <<= 1;
    4f60:	88 0f       	add	r24, r24
    4f62:	99 1f       	adc	r25, r25
    4f64:	aa 1f       	adc	r26, r26
    4f66:	bb 1f       	adc	r27, r27
    while (big > WD * WD)
    4f68:	22 9c       	mul	r2, r2
    4f6a:	90 01       	movw	r18, r0
    4f6c:	23 9c       	mul	r2, r3
    4f6e:	30 0d       	add	r19, r0
    4f70:	32 9c       	mul	r3, r2
    4f72:	30 0d       	add	r19, r0
    4f74:	11 24       	eor	r1, r1
    4f76:	44 27       	eor	r20, r20
    4f78:	37 fd       	sbrc	r19, 7
    4f7a:	40 95       	com	r20
    4f7c:	54 2f       	mov	r21, r20
    // black/white imbalance
    if (bw < 0)
        bw = -bw;

    unsigned long big = bw;
    unsigned count = 0;
    4f7e:	60 e0       	ldi	r22, 0x00	; 0
    4f80:	70 e0       	ldi	r23, 0x00	; 0
    4f82:	06 c0       	rjmp	.+12     	; 0x4f90 <qrencode+0x86a>
    big += big << 2;
    big <<= 1;
    while (big > WD * WD)
        big -= WD * WD, count++;
    4f84:	82 1b       	sub	r24, r18
    4f86:	93 0b       	sbc	r25, r19
    4f88:	a4 0b       	sbc	r26, r20
    4f8a:	b5 0b       	sbc	r27, r21
    4f8c:	6f 5f       	subi	r22, 0xFF	; 255
    4f8e:	7f 4f       	sbci	r23, 0xFF	; 255

    unsigned long big = bw;
    unsigned count = 0;
    big += big << 2;
    big <<= 1;
    while (big > WD * WD)
    4f90:	28 17       	cp	r18, r24
    4f92:	39 07       	cpc	r19, r25
    4f94:	4a 07       	cpc	r20, r26
    4f96:	5b 07       	cpc	r21, r27
    4f98:	a8 f3       	brcs	.-22     	; 0x4f84 <qrencode+0x85e>
        big -= WD * WD, count++;
    thisbad += count * N4;
    4f9a:	9b 01       	movw	r18, r22
    4f9c:	22 0f       	add	r18, r18
    4f9e:	33 1f       	adc	r19, r19
    4fa0:	03 e0       	ldi	r16, 0x03	; 3
    4fa2:	66 0f       	add	r22, r22
    4fa4:	77 1f       	adc	r23, r23
    4fa6:	0a 95       	dec	r16
    4fa8:	e1 f7       	brne	.-8      	; 0x4fa2 <qrencode+0x87c>
    4faa:	26 0f       	add	r18, r22
    4fac:	37 1f       	adc	r19, r23
    4fae:	2e 0d       	add	r18, r14
    4fb0:	3f 1d       	adc	r19, r15

    // Y runs
    for (x = 0; x < WD; x++) {
    4fb2:	10 e0       	ldi	r17, 0x00	; 0
    4fb4:	79 01       	movw	r14, r18
    4fb6:	3a c0       	rjmp	.+116    	; 0x502c <qrencode+0x906>
        rlens[0] = 0;
    4fb8:	10 92 71 04 	sts	0x0471, r1
        for (h = b = y = 0; y < WD; y++) {
            if ((b1 = QRBIT(x, y)) == b)
    4fbc:	60 91 47 01 	lds	r22, 0x0147
    4fc0:	70 e0       	ldi	r23, 0x00	; 0
    4fc2:	e1 2f       	mov	r30, r17
    4fc4:	e6 95       	lsr	r30
    4fc6:	e6 95       	lsr	r30
    4fc8:	e6 95       	lsr	r30
    4fca:	f0 e0       	ldi	r31, 0x00	; 0
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    4fcc:	ec 58       	subi	r30, 0x8C	; 140
    4fce:	fe 4f       	sbci	r31, 0xFE	; 254
    thisbad += count * N4;

    // Y runs
    for (x = 0; x < WD; x++) {
        rlens[0] = 0;
        for (h = b = y = 0; y < WD; y++) {
    4fd0:	a0 e0       	ldi	r26, 0x00	; 0
    4fd2:	80 e0       	ldi	r24, 0x00	; 0
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
            if ((b1 = QRBIT(x, y)) == b)
    4fd6:	21 2f       	mov	r18, r17
    4fd8:	30 e0       	ldi	r19, 0x00	; 0
    4fda:	20 95       	com	r18
    4fdc:	30 95       	com	r19
    4fde:	27 70       	andi	r18, 0x07	; 7
    4fe0:	30 70       	andi	r19, 0x00	; 0
    4fe2:	1d c0       	rjmp	.+58     	; 0x501e <qrencode+0x8f8>
    4fe4:	40 81       	ld	r20, Z
    4fe6:	50 e0       	ldi	r21, 0x00	; 0
    4fe8:	02 2e       	mov	r0, r18
    4fea:	02 c0       	rjmp	.+4      	; 0x4ff0 <qrencode+0x8ca>
    4fec:	55 95       	asr	r21
    4fee:	47 95       	ror	r20
    4ff0:	0a 94       	dec	r0
    4ff2:	e2 f7       	brpl	.-8      	; 0x4fec <qrencode+0x8c6>
    4ff4:	41 70       	andi	r20, 0x01	; 1
    4ff6:	4a 17       	cp	r20, r26
    4ff8:	41 f4       	brne	.+16     	; 0x500a <qrencode+0x8e4>
                rlens[h]++;
    4ffa:	a8 2f       	mov	r26, r24
    4ffc:	b0 e0       	ldi	r27, 0x00	; 0
    4ffe:	af 58       	subi	r26, 0x8F	; 143
    5000:	bb 4f       	sbci	r27, 0xFB	; 251
    5002:	5c 91       	ld	r21, X
    5004:	5f 5f       	subi	r21, 0xFF	; 255
    5006:	5c 93       	st	X, r21
    5008:	06 c0       	rjmp	.+12     	; 0x5016 <qrencode+0x8f0>
            else
                rlens[++h] = 1;
    500a:	8f 5f       	subi	r24, 0xFF	; 255
    500c:	a8 2f       	mov	r26, r24
    500e:	b0 e0       	ldi	r27, 0x00	; 0
    5010:	af 58       	subi	r26, 0x8F	; 143
    5012:	bb 4f       	sbci	r27, 0xFB	; 251
    5014:	ac 92       	st	X, r10
    thisbad += count * N4;

    // Y runs
    for (x = 0; x < WD; x++) {
        rlens[0] = 0;
        for (h = b = y = 0; y < WD; y++) {
    5016:	9f 5f       	subi	r25, 0xFF	; 255
    5018:	e6 0f       	add	r30, r22
    501a:	f7 1f       	adc	r31, r23
            if ((b1 = QRBIT(x, y)) == b)
                rlens[h]++;
            else
                rlens[++h] = 1;
            b = b1;
    501c:	a4 2f       	mov	r26, r20
    thisbad += count * N4;

    // Y runs
    for (x = 0; x < WD; x++) {
        rlens[0] = 0;
        for (h = b = y = 0; y < WD; y++) {
    501e:	9c 15       	cp	r25, r12
    5020:	08 f3       	brcs	.-62     	; 0x4fe4 <qrencode+0x8be>
                rlens[h]++;
            else
                rlens[++h] = 1;
            b = b1;
        }
        thisbad += badruns(h);
    5022:	0e 94 89 22 	call	0x4512	; 0x4512 <badruns>
    5026:	e8 0e       	add	r14, r24
    5028:	f9 1e       	adc	r15, r25
    while (big > WD * WD)
        big -= WD * WD, count++;
    thisbad += count * N4;

    // Y runs
    for (x = 0; x < WD; x++) {
    502a:	1f 5f       	subi	r17, 0xFF	; 255
    502c:	1c 15       	cp	r17, r12
    502e:	20 f2       	brcs	.-120    	; 0x4fb8 <qrencode+0x892>
        if (badness < WD * WD * 5 / 4) {        // good enough - masks grow in compute complexity
            best = i;
            break;
        }
#endif
        if (badness < mindem) {
    5030:	69 81       	ldd	r22, Y+1	; 0x01
    5032:	7a 81       	ldd	r23, Y+2	; 0x02
    5034:	e6 16       	cp	r14, r22
    5036:	f7 06       	cpc	r15, r23
    5038:	30 f4       	brcc	.+12     	; 0x5046 <qrencode+0x920>
            mindem = badness;
            best = i;
        }
        if (best == 7)
    503a:	7d 2d       	mov	r23, r13
    503c:	77 30       	cpi	r23, 0x07	; 7
    503e:	01 f1       	breq	.+64     	; 0x5080 <qrencode+0x95a>
    5040:	bd 2c       	mov	r11, r13
    5042:	fa 82       	std	Y+2, r15	; 0x02
    5044:	e9 82       	std	Y+1, r14	; 0x01
            break;              // don't increment i to avoid redoing mask
        memcpy(qrframe, strinbuf, WD * WDB);    // reset filled frame
    5046:	80 91 47 01 	lds	r24, 0x0147
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	28 9e       	mul	r2, r24
    504e:	90 01       	movw	r18, r0
    5050:	29 9e       	mul	r2, r25
    5052:	30 0d       	add	r19, r0
    5054:	38 9e       	mul	r3, r24
    5056:	30 0d       	add	r19, r0
    5058:	11 24       	eor	r1, r1
    505a:	8f 81       	ldd	r24, Y+7	; 0x07
    505c:	98 85       	ldd	r25, Y+8	; 0x08
    505e:	69 85       	ldd	r22, Y+9	; 0x09
    5060:	7a 85       	ldd	r23, Y+10	; 0x0a
    5062:	a9 01       	movw	r20, r18
    5064:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
    unsigned badness;

    stringtoqr();
    fillframe();                // Inisde loop to avoid having separate mask buffer
    memcpy(strinbuf, qrframe, WD * WDB);
    for (i = 0; i < 8; i++) {
    5068:	d3 94       	inc	r13
    506a:	8d 2d       	mov	r24, r13
    506c:	88 30       	cpi	r24, 0x08	; 8
    506e:	09 f0       	breq	.+2      	; 0x5072 <qrencode+0x94c>
    5070:	4d ce       	rjmp	.-870    	; 0x4d0c <qrencode+0x5e6>
        }
        if (best == 7)
            break;              // don't increment i to avoid redoing mask
        memcpy(qrframe, strinbuf, WD * WDB);    // reset filled frame
    }
    if (best != i)              // redo best mask - none good enough, last wasn't best
    5072:	9b 2d       	mov	r25, r11
    5074:	98 30       	cpi	r25, 0x08	; 8
    5076:	31 f0       	breq	.+12     	; 0x5084 <qrencode+0x95e>
        applymask(best);
    5078:	8b 2d       	mov	r24, r11
    507a:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <applymask>
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <qrencode+0x95e>
#endif
        if (badness < mindem) {
            mindem = badness;
            best = i;
        }
        if (best == 7)
    5080:	17 e0       	ldi	r17, 0x07	; 7
    5082:	b1 2e       	mov	r11, r17
};

static void addfmt(unsigned char masknum)
{
    unsigned fmtbits;
    unsigned char i, lvl = ECCLEVEL - 1;
    5084:	e0 91 45 01 	lds	r30, 0x0145
    5088:	e1 50       	subi	r30, 0x01	; 1

    fmtbits = pgm_read_word(&fmtword[masknum + (lvl << 3)]);
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	b3 e0       	ldi	r27, 0x03	; 3
    508e:	ee 0f       	add	r30, r30
    5090:	ff 1f       	adc	r31, r31
    5092:	ba 95       	dec	r27
    5094:	e1 f7       	brne	.-8      	; 0x508e <qrencode+0x968>
    5096:	eb 0d       	add	r30, r11
    5098:	f1 1d       	adc	r31, r1
    509a:	ee 0f       	add	r30, r30
    509c:	ff 1f       	adc	r31, r31
    509e:	eb 52       	subi	r30, 0x2B	; 43
    50a0:	f5 4d       	sbci	r31, 0xD5	; 213
    50a2:	85 91       	lpm	r24, Z+
    50a4:	94 91       	lpm	r25, Z+
    // low byte
    for (i = 0; i < 8; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
            SETQRBIT(WD - 1 - i, 8);
    50a6:	40 91 47 01 	lds	r20, 0x0147
    50aa:	50 e0       	ldi	r21, 0x00	; 0
    50ac:	ba 01       	movw	r22, r20
    50ae:	e3 e0       	ldi	r30, 0x03	; 3
    50b0:	66 0f       	add	r22, r22
    50b2:	77 1f       	adc	r23, r23
    50b4:	ea 95       	dec	r30
    50b6:	e1 f7       	brne	.-8      	; 0x50b0 <qrencode+0x98a>
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    50b8:	da 01       	movw	r26, r20
    50ba:	ab 58       	subi	r26, 0x8B	; 139
    50bc:	be 4f       	sbci	r27, 0xFE	; 254

    fmtbits = pgm_read_word(&fmtword[masknum + (lvl << 3)]);
    // low byte
    for (i = 0; i < 8; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
            SETQRBIT(WD - 1 - i, 8);
    50be:	20 91 46 01 	lds	r18, 0x0146
    50c2:	30 e0       	ldi	r19, 0x00	; 0
    50c4:	21 50       	subi	r18, 0x01	; 1
    50c6:	30 40       	sbci	r19, 0x00	; 0
    unsigned fmtbits;
    unsigned char i, lvl = ECCLEVEL - 1;

    fmtbits = pgm_read_word(&fmtword[masknum + (lvl << 3)]);
    // low byte
    for (i = 0; i < 8; i++, fmtbits >>= 1)
    50c8:	ee 24       	eor	r14, r14
        if (fmtbits & 1) {
            SETQRBIT(WD - 1 - i, 8);
    50ca:	00 e8       	ldi	r16, 0x80	; 128
    50cc:	10 e0       	ldi	r17, 0x00	; 0
    50ce:	4b 01       	movw	r8, r22
    50d0:	cb 80       	ldd	r12, Y+3	; 0x03
    50d2:	dc 80       	ldd	r13, Y+4	; 0x04
    unsigned char i, lvl = ECCLEVEL - 1;

    fmtbits = pgm_read_word(&fmtword[masknum + (lvl << 3)]);
    // low byte
    for (i = 0; i < 8; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
    50d4:	80 ff       	sbrs	r24, 0
    50d6:	22 c0       	rjmp	.+68     	; 0x511c <qrencode+0x9f6>
            SETQRBIT(WD - 1 - i, 8);
    50d8:	f9 01       	movw	r30, r18
    50da:	73 e0       	ldi	r23, 0x03	; 3
    50dc:	f5 95       	asr	r31
    50de:	e7 95       	ror	r30
    50e0:	7a 95       	dec	r23
    50e2:	e1 f7       	brne	.-8      	; 0x50dc <qrencode+0x9b6>
    50e4:	e8 0d       	add	r30, r8
    50e6:	f9 1d       	adc	r31, r9
    50e8:	ec 58       	subi	r30, 0x8C	; 140
    50ea:	fe 4f       	sbci	r31, 0xFE	; 254
    50ec:	b9 01       	movw	r22, r18
    50ee:	67 70       	andi	r22, 0x07	; 7
    50f0:	70 70       	andi	r23, 0x00	; 0
    50f2:	58 01       	movw	r10, r16
    50f4:	02 c0       	rjmp	.+4      	; 0x50fa <qrencode+0x9d4>
    50f6:	b5 94       	asr	r11
    50f8:	a7 94       	ror	r10
    50fa:	6a 95       	dec	r22
    50fc:	e2 f7       	brpl	.-8      	; 0x50f6 <qrencode+0x9d0>
    50fe:	b5 01       	movw	r22, r10
    5100:	b0 80       	ld	r11, Z
    5102:	b6 2a       	or	r11, r22
    5104:	b0 82       	st	Z, r11
            if (i < 6)
    5106:	6e 2d       	mov	r22, r14
    5108:	66 30       	cpi	r22, 0x06	; 6
    510a:	28 f4       	brcc	.+10     	; 0x5116 <qrencode+0x9f0>
                SETQRBIT(8, i);
    510c:	f6 01       	movw	r30, r12
    510e:	60 81       	ld	r22, Z
    5110:	60 68       	ori	r22, 0x80	; 128
    5112:	60 83       	st	Z, r22
    5114:	03 c0       	rjmp	.+6      	; 0x511c <qrencode+0x9f6>
            else
                SETQRBIT(8, i + 1);
    5116:	6c 91       	ld	r22, X
    5118:	60 68       	ori	r22, 0x80	; 128
    511a:	6c 93       	st	X, r22
    unsigned fmtbits;
    unsigned char i, lvl = ECCLEVEL - 1;

    fmtbits = pgm_read_word(&fmtword[masknum + (lvl << 3)]);
    // low byte
    for (i = 0; i < 8; i++, fmtbits >>= 1)
    511c:	e3 94       	inc	r14
    511e:	96 95       	lsr	r25
    5120:	87 95       	ror	r24
    5122:	c4 0e       	add	r12, r20
    5124:	d5 1e       	adc	r13, r21
    5126:	a4 0f       	add	r26, r20
    5128:	b5 1f       	adc	r27, r21
    512a:	21 50       	subi	r18, 0x01	; 1
    512c:	30 40       	sbci	r19, 0x00	; 0
    512e:	fe 2d       	mov	r31, r14
    5130:	f8 30       	cpi	r31, 0x08	; 8
    5132:	81 f6       	brne	.-96     	; 0x50d4 <qrencode+0x9ae>
                SETQRBIT(8, i + 1);
        }
    // high byte
    for (i = 0; i < 7; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
            SETQRBIT(8, WD - 7 + i);
    5134:	40 91 47 01 	lds	r20, 0x0147
    5138:	50 e0       	ldi	r21, 0x00	; 0
            if (i)
                SETQRBIT(6 - i, 8);
    513a:	fa 01       	movw	r30, r20
    513c:	23 e0       	ldi	r18, 0x03	; 3
    513e:	ee 0f       	add	r30, r30
    5140:	ff 1f       	adc	r31, r31
    5142:	2a 95       	dec	r18
    5144:	e1 f7       	brne	.-8      	; 0x513e <qrencode+0xa18>
                SETQRBIT(8, i + 1);
        }
    // high byte
    for (i = 0; i < 7; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
            SETQRBIT(8, WD - 7 + i);
    5146:	20 91 46 01 	lds	r18, 0x0146
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	27 50       	subi	r18, 0x07	; 7
    514e:	30 40       	sbci	r19, 0x00	; 0
            else
                SETQRBIT(7, 8);
        }
}

void qrencode()
    5150:	24 9f       	mul	r18, r20
    5152:	d0 01       	movw	r26, r0
    5154:	25 9f       	mul	r18, r21
    5156:	b0 0d       	add	r27, r0
    5158:	34 9f       	mul	r19, r20
    515a:	b0 0d       	add	r27, r0
    515c:	11 24       	eor	r1, r1
    515e:	ab 58       	subi	r26, 0x8B	; 139
    5160:	be 4f       	sbci	r27, 0xFE	; 254
    5162:	26 e0       	ldi	r18, 0x06	; 6
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	10 e0       	ldi	r17, 0x00	; 0
    5168:	ec 58       	subi	r30, 0x8C	; 140
    516a:	fe 4f       	sbci	r31, 0xFE	; 254
    // high byte
    for (i = 0; i < 7; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
            SETQRBIT(8, WD - 7 + i);
            if (i)
                SETQRBIT(6 - i, 8);
    516c:	60 e8       	ldi	r22, 0x80	; 128
    516e:	70 e0       	ldi	r23, 0x00	; 0
            else
                SETQRBIT(8, i + 1);
        }
    // high byte
    for (i = 0; i < 7; i++, fmtbits >>= 1)
        if (fmtbits & 1) {
    5170:	80 ff       	sbrs	r24, 0
    5172:	16 c0       	rjmp	.+44     	; 0x51a0 <qrencode+0xa7a>
            SETQRBIT(8, WD - 7 + i);
    5174:	0c 91       	ld	r16, X
    5176:	00 68       	ori	r16, 0x80	; 128
    5178:	0c 93       	st	X, r16
            if (i)
    517a:	11 23       	and	r17, r17
    517c:	71 f0       	breq	.+28     	; 0x519a <qrencode+0xa74>
                SETQRBIT(6 - i, 8);
    517e:	07 e0       	ldi	r16, 0x07	; 7
    5180:	a0 2e       	mov	r10, r16
    5182:	b1 2c       	mov	r11, r1
    5184:	a2 22       	and	r10, r18
    5186:	b3 22       	and	r11, r19
    5188:	6b 01       	movw	r12, r22
    518a:	02 c0       	rjmp	.+4      	; 0x5190 <qrencode+0xa6a>
    518c:	d5 94       	asr	r13
    518e:	c7 94       	ror	r12
    5190:	aa 94       	dec	r10
    5192:	e2 f7       	brpl	.-8      	; 0x518c <qrencode+0xa66>
    5194:	00 81       	ld	r16, Z
    5196:	0c 29       	or	r16, r12
    5198:	02 c0       	rjmp	.+4      	; 0x519e <qrencode+0xa78>
            else
                SETQRBIT(7, 8);
    519a:	00 81       	ld	r16, Z
    519c:	01 60       	ori	r16, 0x01	; 1
    519e:	00 83       	st	Z, r16
                SETQRBIT(8, i);
            else
                SETQRBIT(8, i + 1);
        }
    // high byte
    for (i = 0; i < 7; i++, fmtbits >>= 1)
    51a0:	1f 5f       	subi	r17, 0xFF	; 255
    51a2:	21 50       	subi	r18, 0x01	; 1
    51a4:	30 40       	sbci	r19, 0x00	; 0
    51a6:	a4 0f       	add	r26, r20
    51a8:	b5 1f       	adc	r27, r21
    51aa:	17 30       	cpi	r17, 0x07	; 7
    51ac:	19 f0       	breq	.+6      	; 0x51b4 <qrencode+0xa8e>
    51ae:	96 95       	lsr	r25
    51b0:	87 95       	ror	r24
    51b2:	de cf       	rjmp	.-68     	; 0x5170 <qrencode+0xa4a>
        memcpy(qrframe, strinbuf, WD * WDB);    // reset filled frame
    }
    if (best != i)              // redo best mask - none good enough, last wasn't best
        applymask(best);
    addfmt(best);               // add in final format bytes
}
    51b4:	2f 96       	adiw	r28, 0x0f	; 15
    51b6:	0f b6       	in	r0, 0x3f	; 63
    51b8:	f8 94       	cli
    51ba:	de bf       	out	0x3e, r29	; 62
    51bc:	0f be       	out	0x3f, r0	; 63
    51be:	cd bf       	out	0x3d, r28	; 61
    51c0:	cf 91       	pop	r28
    51c2:	df 91       	pop	r29
    51c4:	1f 91       	pop	r17
    51c6:	0f 91       	pop	r16
    51c8:	ff 90       	pop	r15
    51ca:	ef 90       	pop	r14
    51cc:	df 90       	pop	r13
    51ce:	cf 90       	pop	r12
    51d0:	bf 90       	pop	r11
    51d2:	af 90       	pop	r10
    51d4:	9f 90       	pop	r9
    51d6:	8f 90       	pop	r8
    51d8:	7f 90       	pop	r7
    51da:	6f 90       	pop	r6
    51dc:	5f 90       	pop	r5
    51de:	4f 90       	pop	r4
    51e0:	3f 90       	pop	r3
    51e2:	2f 90       	pop	r2
    51e4:	08 95       	ret

000051e6 <i2c_enable>:

/** \brief This function initializes and enables the I2C peripheral.
 * */
void i2c_enable(void)
{
	PRR &= ~_BV(PRTWI);            // Disable power saving.
    51e6:	e4 e6       	ldi	r30, 0x64	; 100
    51e8:	f0 e0       	ldi	r31, 0x00	; 0
    51ea:	80 81       	ld	r24, Z
    51ec:	8f 77       	andi	r24, 0x7F	; 127
    51ee:	80 83       	st	Z, r24
		}
		PORTC &= ~ (_BV(PC3) | _BV(PC4) | _BV(PC5)); 

	}
#endif
	TWBR = ((uint8_t) (((double) F_CPU / I2C_CLOCK - 16.0) / 2.0 + 0.5)); // Set the baud rate
    51f0:	88 e4       	ldi	r24, 0x48	; 72
    51f2:	80 93 b8 00 	sts	0x00B8, r24
	//TWBR = (uint8_t)72; // Set the baud rate
}
    51f6:	08 95       	ret

000051f8 <i2c_disable>:


/** \brief This function disables the I2C peripheral. */
void i2c_disable(void)
{
	TWCR = 0;                       // Disable TWI.
    51f8:	10 92 bc 00 	sts	0x00BC, r1
	PRR |= _BV(PRTWI);             // Enable power saving.
    51fc:	e4 e6       	ldi	r30, 0x64	; 100
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	80 81       	ld	r24, Z
    5202:	80 68       	ori	r24, 0x80	; 128
    5204:	80 83       	st	Z, r24
}
    5206:	08 95       	ret

00005208 <i2c_send_start>:
/** \brief This function creates a Start condition (SDA low, then SCL low).
 * \return status of the operation
 * */
uint8_t i2c_send_start(void)
{
	PORTC |= _BV(PC3);
    5208:	43 9a       	sbi	0x08, 3	; 8
	
	
	uint8_t timeout_counter = I2C_START_TIMEOUT;
	uint8_t i2c_status;

	TWCR = (_BV(TWEN) | _BV(TWSTA) | _BV(TWINT));
    520a:	84 ea       	ldi	r24, 0xA4	; 164
    520c:	80 93 bc 00 	sts	0x00BC, r24
uint8_t i2c_send_start(void)
{
	PORTC |= _BV(PC3);
	
	
	uint8_t timeout_counter = I2C_START_TIMEOUT;
    5210:	8a ef       	ldi	r24, 0xFA	; 250

    // while (!(TWCR & (1<<TWINT)));
	
	// Wait for start condition to be sent
	do {
		if (timeout_counter-- == 0) {
    5212:	81 50       	subi	r24, 0x01	; 1
    5214:	8f 3f       	cpi	r24, 0xFF	; 255
    5216:	61 f0       	breq	.+24     	; 0x5230 <i2c_send_start+0x28>
			// Toggle debug pin
			//PORTC &=~ _BV(PC3);
			return I2C_FUNCTION_RETCODE_TIMEOUT;
		}
	} while ((TWCR & (_BV(TWINT))) == 0);
    5218:	90 91 bc 00 	lds	r25, 0x00BC
    521c:	97 ff       	sbrs	r25, 7
    521e:	f9 cf       	rjmp	.-14     	; 0x5212 <i2c_send_start+0xa>

	i2c_status = TW_STATUS;
    5220:	80 91 b9 00 	lds	r24, 0x00B9
    5224:	88 7f       	andi	r24, 0xF8	; 248
	if ((i2c_status != TW_START) && (i2c_status != TW_REP_START))
    5226:	88 30       	cpi	r24, 0x08	; 8
    5228:	29 f0       	breq	.+10     	; 0x5234 <i2c_send_start+0x2c>
    522a:	80 31       	cpi	r24, 0x10	; 16
    522c:	29 f4       	brne	.+10     	; 0x5238 <i2c_send_start+0x30>
    522e:	02 c0       	rjmp	.+4      	; 0x5234 <i2c_send_start+0x2c>
	// Wait for start condition to be sent
	do {
		if (timeout_counter-- == 0) {
			// Toggle debug pin
			//PORTC &=~ _BV(PC3);
			return I2C_FUNCTION_RETCODE_TIMEOUT;
    5230:	81 ef       	ldi	r24, 0xF1	; 241
    5232:	08 95       	ret
	i2c_status = TW_STATUS;
	if ((i2c_status != TW_START) && (i2c_status != TW_REP_START))
		return I2C_FUNCTION_RETCODE_COMM_FAIL;

	//PORTC &=~ _BV(PC3);
	return I2C_FUNCTION_RETCODE_SUCCESS;
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	08 95       	ret
		}
	} while ((TWCR & (_BV(TWINT))) == 0);

	i2c_status = TW_STATUS;
	if ((i2c_status != TW_START) && (i2c_status != TW_REP_START))
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
    5238:	80 ef       	ldi	r24, 0xF0	; 240

	//PORTC &=~ _BV(PC3);
	return I2C_FUNCTION_RETCODE_SUCCESS;
}
    523a:	08 95       	ret

0000523c <i2c_send_stop>:
 * */
uint8_t i2c_send_stop(void)
{
	uint8_t timeout_counter = I2C_STOP_TIMEOUT;

	TWCR = (_BV(TWEN) | _BV(TWSTO) | _BV(TWINT));
    523c:	84 e9       	ldi	r24, 0x94	; 148
    523e:	80 93 bc 00 	sts	0x00BC, r24
 * \return status of the operation

 * */
uint8_t i2c_send_stop(void)
{
	uint8_t timeout_counter = I2C_STOP_TIMEOUT;
    5242:	8a ef       	ldi	r24, 0xFA	; 250

	TWCR = (_BV(TWEN) | _BV(TWSTO) | _BV(TWINT));
	do {
		if (timeout_counter-- == 0)
    5244:	81 50       	subi	r24, 0x01	; 1
    5246:	8f 3f       	cpi	r24, 0xFF	; 255
    5248:	51 f0       	breq	.+20     	; 0x525e <i2c_send_stop+0x22>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & _BV(TWSTO)) > 0);
    524a:	90 91 bc 00 	lds	r25, 0x00BC
    524e:	94 fd       	sbrc	r25, 4
    5250:	f9 cf       	rjmp	.-14     	; 0x5244 <i2c_send_stop+0x8>

	if (TW_STATUS == TW_BUS_ERROR)
    5252:	80 91 b9 00 	lds	r24, 0x00B9
    5256:	88 7f       	andi	r24, 0xF8	; 248
    5258:	21 f4       	brne	.+8      	; 0x5262 <i2c_send_stop+0x26>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
    525a:	80 ef       	ldi	r24, 0xF0	; 240
    525c:	08 95       	ret
	uint8_t timeout_counter = I2C_STOP_TIMEOUT;

	TWCR = (_BV(TWEN) | _BV(TWSTO) | _BV(TWINT));
	do {
		if (timeout_counter-- == 0)
			return I2C_FUNCTION_RETCODE_TIMEOUT;
    525e:	81 ef       	ldi	r24, 0xF1	; 241
    5260:	08 95       	ret
	} while ((TWCR & _BV(TWSTO)) > 0);

	if (TW_STATUS == TW_BUS_ERROR)
		return I2C_FUNCTION_RETCODE_COMM_FAIL;

	return I2C_FUNCTION_RETCODE_SUCCESS;
    5262:	80 e0       	ldi	r24, 0x00	; 0
}
    5264:	08 95       	ret

00005266 <i2c_send_bytes>:
	uint8_t timeout_counter;
	uint8_t twi_status;
	uint8_t i;

	
	for (i = 0; i < count; i++) {
    5266:	e6 2f       	mov	r30, r22
    5268:	f7 2f       	mov	r31, r23
		TWDR = *data++;
		TWCR = _BV(TWEN) | _BV(TWINT);
    526a:	24 e8       	ldi	r18, 0x84	; 132
	uint8_t timeout_counter;
	uint8_t twi_status;
	uint8_t i;

	
	for (i = 0; i < count; i++) {
    526c:	16 c0       	rjmp	.+44     	; 0x529a <i2c_send_bytes+0x34>
		TWDR = *data++;
    526e:	91 91       	ld	r25, Z+
    5270:	90 93 bb 00 	sts	0x00BB, r25
		TWCR = _BV(TWEN) | _BV(TWINT);
    5274:	20 93 bc 00 	sts	0x00BC, r18

		timeout_counter = I2C_BYTE_TIMEOUT;
    5278:	9a ef       	ldi	r25, 0xFA	; 250
		do {
			if (timeout_counter-- == 0) {
    527a:	91 50       	subi	r25, 0x01	; 1
    527c:	9f 3f       	cpi	r25, 0xFF	; 255
    527e:	99 f0       	breq	.+38     	; 0x52a6 <i2c_send_bytes+0x40>
				//PORTC &=~ _BV(PC3);
				return I2C_FUNCTION_RETCODE_TIMEOUT;
			}
		} while ((TWCR & (_BV(TWINT))) == 0);
    5280:	30 91 bc 00 	lds	r19, 0x00BC
    5284:	37 ff       	sbrs	r19, 7
    5286:	f9 cf       	rjmp	.-14     	; 0x527a <i2c_send_bytes+0x14>

		twi_status = TW_STATUS;
    5288:	90 91 b9 00 	lds	r25, 0x00B9
    528c:	98 7f       	andi	r25, 0xF8	; 248
		if ((twi_status != TW_MT_SLA_ACK)
    528e:	98 31       	cpi	r25, 0x18	; 24
    5290:	21 f0       	breq	.+8      	; 0x529a <i2c_send_bytes+0x34>
					&& (twi_status != TW_MT_DATA_ACK)
    5292:	98 32       	cpi	r25, 0x28	; 40
    5294:	11 f0       	breq	.+4      	; 0x529a <i2c_send_bytes+0x34>
					&& (twi_status != TW_MR_SLA_ACK))
    5296:	90 34       	cpi	r25, 0x40	; 64
    5298:	41 f4       	brne	.+16     	; 0x52aa <i2c_send_bytes+0x44>
	uint8_t timeout_counter;
	uint8_t twi_status;
	uint8_t i;

	
	for (i = 0; i < count; i++) {
    529a:	9e 2f       	mov	r25, r30
    529c:	96 1b       	sub	r25, r22
    529e:	98 17       	cp	r25, r24
    52a0:	30 f3       	brcs	.-52     	; 0x526e <i2c_send_bytes+0x8>
					&& (twi_status != TW_MR_SLA_ACK))
			// Return error if byte got nacked.
			return I2C_FUNCTION_RETCODE_NACK;
	}

	return I2C_FUNCTION_RETCODE_SUCCESS;
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	08 95       	ret

		timeout_counter = I2C_BYTE_TIMEOUT;
		do {
			if (timeout_counter-- == 0) {
				//PORTC &=~ _BV(PC3);
				return I2C_FUNCTION_RETCODE_TIMEOUT;
    52a6:	81 ef       	ldi	r24, 0xF1	; 241
    52a8:	08 95       	ret
		twi_status = TW_STATUS;
		if ((twi_status != TW_MT_SLA_ACK)
					&& (twi_status != TW_MT_DATA_ACK)
					&& (twi_status != TW_MR_SLA_ACK))
			// Return error if byte got nacked.
			return I2C_FUNCTION_RETCODE_NACK;
    52aa:	88 ef       	ldi	r24, 0xF8	; 248
	}

	return I2C_FUNCTION_RETCODE_SUCCESS;
}
    52ac:	08 95       	ret

000052ae <i2c_receive_byte>:
uint8_t i2c_receive_byte(uint8_t *data)
{
	uint8_t timeout_counter = I2C_BYTE_TIMEOUT;

	// Enable acknowledging data.
	TWCR = (_BV(TWEN) | _BV(TWINT) | _BV(TWEA));
    52ae:	24 ec       	ldi	r18, 0xC4	; 196
    52b0:	20 93 bc 00 	sts	0x00BC, r18
 * \param[out] data pointer to received byte
 * \return status of the operation
 */
uint8_t i2c_receive_byte(uint8_t *data)
{
	uint8_t timeout_counter = I2C_BYTE_TIMEOUT;
    52b4:	2a ef       	ldi	r18, 0xFA	; 250

	// Enable acknowledging data.
	TWCR = (_BV(TWEN) | _BV(TWINT) | _BV(TWEA));
	do {
		if (timeout_counter-- == 0)
    52b6:	21 50       	subi	r18, 0x01	; 1
    52b8:	2f 3f       	cpi	r18, 0xFF	; 255
    52ba:	99 f0       	breq	.+38     	; 0x52e2 <i2c_receive_byte+0x34>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & (_BV(TWINT))) == 0);
    52bc:	30 91 bc 00 	lds	r19, 0x00BC
    52c0:	37 ff       	sbrs	r19, 7
    52c2:	f9 cf       	rjmp	.-14     	; 0x52b6 <i2c_receive_byte+0x8>

	if (TW_STATUS != TW_MR_DATA_ACK) {
    52c4:	20 91 b9 00 	lds	r18, 0x00B9
    52c8:	28 7f       	andi	r18, 0xF8	; 248
    52ca:	20 35       	cpi	r18, 0x50	; 80
    52cc:	21 f0       	breq	.+8      	; 0x52d6 <i2c_receive_byte+0x28>
		// Do not override original error.
		(void) i2c_send_stop();
    52ce:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
    52d2:	80 ef       	ldi	r24, 0xF0	; 240
    52d4:	08 95       	ret
	}
	*data = TWDR;
    52d6:	20 91 bb 00 	lds	r18, 0x00BB
    52da:	fc 01       	movw	r30, r24
    52dc:	20 83       	st	Z, r18

	return I2C_FUNCTION_RETCODE_SUCCESS;
    52de:	80 e0       	ldi	r24, 0x00	; 0
    52e0:	08 95       	ret

	// Enable acknowledging data.
	TWCR = (_BV(TWEN) | _BV(TWINT) | _BV(TWEA));
	do {
		if (timeout_counter-- == 0)
			return I2C_FUNCTION_RETCODE_TIMEOUT;
    52e2:	81 ef       	ldi	r24, 0xF1	; 241
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}
	*data = TWDR;

	return I2C_FUNCTION_RETCODE_SUCCESS;
}
    52e4:	08 95       	ret

000052e6 <i2c_receive_bytes>:
{
	uint8_t i;
	uint8_t timeout_counter;

	// Acknowledge all bytes except the last one.
	for (i = 0; i < count - 1; i++) {
    52e6:	e6 2f       	mov	r30, r22
    52e8:	f7 2f       	mov	r31, r23
    52ea:	90 e0       	ldi	r25, 0x00	; 0
    52ec:	01 97       	sbiw	r24, 0x01	; 1
		// Enable acknowledging data.
		TWCR = (_BV(TWEN) | _BV(TWINT) | _BV(TWEA));
    52ee:	44 ec       	ldi	r20, 0xC4	; 196
{
	uint8_t i;
	uint8_t timeout_counter;

	// Acknowledge all bytes except the last one.
	for (i = 0; i < count - 1; i++) {
    52f0:	12 c0       	rjmp	.+36     	; 0x5316 <i2c_receive_bytes+0x30>
		// Enable acknowledging data.
		TWCR = (_BV(TWEN) | _BV(TWINT) | _BV(TWEA));
    52f2:	40 93 bc 00 	sts	0x00BC, r20
		timeout_counter = I2C_BYTE_TIMEOUT;
    52f6:	2a ef       	ldi	r18, 0xFA	; 250
		do {
			if (timeout_counter-- == 0)
    52f8:	21 50       	subi	r18, 0x01	; 1
    52fa:	2f 3f       	cpi	r18, 0xFF	; 255
    52fc:	61 f1       	breq	.+88     	; 0x5356 <i2c_receive_bytes+0x70>
				return I2C_FUNCTION_RETCODE_TIMEOUT;
		} while ((TWCR & (_BV(TWINT))) == 0);
    52fe:	30 91 bc 00 	lds	r19, 0x00BC
    5302:	37 ff       	sbrs	r19, 7
    5304:	f9 cf       	rjmp	.-14     	; 0x52f8 <i2c_receive_bytes+0x12>

		if (TW_STATUS != TW_MR_DATA_ACK) {
    5306:	20 91 b9 00 	lds	r18, 0x00B9
    530a:	28 7f       	andi	r18, 0xF8	; 248
    530c:	20 35       	cpi	r18, 0x50	; 80
    530e:	c9 f4       	brne	.+50     	; 0x5342 <i2c_receive_bytes+0x5c>
			// Do not override original error.
			(void) i2c_send_stop();
			return I2C_FUNCTION_RETCODE_COMM_FAIL;
		}
		*data++ = TWDR;
    5310:	20 91 bb 00 	lds	r18, 0x00BB
    5314:	21 93       	st	Z+, r18
{
	uint8_t i;
	uint8_t timeout_counter;

	// Acknowledge all bytes except the last one.
	for (i = 0; i < count - 1; i++) {
    5316:	2e 2f       	mov	r18, r30
    5318:	26 1b       	sub	r18, r22
    531a:	30 e0       	ldi	r19, 0x00	; 0
    531c:	28 17       	cp	r18, r24
    531e:	39 07       	cpc	r19, r25
    5320:	44 f3       	brlt	.-48     	; 0x52f2 <i2c_receive_bytes+0xc>
		}
		*data++ = TWDR;
	}

	// Disable acknowledging data for the last byte.
	TWCR = (_BV(TWEN) | _BV(TWINT));
    5322:	84 e8       	ldi	r24, 0x84	; 132
    5324:	80 93 bc 00 	sts	0x00BC, r24
	timeout_counter = I2C_BYTE_TIMEOUT;
    5328:	8a ef       	ldi	r24, 0xFA	; 250
	do {
		if (timeout_counter-- == 0)
    532a:	81 50       	subi	r24, 0x01	; 1
    532c:	8f 3f       	cpi	r24, 0xFF	; 255
    532e:	a9 f0       	breq	.+42     	; 0x535a <i2c_receive_bytes+0x74>
			return I2C_FUNCTION_RETCODE_TIMEOUT;
	} while ((TWCR & (_BV(TWINT))) == 0);
    5330:	90 91 bc 00 	lds	r25, 0x00BC
    5334:	97 ff       	sbrs	r25, 7
    5336:	f9 cf       	rjmp	.-14     	; 0x532a <i2c_receive_bytes+0x44>

	if (TW_STATUS != TW_MR_DATA_NACK) {
    5338:	80 91 b9 00 	lds	r24, 0x00B9
    533c:	88 7f       	andi	r24, 0xF8	; 248
    533e:	88 35       	cpi	r24, 0x58	; 88
    5340:	21 f0       	breq	.+8      	; 0x534a <i2c_receive_bytes+0x64>
		// Do not override original error.
		(void) i2c_send_stop();
    5342:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
    5346:	80 ef       	ldi	r24, 0xF0	; 240
    5348:	08 95       	ret
	}
	*data = TWDR;
    534a:	80 91 bb 00 	lds	r24, 0x00BB
    534e:	80 83       	st	Z, r24

	return i2c_send_stop();
    5350:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>
    5354:	08 95       	ret
		// Enable acknowledging data.
		TWCR = (_BV(TWEN) | _BV(TWINT) | _BV(TWEA));
		timeout_counter = I2C_BYTE_TIMEOUT;
		do {
			if (timeout_counter-- == 0)
				return I2C_FUNCTION_RETCODE_TIMEOUT;
    5356:	81 ef       	ldi	r24, 0xF1	; 241
    5358:	08 95       	ret
	// Disable acknowledging data for the last byte.
	TWCR = (_BV(TWEN) | _BV(TWINT));
	timeout_counter = I2C_BYTE_TIMEOUT;
	do {
		if (timeout_counter-- == 0)
			return I2C_FUNCTION_RETCODE_TIMEOUT;
    535a:	81 ef       	ldi	r24, 0xF1	; 241
		return I2C_FUNCTION_RETCODE_COMM_FAIL;
	}
	*data = TWDR;

	return i2c_send_stop();
}
    535c:	08 95       	ret

0000535e <sha204c_calculate_crc>:
 *
 * \param[in] length number of bytes in buffer
 * \param[in] data pointer to data for which CRC should be calculated
 * \param[out] crc pointer to 16-bit CRC
 */
void sha204c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc) {
    535e:	df 92       	push	r13
    5360:	ef 92       	push	r14
    5362:	ff 92       	push	r15
    5364:	0f 93       	push	r16
    5366:	1f 93       	push	r17
    5368:	fa 01       	movw	r30, r20
	uint16_t crc_register = 0;
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
    536a:	26 2f       	mov	r18, r22
    536c:	37 2f       	mov	r19, r23
    536e:	d9 01       	movw	r26, r18
 * \param[in] data pointer to data for which CRC should be calculated
 * \param[out] crc pointer to 16-bit CRC
 */
void sha204c_calculate_crc(uint8_t length, uint8_t *data, uint8_t *crc) {
	uint8_t counter;
	uint16_t crc_register = 0;
    5370:	20 e0       	ldi	r18, 0x00	; 0
    5372:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
    5374:	90 e0       	ldi	r25, 0x00	; 0

		 // Shift CRC to the left by 1.
		 crc_register <<= 1;

		 if ((data_bit ^ crc_bit) != 0)
			crc_register ^= polynom;
    5376:	45 e0       	ldi	r20, 0x05	; 5
    5378:	50 e8       	ldi	r21, 0x80	; 128
	uint16_t crc_register = 0;
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
    537a:	14 c0       	rjmp	.+40     	; 0x53a4 <sha204c_calculate_crc+0x46>
	  for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
		 data_bit = (data[counter] & shift_register) ? 1 : 0;
		 crc_bit = crc_register >> 15;
    537c:	e3 2e       	mov	r14, r19
    537e:	ee 1c       	adc	r14, r14
    5380:	ee 24       	eor	r14, r14
    5382:	ee 1c       	adc	r14, r14

		 // Shift CRC to the left by 1.
		 crc_register <<= 1;
    5384:	22 0f       	add	r18, r18
    5386:	33 1f       	adc	r19, r19
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
	  for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
		 data_bit = (data[counter] & shift_register) ? 1 : 0;
    5388:	d1 2e       	mov	r13, r17
    538a:	df 20       	and	r13, r15
    538c:	01 e0       	ldi	r16, 0x01	; 1
    538e:	09 f4       	brne	.+2      	; 0x5392 <sha204c_calculate_crc+0x34>
    5390:	00 e0       	ldi	r16, 0x00	; 0
		 crc_bit = crc_register >> 15;

		 // Shift CRC to the left by 1.
		 crc_register <<= 1;

		 if ((data_bit ^ crc_bit) != 0)
    5392:	0e 15       	cp	r16, r14
    5394:	11 f0       	breq	.+4      	; 0x539a <sha204c_calculate_crc+0x3c>
			crc_register ^= polynom;
    5396:	24 27       	eor	r18, r20
    5398:	35 27       	eor	r19, r21
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
	  for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
    539a:	11 0f       	add	r17, r17
    539c:	61 50       	subi	r22, 0x01	; 1
    539e:	70 40       	sbci	r23, 0x00	; 0
    53a0:	69 f7       	brne	.-38     	; 0x537c <sha204c_calculate_crc+0x1e>
	uint16_t crc_register = 0;
	uint16_t polynom = 0x8005;
	uint8_t shift_register;
	uint8_t data_bit, crc_bit;

	for (counter = 0; counter < length; counter++) {
    53a2:	9f 5f       	subi	r25, 0xFF	; 255
    53a4:	98 17       	cp	r25, r24
    53a6:	28 f4       	brcc	.+10     	; 0x53b2 <sha204c_calculate_crc+0x54>
	  for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1) {
		 data_bit = (data[counter] & shift_register) ? 1 : 0;
    53a8:	fd 90       	ld	r15, X+
    53aa:	68 e0       	ldi	r22, 0x08	; 8
    53ac:	70 e0       	ldi	r23, 0x00	; 0
    53ae:	11 e0       	ldi	r17, 0x01	; 1
    53b0:	e5 cf       	rjmp	.-54     	; 0x537c <sha204c_calculate_crc+0x1e>

		 if ((data_bit ^ crc_bit) != 0)
			crc_register ^= polynom;
	  }
	}
	crc[0] = (uint8_t) (crc_register & 0x00FF);
    53b2:	20 83       	st	Z, r18
	crc[1] = (uint8_t) (crc_register >> 8);
    53b4:	31 83       	std	Z+1, r19	; 0x01
}
    53b6:	1f 91       	pop	r17
    53b8:	0f 91       	pop	r16
    53ba:	ff 90       	pop	r15
    53bc:	ef 90       	pop	r14
    53be:	df 90       	pop	r13
    53c0:	08 95       	ret

000053c2 <sha204c_check_crc>:
/** \brief This function checks the consistency of a response.
 * \param[in] response pointer to response
 * \return status of the consistency check
 */
uint8_t sha204c_check_crc(uint8_t *response)
{
    53c2:	0f 93       	push	r16
    53c4:	1f 93       	push	r17
    53c6:	df 93       	push	r29
    53c8:	cf 93       	push	r28
    53ca:	00 d0       	rcall	.+0      	; 0x53cc <sha204c_check_crc+0xa>
    53cc:	0f 92       	push	r0
    53ce:	cd b7       	in	r28, 0x3d	; 61
    53d0:	de b7       	in	r29, 0x3e	; 62
    53d2:	8c 01       	movw	r16, r24
	uint8_t crc[SHA204_CRC_SIZE];
	uint8_t count = response[SHA204_BUFFER_POS_COUNT];
    53d4:	fc 01       	movw	r30, r24
    53d6:	90 81       	ld	r25, Z

	count -= SHA204_CRC_SIZE;
    53d8:	92 50       	subi	r25, 0x02	; 2
	sha204c_calculate_crc(count, response, crc);
    53da:	89 2f       	mov	r24, r25
    53dc:	b8 01       	movw	r22, r16
    53de:	ae 01       	movw	r20, r28
    53e0:	4f 5f       	subi	r20, 0xFF	; 255
    53e2:	5f 4f       	sbci	r21, 0xFF	; 255
    53e4:	9b 83       	std	Y+3, r25	; 0x03
    53e6:	0e 94 af 29 	call	0x535e	; 0x535e <sha204c_calculate_crc>

	return (crc[0] == response[count] && crc[1] == response[count + 1])
    53ea:	9b 81       	ldd	r25, Y+3	; 0x03
    53ec:	f8 01       	movw	r30, r16
    53ee:	e9 0f       	add	r30, r25
    53f0:	f1 1d       	adc	r31, r1
    53f2:	99 81       	ldd	r25, Y+1	; 0x01
    53f4:	80 81       	ld	r24, Z
    53f6:	98 17       	cp	r25, r24
    53f8:	21 f4       	brne	.+8      	; 0x5402 <sha204c_check_crc+0x40>
    53fa:	9a 81       	ldd	r25, Y+2	; 0x02
    53fc:	81 81       	ldd	r24, Z+1	; 0x01
    53fe:	98 17       	cp	r25, r24
    5400:	11 f0       	breq	.+4      	; 0x5406 <sha204c_check_crc+0x44>
    5402:	85 ee       	ldi	r24, 0xE5	; 229
    5404:	01 c0       	rjmp	.+2      	; 0x5408 <sha204c_check_crc+0x46>
    5406:	80 e0       	ldi	r24, 0x00	; 0
		? SHA204_SUCCESS : SHA204_BAD_CRC;
}
    5408:	0f 90       	pop	r0
    540a:	0f 90       	pop	r0
    540c:	0f 90       	pop	r0
    540e:	cf 91       	pop	r28
    5410:	df 91       	pop	r29
    5412:	1f 91       	pop	r17
    5414:	0f 91       	pop	r16
    5416:	08 95       	ret

00005418 <sha204c_wakeup>:
 *         and receives a response.
 *  \param[out] response pointer to four-byte response
 *  \return status of the operation
 */
uint8_t sha204c_wakeup(uint8_t *response)
{
    5418:	1f 93       	push	r17
    541a:	cf 93       	push	r28
    541c:	df 93       	push	r29
    541e:	ec 01       	movw	r28, r24
	uint8_t ret_code = sha204p_wakeup();
    5420:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <sha204p_wakeup>
    5424:	18 2f       	mov	r17, r24
	if (ret_code != SHA204_SUCCESS)
    5426:	88 23       	and	r24, r24
    5428:	e1 f4       	brne	.+56     	; 0x5462 <sha204c_wakeup+0x4a>
		return ret_code;

	ret_code = sha204p_receive_response(SHA204_RSP_SIZE_MIN, response);
    542a:	84 e0       	ldi	r24, 0x04	; 4
    542c:	be 01       	movw	r22, r28
    542e:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <sha204p_receive_response>
    5432:	18 2f       	mov	r17, r24
	if (ret_code != SHA204_SUCCESS)
    5434:	88 23       	and	r24, r24
    5436:	a9 f4       	brne	.+42     	; 0x5462 <sha204c_wakeup+0x4a>
		return ret_code;

	// Verify status response.
	if (response[SHA204_BUFFER_POS_COUNT] != SHA204_RSP_SIZE_MIN)
    5438:	88 81       	ld	r24, Y
    543a:	84 30       	cpi	r24, 0x04	; 4
    543c:	51 f4       	brne	.+20     	; 0x5452 <sha204c_wakeup+0x3a>
		ret_code = SHA204_INVALID_SIZE;
	else if (response[SHA204_BUFFER_POS_STATUS] != SHA204_STATUS_BYTE_WAKEUP)
    543e:	89 81       	ldd	r24, Y+1	; 0x01
    5440:	81 31       	cpi	r24, 0x11	; 17
    5442:	49 f4       	brne	.+18     	; 0x5456 <sha204c_wakeup+0x3e>
		ret_code = SHA204_COMM_FAIL;
	else {
		if ((response[SHA204_RSP_SIZE_MIN - SHA204_CRC_SIZE] != 0x33)
    5444:	8a 81       	ldd	r24, Y+2	; 0x02
    5446:	83 33       	cpi	r24, 0x33	; 51
    5448:	41 f4       	brne	.+16     	; 0x545a <sha204c_wakeup+0x42>
					|| (response[SHA204_RSP_SIZE_MIN + 1 - SHA204_CRC_SIZE] != 0x43))
    544a:	8b 81       	ldd	r24, Y+3	; 0x03
    544c:	83 34       	cpi	r24, 0x43	; 67
    544e:	29 f4       	brne	.+10     	; 0x545a <sha204c_wakeup+0x42>
    5450:	08 c0       	rjmp	.+16     	; 0x5462 <sha204c_wakeup+0x4a>
	if (ret_code != SHA204_SUCCESS)
		return ret_code;

	// Verify status response.
	if (response[SHA204_BUFFER_POS_COUNT] != SHA204_RSP_SIZE_MIN)
		ret_code = SHA204_INVALID_SIZE;
    5452:	14 ee       	ldi	r17, 0xE4	; 228
    5454:	03 c0       	rjmp	.+6      	; 0x545c <sha204c_wakeup+0x44>
	else if (response[SHA204_BUFFER_POS_STATUS] != SHA204_STATUS_BYTE_WAKEUP)
		ret_code = SHA204_COMM_FAIL;
    5456:	10 ef       	ldi	r17, 0xF0	; 240
    5458:	01 c0       	rjmp	.+2      	; 0x545c <sha204c_wakeup+0x44>
	else {
		if ((response[SHA204_RSP_SIZE_MIN - SHA204_CRC_SIZE] != 0x33)
					|| (response[SHA204_RSP_SIZE_MIN + 1 - SHA204_CRC_SIZE] != 0x43))
			ret_code = SHA204_BAD_CRC;
    545a:	15 ee       	ldi	r17, 0xE5	; 229
	}
	if (ret_code != SHA204_SUCCESS)
		delay_ms(SHA204_COMMAND_EXEC_MAX);
    545c:	86 e4       	ldi	r24, 0x46	; 70
    545e:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <delay_ms>

	return ret_code;
}
    5462:	81 2f       	mov	r24, r17
    5464:	df 91       	pop	r29
    5466:	cf 91       	pop	r28
    5468:	1f 91       	pop	r17
    546a:	08 95       	ret

0000546c <sha204c_resync>:
 * \param[in] size size of response buffer
 * \param[out] response pointer to Wake-up response buffer
 * \return status of the operation
 */
uint8_t sha204c_resync(uint8_t size, uint8_t *response)
{
    546c:	cf 93       	push	r28
    546e:	df 93       	push	r29
    5470:	eb 01       	movw	r28, r22
	// Try to re-synchronize without sending a Wake token
	// (step 1 of the re-synchronization process).
	uint8_t ret_code = sha204p_resync(size, response);
    5472:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <sha204p_resync>
	if (ret_code == SHA204_SUCCESS)
    5476:	88 23       	and	r24, r24
    5478:	41 f0       	breq	.+16     	; 0x548a <sha204c_resync+0x1e>
		return ret_code;

	// We lost communication. Send a Wake pulse and try
	// to receive a response (steps 2 and 3 of the
	// re-synchronization process).
	(void) sha204p_sleep();
    547a:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <sha204p_sleep>
	ret_code = sha204c_wakeup(response);
    547e:	ce 01       	movw	r24, r28
    5480:	0e 94 0c 2a 	call	0x5418	; 0x5418 <sha204c_wakeup>

	// Translate a return value of success into one
	// that indicates that the device had to be woken up
	// and might have lost its TempKey.
	return (ret_code == SHA204_SUCCESS ? SHA204_RESYNC_WITH_WAKEUP : ret_code);
    5484:	88 23       	and	r24, r24
    5486:	09 f4       	brne	.+2      	; 0x548a <sha204c_resync+0x1e>
    5488:	88 ee       	ldi	r24, 0xE8	; 232
}
    548a:	df 91       	pop	r29
    548c:	cf 91       	pop	r28
    548e:	08 95       	ret

00005490 <sha204c_send_and_receive>:
 * \param[in] execution_timeout polling timeout in ms
 * \return status of the operation
 */
uint8_t sha204c_send_and_receive(uint8_t *tx_buffer, uint8_t rx_size, uint8_t *rx_buffer,
			uint8_t execution_delay, uint8_t execution_timeout)
{
    5490:	7f 92       	push	r7
    5492:	8f 92       	push	r8
    5494:	9f 92       	push	r9
    5496:	af 92       	push	r10
    5498:	bf 92       	push	r11
    549a:	cf 92       	push	r12
    549c:	df 92       	push	r13
    549e:	ef 92       	push	r14
    54a0:	ff 92       	push	r15
    54a2:	0f 93       	push	r16
    54a4:	1f 93       	push	r17
    54a6:	df 93       	push	r29
    54a8:	cf 93       	push	r28
    54aa:	00 d0       	rcall	.+0      	; 0x54ac <sha204c_send_and_receive+0x1c>
    54ac:	0f 92       	push	r0
    54ae:	cd b7       	in	r28, 0x3d	; 61
    54b0:	de b7       	in	r29, 0x3e	; 62
    54b2:	6c 01       	movw	r12, r24
    54b4:	16 2f       	mov	r17, r22
    54b6:	7a 01       	movw	r14, r20
    54b8:	82 2e       	mov	r8, r18
	uint8_t ret_code_resync;
	uint8_t n_retries_send;
	uint8_t n_retries_receive;
	uint8_t i;
	uint8_t status_byte;
	uint8_t count = tx_buffer[SHA204_BUFFER_POS_COUNT];
    54ba:	fc 01       	movw	r30, r24
    54bc:	90 80       	ld	r9, Z
	uint8_t count_minus_crc = count - SHA204_CRC_SIZE;
    54be:	89 2d       	mov	r24, r9
    54c0:	82 50       	subi	r24, 0x02	; 2
	uint16_t execution_timeout_us = (uint16_t) (execution_timeout * 1000) + SHA204_RESPONSE_TIMEOUT;
    54c2:	40 2f       	mov	r20, r16
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	28 ee       	ldi	r18, 0xE8	; 232
    54c8:	33 e0       	ldi	r19, 0x03	; 3
    54ca:	42 9f       	mul	r20, r18
    54cc:	50 01       	movw	r10, r0
    54ce:	43 9f       	mul	r20, r19
    54d0:	b0 0c       	add	r11, r0
    54d2:	52 9f       	mul	r21, r18
    54d4:	b0 0c       	add	r11, r0
    54d6:	11 24       	eor	r1, r1
    54d8:	25 e2       	ldi	r18, 0x25	; 37
    54da:	30 e0       	ldi	r19, 0x00	; 0
    54dc:	a2 0e       	add	r10, r18
    54de:	b3 1e       	adc	r11, r19
	volatile uint16_t timeout_countdown;

	// Append CRC.
	sha204c_calculate_crc(count_minus_crc, tx_buffer, tx_buffer + count_minus_crc);
    54e0:	a6 01       	movw	r20, r12
    54e2:	48 0f       	add	r20, r24
    54e4:	51 1d       	adc	r21, r1
    54e6:	b6 01       	movw	r22, r12
    54e8:	0e 94 af 29 	call	0x535e	; 0x535e <sha204c_calculate_crc>

	// Retry loop for sending a command and receiving a response.
	n_retries_send = SHA204_RETRY_COUNT + 1;
    54ec:	02 e0       	ldi	r16, 0x02	; 2
 * \return status of the operation
 */
uint8_t sha204c_send_and_receive(uint8_t *tx_buffer, uint8_t rx_size, uint8_t *rx_buffer,
			uint8_t execution_delay, uint8_t execution_timeout)
{
	uint8_t ret_code = SHA204_FUNC_FAIL;
    54ee:	90 ee       	ldi	r25, 0xE0	; 224
	sha204c_calculate_crc(count_minus_crc, tx_buffer, tx_buffer + count_minus_crc);

	// Retry loop for sending a command and receiving a response.
	n_retries_send = SHA204_RETRY_COUNT + 1;

	while ((n_retries_send-- > 0) && (ret_code != SHA204_SUCCESS)) {
    54f0:	67 c0       	rjmp	.+206    	; 0x55c0 <sha204c_send_and_receive+0x130>

		// Send command.
		ret_code = sha204p_send_command(count, tx_buffer);
    54f2:	89 2d       	mov	r24, r9
    54f4:	b6 01       	movw	r22, r12
    54f6:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <sha204p_send_command>
    54fa:	98 2f       	mov	r25, r24
		if (ret_code != SHA204_SUCCESS) {
    54fc:	88 23       	and	r24, r24
    54fe:	19 f5       	brne	.+70     	; 0x5546 <sha204c_send_and_receive+0xb6>
			else
				continue;
		}

		// Wait minimum command execution time and then start polling for a response.
		delay_ms(execution_delay);
    5500:	88 2d       	mov	r24, r8
    5502:	9b 83       	std	Y+3, r25	; 0x03
    5504:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <delay_ms>

		// Retry loop for receiving a response.
		n_retries_receive = SHA204_RETRY_COUNT + 1;
    5508:	82 e0       	ldi	r24, 0x02	; 2
    550a:	78 2e       	mov	r7, r24
		while (n_retries_receive-- > 0) {
    550c:	9b 81       	ldd	r25, Y+3	; 0x03
    550e:	4e c0       	rjmp	.+156    	; 0x55ac <sha204c_send_and_receive+0x11c>

			// Reset response buffer.
			for (i = 0; i < rx_size; i++)
				rx_buffer[i] = 0;
    5510:	11 92       	st	Z+, r1
		// Retry loop for receiving a response.
		n_retries_receive = SHA204_RETRY_COUNT + 1;
		while (n_retries_receive-- > 0) {

			// Reset response buffer.
			for (i = 0; i < rx_size; i++)
    5512:	8f 5f       	subi	r24, 0xFF	; 255
    5514:	81 17       	cp	r24, r17
    5516:	e0 f3       	brcs	.-8      	; 0x5510 <sha204c_send_and_receive+0x80>
				rx_buffer[i] = 0;

			// Poll for response.
			timeout_countdown = execution_timeout_us;
    5518:	ba 82       	std	Y+2, r11	; 0x02
    551a:	a9 82       	std	Y+1, r10	; 0x01
			do {
				ret_code = sha204p_receive_response(rx_size, rx_buffer);
    551c:	81 2f       	mov	r24, r17
    551e:	b7 01       	movw	r22, r14
    5520:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <sha204p_receive_response>
				timeout_countdown -= SHA204_RESPONSE_TIMEOUT;
    5524:	29 81       	ldd	r18, Y+1	; 0x01
    5526:	3a 81       	ldd	r19, Y+2	; 0x02
    5528:	25 52       	subi	r18, 0x25	; 37
    552a:	30 40       	sbci	r19, 0x00	; 0
    552c:	3a 83       	std	Y+2, r19	; 0x02
    552e:	29 83       	std	Y+1, r18	; 0x01
			} while ((timeout_countdown > SHA204_RESPONSE_TIMEOUT) && (ret_code == SHA204_RX_NO_RESPONSE));
    5530:	29 81       	ldd	r18, Y+1	; 0x01
    5532:	3a 81       	ldd	r19, Y+2	; 0x02
    5534:	26 32       	cpi	r18, 0x26	; 38
    5536:	31 05       	cpc	r19, r1
    5538:	18 f0       	brcs	.+6      	; 0x5540 <sha204c_send_and_receive+0xb0>
    553a:	87 3e       	cpi	r24, 0xE7	; 231
    553c:	79 f3       	breq	.-34     	; 0x551c <sha204c_send_and_receive+0x8c>
    553e:	0c c0       	rjmp	.+24     	; 0x5558 <sha204c_send_and_receive+0xc8>
				rx_buffer[i] = 0;

			// Poll for response.
			timeout_countdown = execution_timeout_us;
			do {
				ret_code = sha204p_receive_response(rx_size, rx_buffer);
    5540:	98 2f       	mov	r25, r24
				timeout_countdown -= SHA204_RESPONSE_TIMEOUT;
			} while ((timeout_countdown > SHA204_RESPONSE_TIMEOUT) && (ret_code == SHA204_RX_NO_RESPONSE));

			if (ret_code == SHA204_RX_NO_RESPONSE) {
    5542:	87 3e       	cpi	r24, 0xE7	; 231
    5544:	49 f4       	brne	.+18     	; 0x5558 <sha204c_send_and_receive+0xc8>
				// We did not receive a response. Re-synchronize and send command again.
				if (sha204c_resync(rx_size, rx_buffer) == SHA204_RX_NO_RESPONSE)
    5546:	81 2f       	mov	r24, r17
    5548:	b7 01       	movw	r22, r14
    554a:	9b 83       	std	Y+3, r25	; 0x03
    554c:	0e 94 36 2a 	call	0x546c	; 0x546c <sha204c_resync>
    5550:	9b 81       	ldd	r25, Y+3	; 0x03
    5552:	87 3e       	cpi	r24, 0xE7	; 231
    5554:	a9 f5       	brne	.+106    	; 0x55c0 <sha204c_send_and_receive+0x130>
    5556:	3e c0       	rjmp	.+124    	; 0x55d4 <sha204c_send_and_receive+0x144>
				else
					break;
			}

			// Check whether we received a valid response.
			if (ret_code == SHA204_INVALID_SIZE) {
    5558:	84 3e       	cpi	r24, 0xE4	; 228
    555a:	51 f4       	brne	.+20     	; 0x5570 <sha204c_send_and_receive+0xe0>
				// We see 0xFF for the count when communication got out of sync.
				ret_code_resync = sha204c_resync(rx_size, rx_buffer);
    555c:	81 2f       	mov	r24, r17
    555e:	b7 01       	movw	r22, r14
    5560:	0e 94 36 2a 	call	0x546c	; 0x546c <sha204c_resync>
				if (ret_code_resync == SHA204_SUCCESS)
    5564:	88 23       	and	r24, r24
    5566:	09 f1       	breq	.+66     	; 0x55aa <sha204c_send_and_receive+0x11a>
					// We did not have to wake up the device. Try receiving response again.
					continue;
				if (ret_code_resync == SHA204_RESYNC_WITH_WAKEUP)
    5568:	88 3e       	cpi	r24, 0xE8	; 232
    556a:	39 f1       	breq	.+78     	; 0x55ba <sha204c_send_and_receive+0x12a>
    556c:	94 ee       	ldi	r25, 0xE4	; 228
    556e:	32 c0       	rjmp	.+100    	; 0x55d4 <sha204c_send_and_receive+0x144>
					return ret_code;
			}

			// We received a response of valid size.
			// Check the consistency of the response.
			ret_code = sha204c_check_crc(rx_buffer);
    5570:	c7 01       	movw	r24, r14
    5572:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <sha204c_check_crc>
    5576:	98 2f       	mov	r25, r24
			if (ret_code == SHA204_SUCCESS) {
    5578:	88 23       	and	r24, r24
    557a:	61 f4       	brne	.+24     	; 0x5594 <sha204c_send_and_receive+0x104>
				// Received valid response.
				if (rx_buffer[SHA204_BUFFER_POS_COUNT] > SHA204_RSP_SIZE_MIN)
    557c:	f7 01       	movw	r30, r14
    557e:	80 81       	ld	r24, Z
    5580:	85 30       	cpi	r24, 0x05	; 5
    5582:	40 f5       	brcc	.+80     	; 0x55d4 <sha204c_send_and_receive+0x144>
					// Received non-status response. We are done.
					return ret_code;

				// Received status response.
				status_byte = rx_buffer[SHA204_BUFFER_POS_STATUS];
    5584:	81 81       	ldd	r24, Z+1	; 0x01

				// Translate the three possible device status error codes
				// into library return codes.
				if (status_byte == SHA204_STATUS_BYTE_PARSE)
    5586:	83 30       	cpi	r24, 0x03	; 3
    5588:	11 f1       	breq	.+68     	; 0x55ce <sha204c_send_and_receive+0x13e>
					return SHA204_PARSE_ERROR;
				if (status_byte == SHA204_STATUS_BYTE_EXEC)
    558a:	8f 30       	cpi	r24, 0x0F	; 15
    558c:	11 f1       	breq	.+68     	; 0x55d2 <sha204c_send_and_receive+0x142>
					return SHA204_CMD_FAIL;
				if (status_byte == SHA204_STATUS_BYTE_COMM) {
    558e:	8f 3f       	cpi	r24, 0xFF	; 255
    5590:	b1 f0       	breq	.+44     	; 0x55be <sha204c_send_and_receive+0x12e>
    5592:	20 c0       	rjmp	.+64     	; 0x55d4 <sha204c_send_and_receive+0x144>
				return ret_code;
			}

			else {
				// Received response with incorrect CRC.
				ret_code_resync = sha204c_resync(rx_size, rx_buffer);
    5594:	81 2f       	mov	r24, r17
    5596:	b7 01       	movw	r22, r14
    5598:	9b 83       	std	Y+3, r25	; 0x03
    559a:	0e 94 36 2a 	call	0x546c	; 0x546c <sha204c_resync>
				if (ret_code_resync == SHA204_SUCCESS)
    559e:	9b 81       	ldd	r25, Y+3	; 0x03
    55a0:	88 23       	and	r24, r24
    55a2:	21 f0       	breq	.+8      	; 0x55ac <sha204c_send_and_receive+0x11c>
					// We did not have to wake up the device. Try receiving response again.
					continue;
				if (ret_code_resync == SHA204_RESYNC_WITH_WAKEUP)
    55a4:	88 3e       	cpi	r24, 0xE8	; 232
    55a6:	61 f0       	breq	.+24     	; 0x55c0 <sha204c_send_and_receive+0x130>
    55a8:	15 c0       	rjmp	.+42     	; 0x55d4 <sha204c_send_and_receive+0x144>

			// Check whether we received a valid response.
			if (ret_code == SHA204_INVALID_SIZE) {
				// We see 0xFF for the count when communication got out of sync.
				ret_code_resync = sha204c_resync(rx_size, rx_buffer);
				if (ret_code_resync == SHA204_SUCCESS)
    55aa:	94 ee       	ldi	r25, 0xE4	; 228
		// Wait minimum command execution time and then start polling for a response.
		delay_ms(execution_delay);

		// Retry loop for receiving a response.
		n_retries_receive = SHA204_RETRY_COUNT + 1;
		while (n_retries_receive-- > 0) {
    55ac:	7a 94       	dec	r7
    55ae:	f7 2d       	mov	r31, r7
    55b0:	ff 3f       	cpi	r31, 0xFF	; 255
    55b2:	31 f0       	breq	.+12     	; 0x55c0 <sha204c_send_and_receive+0x130>
    55b4:	f7 01       	movw	r30, r14
    55b6:	80 e0       	ldi	r24, 0x00	; 0
    55b8:	ad cf       	rjmp	.-166    	; 0x5514 <sha204c_send_and_receive+0x84>
				// We see 0xFF for the count when communication got out of sync.
				ret_code_resync = sha204c_resync(rx_size, rx_buffer);
				if (ret_code_resync == SHA204_SUCCESS)
					// We did not have to wake up the device. Try receiving response again.
					continue;
				if (ret_code_resync == SHA204_RESYNC_WITH_WAKEUP)
    55ba:	94 ee       	ldi	r25, 0xE4	; 228
    55bc:	01 c0       	rjmp	.+2      	; 0x55c0 <sha204c_send_and_receive+0x130>
				if (status_byte == SHA204_STATUS_BYTE_COMM) {
					// In case of the device status byte indicating a communication
					// error this function exits the retry loop for receiving a response
					// and enters the overall retry loop
					// (send command / receive response).
					ret_code = SHA204_STATUS_CRC;
    55be:	94 ed       	ldi	r25, 0xD4	; 212
	sha204c_calculate_crc(count_minus_crc, tx_buffer, tx_buffer + count_minus_crc);

	// Retry loop for sending a command and receiving a response.
	n_retries_send = SHA204_RETRY_COUNT + 1;

	while ((n_retries_send-- > 0) && (ret_code != SHA204_SUCCESS)) {
    55c0:	01 50       	subi	r16, 0x01	; 1
    55c2:	0f 3f       	cpi	r16, 0xFF	; 255
    55c4:	39 f0       	breq	.+14     	; 0x55d4 <sha204c_send_and_receive+0x144>
    55c6:	99 23       	and	r25, r25
    55c8:	09 f0       	breq	.+2      	; 0x55cc <sha204c_send_and_receive+0x13c>
    55ca:	93 cf       	rjmp	.-218    	; 0x54f2 <sha204c_send_and_receive+0x62>
    55cc:	03 c0       	rjmp	.+6      	; 0x55d4 <sha204c_send_and_receive+0x144>
				status_byte = rx_buffer[SHA204_BUFFER_POS_STATUS];

				// Translate the three possible device status error codes
				// into library return codes.
				if (status_byte == SHA204_STATUS_BYTE_PARSE)
					return SHA204_PARSE_ERROR;
    55ce:	92 ed       	ldi	r25, 0xD2	; 210
    55d0:	01 c0       	rjmp	.+2      	; 0x55d4 <sha204c_send_and_receive+0x144>
				if (status_byte == SHA204_STATUS_BYTE_EXEC)
					return SHA204_CMD_FAIL;
    55d2:	93 ed       	ldi	r25, 0xD3	; 211
		} // block end of receive retry loop

	} // block end of send and receive retry loop

	return ret_code;
}
    55d4:	89 2f       	mov	r24, r25
    55d6:	0f 90       	pop	r0
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	cf 91       	pop	r28
    55de:	df 91       	pop	r29
    55e0:	1f 91       	pop	r17
    55e2:	0f 91       	pop	r16
    55e4:	ff 90       	pop	r15
    55e6:	ef 90       	pop	r14
    55e8:	df 90       	pop	r13
    55ea:	cf 90       	pop	r12
    55ec:	bf 90       	pop	r11
    55ee:	af 90       	pop	r10
    55f0:	9f 90       	pop	r9
    55f2:	8f 90       	pop	r8
    55f4:	7f 90       	pop	r7
    55f6:	08 95       	ret

000055f8 <sha204m_execute>:
 * \return status of the operation
 */
uint8_t sha204m_execute(uint8_t op_code, uint8_t param1, uint16_t param2,
			uint8_t datalen1, uint8_t *data1, uint8_t datalen2, uint8_t *data2, uint8_t datalen3, uint8_t *data3,
			uint8_t tx_size, uint8_t *tx_buffer, uint8_t rx_size, uint8_t *rx_buffer)
{
    55f8:	2f 92       	push	r2
    55fa:	3f 92       	push	r3
    55fc:	4f 92       	push	r4
    55fe:	5f 92       	push	r5
    5600:	6f 92       	push	r6
    5602:	7f 92       	push	r7
    5604:	8f 92       	push	r8
    5606:	9f 92       	push	r9
    5608:	af 92       	push	r10
    560a:	bf 92       	push	r11
    560c:	cf 92       	push	r12
    560e:	df 92       	push	r13
    5610:	ef 92       	push	r14
    5612:	ff 92       	push	r15
    5614:	0f 93       	push	r16
    5616:	1f 93       	push	r17
    5618:	df 93       	push	r29
    561a:	cf 93       	push	r28
    561c:	0f 92       	push	r0
    561e:	cd b7       	in	r28, 0x3d	; 61
    5620:	de b7       	in	r29, 0x3e	; 62
    5622:	62 2e       	mov	r6, r18
    5624:	30 2f       	mov	r19, r16
    5626:	71 2f       	mov	r23, r17
    5628:	7e 2c       	mov	r7, r14
    562a:	2c 2c       	mov	r2, r12
    562c:	4d 2c       	mov	r4, r13
    562e:	38 2c       	mov	r3, r8
    5630:	59 2c       	mov	r5, r9
    5632:	8f 88       	ldd	r8, Y+23	; 0x17
    5634:	98 8c       	ldd	r9, Y+24	; 0x18
				tx_size, tx_buffer, rx_size, rx_buffer);
	if (ret_code != SHA204_SUCCESS)
		return ret_code;

	// Supply delays and response size.
	switch (op_code) {
    5636:	86 31       	cpi	r24, 0x16	; 22
    5638:	e1 f1       	breq	.+120    	; 0x56b2 <sha204m_execute+0xba>
    563a:	87 31       	cpi	r24, 0x17	; 23
    563c:	98 f4       	brcc	.+38     	; 0x5664 <sha204m_execute+0x6c>
    563e:	88 30       	cpi	r24, 0x08	; 8
    5640:	a1 f1       	breq	.+104    	; 0x56aa <sha204m_execute+0xb2>
    5642:	89 30       	cpi	r24, 0x09	; 9
    5644:	30 f4       	brcc	.+12     	; 0x5652 <sha204m_execute+0x5a>
    5646:	81 30       	cpi	r24, 0x01	; 1
    5648:	c1 f1       	breq	.+112    	; 0x56ba <sha204m_execute+0xc2>
    564a:	82 30       	cpi	r24, 0x02	; 2
    564c:	09 f0       	breq	.+2      	; 0x5650 <sha204m_execute+0x58>
    564e:	4a c0       	rjmp	.+148    	; 0x56e4 <sha204m_execute+0xec>
    5650:	3b c0       	rjmp	.+118    	; 0x56c8 <sha204m_execute+0xd0>
    5652:	82 31       	cpi	r24, 0x12	; 18
    5654:	09 f4       	brne	.+2      	; 0x5658 <sha204m_execute+0x60>
    5656:	42 c0       	rjmp	.+132    	; 0x56dc <sha204m_execute+0xe4>
    5658:	85 31       	cpi	r24, 0x15	; 21
    565a:	e1 f0       	breq	.+56     	; 0x5694 <sha204m_execute+0x9c>
    565c:	81 31       	cpi	r24, 0x11	; 17
    565e:	09 f0       	breq	.+2      	; 0x5662 <sha204m_execute+0x6a>
    5660:	41 c0       	rjmp	.+130    	; 0x56e4 <sha204m_execute+0xec>
    5662:	1b c0       	rjmp	.+54     	; 0x569a <sha204m_execute+0xa2>
    5664:	8c 31       	cpi	r24, 0x1C	; 28
    5666:	09 f4       	brne	.+2      	; 0x566a <sha204m_execute+0x72>
    5668:	40 c0       	rjmp	.+128    	; 0x56ea <sha204m_execute+0xf2>
    566a:	8d 31       	cpi	r24, 0x1D	; 29
    566c:	38 f4       	brcc	.+14     	; 0x567c <sha204m_execute+0x84>
    566e:	88 31       	cpi	r24, 0x18	; 24
    5670:	79 f1       	breq	.+94     	; 0x56d0 <sha204m_execute+0xd8>
    5672:	88 31       	cpi	r24, 0x18	; 24
    5674:	b0 f0       	brcs	.+44     	; 0x56a2 <sha204m_execute+0xaa>
    5676:	8b 31       	cpi	r24, 0x1B	; 27
    5678:	a9 f5       	brne	.+106    	; 0x56e4 <sha204m_execute+0xec>
    567a:	22 c0       	rjmp	.+68     	; 0x56c0 <sha204m_execute+0xc8>
    567c:	88 32       	cpi	r24, 0x28	; 40
    567e:	29 f0       	breq	.+10     	; 0x568a <sha204m_execute+0x92>
    5680:	80 33       	cpi	r24, 0x30	; 48
    5682:	31 f0       	breq	.+12     	; 0x5690 <sha204m_execute+0x98>
    5684:	80 32       	cpi	r24, 0x20	; 32
    5686:	71 f5       	brne	.+92     	; 0x56e4 <sha204m_execute+0xec>
    5688:	26 c0       	rjmp	.+76     	; 0x56d6 <sha204m_execute+0xde>
	case SHA204_CHECKMAC:
		poll_delay = CHECKMAC_DELAY;
		poll_timeout = CHECKMAC_EXEC_MAX - CHECKMAC_DELAY;
		response_size = CHECKMAC_RSP_SIZE;
    568a:	24 e0       	ldi	r18, 0x04	; 4

	// Supply delays and response size.
	switch (op_code) {
	case SHA204_CHECKMAC:
		poll_delay = CHECKMAC_DELAY;
		poll_timeout = CHECKMAC_EXEC_MAX - CHECKMAC_DELAY;
    568c:	0b e1       	ldi	r16, 0x1B	; 27
    568e:	0f c0       	rjmp	.+30     	; 0x56ae <sha204m_execute+0xb6>
		break;

	case SHA204_DEVREV:
		poll_delay = DEVREV_DELAY;
		poll_timeout = DEVREV_EXEC_MAX - DEVREV_DELAY;
		response_size = DEVREV_RSP_SIZE;
    5690:	27 e0       	ldi	r18, 0x07	; 7
    5692:	14 c0       	rjmp	.+40     	; 0x56bc <sha204m_execute+0xc4>
		break;

	case SHA204_GENDIG:
		poll_delay = GENDIG_DELAY;
		poll_timeout = GENDIG_EXEC_MAX - GENDIG_DELAY;
		response_size = GENDIG_RSP_SIZE;
    5694:	24 e0       	ldi	r18, 0x04	; 4
		response_size = DEVREV_RSP_SIZE;
		break;

	case SHA204_GENDIG:
		poll_delay = GENDIG_DELAY;
		poll_timeout = GENDIG_EXEC_MAX - GENDIG_DELAY;
    5696:	01 e2       	ldi	r16, 0x21	; 33
    5698:	15 c0       	rjmp	.+42     	; 0x56c4 <sha204m_execute+0xcc>
		break;

	case SHA204_HMAC:
		poll_delay = HMAC_DELAY;
		poll_timeout = HMAC_EXEC_MAX - HMAC_DELAY;
		response_size = HMAC_RSP_SIZE;
    569a:	23 e2       	ldi	r18, 0x23	; 35
		response_size = GENDIG_RSP_SIZE;
		break;

	case SHA204_HMAC:
		poll_delay = HMAC_DELAY;
		poll_timeout = HMAC_EXEC_MAX - HMAC_DELAY;
    569c:	0c e2       	ldi	r16, 0x2C	; 44
		poll_timeout = GENDIG_EXEC_MAX - GENDIG_DELAY;
		response_size = GENDIG_RSP_SIZE;
		break;

	case SHA204_HMAC:
		poll_delay = HMAC_DELAY;
    569e:	1a e1       	ldi	r17, 0x1A	; 26
		poll_timeout = HMAC_EXEC_MAX - HMAC_DELAY;
		response_size = HMAC_RSP_SIZE;
		break;
    56a0:	2f c0       	rjmp	.+94     	; 0x5700 <sha204m_execute+0x108>

	case SHA204_LOCK:
		poll_delay = LOCK_DELAY;
		poll_timeout = LOCK_EXEC_MAX - LOCK_DELAY;
		response_size = LOCK_RSP_SIZE;
    56a2:	24 e0       	ldi	r18, 0x04	; 4
		response_size = HMAC_RSP_SIZE;
		break;

	case SHA204_LOCK:
		poll_delay = LOCK_DELAY;
		poll_timeout = LOCK_EXEC_MAX - LOCK_DELAY;
    56a4:	04 e1       	ldi	r16, 0x14	; 20
		poll_timeout = HMAC_EXEC_MAX - HMAC_DELAY;
		response_size = HMAC_RSP_SIZE;
		break;

	case SHA204_LOCK:
		poll_delay = LOCK_DELAY;
    56a6:	14 e0       	ldi	r17, 0x04	; 4
		poll_timeout = LOCK_EXEC_MAX - LOCK_DELAY;
		response_size = LOCK_RSP_SIZE;
		break;
    56a8:	2b c0       	rjmp	.+86     	; 0x5700 <sha204m_execute+0x108>

	case SHA204_MAC:
		poll_delay = MAC_DELAY;
		poll_timeout = MAC_EXEC_MAX - MAC_DELAY;
		response_size = MAC_RSP_SIZE;
    56aa:	23 e2       	ldi	r18, 0x23	; 35
		response_size = LOCK_RSP_SIZE;
		break;

	case SHA204_MAC:
		poll_delay = MAC_DELAY;
		poll_timeout = MAC_EXEC_MAX - MAC_DELAY;
    56ac:	08 e1       	ldi	r16, 0x18	; 24
		poll_timeout = LOCK_EXEC_MAX - LOCK_DELAY;
		response_size = LOCK_RSP_SIZE;
		break;

	case SHA204_MAC:
		poll_delay = MAC_DELAY;
    56ae:	1b e0       	ldi	r17, 0x0B	; 11
		poll_timeout = MAC_EXEC_MAX - MAC_DELAY;
		response_size = MAC_RSP_SIZE;
		break;
    56b0:	27 c0       	rjmp	.+78     	; 0x5700 <sha204m_execute+0x108>

	case SHA204_NONCE:
		poll_delay = NONCE_DELAY;
		poll_timeout = NONCE_EXEC_MAX - NONCE_DELAY;
		response_size = param1 == NONCE_MODE_PASSTHROUGH
    56b2:	63 30       	cpi	r22, 0x03	; 3
    56b4:	f1 f4       	brne	.+60     	; 0x56f2 <sha204m_execute+0xfa>
    56b6:	24 e0       	ldi	r18, 0x04	; 4
    56b8:	1d c0       	rjmp	.+58     	; 0x56f4 <sha204m_execute+0xfc>
		break;

	case SHA204_PAUSE:
		poll_delay = PAUSE_DELAY;
		poll_timeout = PAUSE_EXEC_MAX - PAUSE_DELAY;
		response_size = PAUSE_RSP_SIZE;
    56ba:	24 e0       	ldi	r18, 0x04	; 4
							? NONCE_RSP_SIZE_SHORT : NONCE_RSP_SIZE_LONG;
		break;

	case SHA204_PAUSE:
		poll_delay = PAUSE_DELAY;
		poll_timeout = PAUSE_EXEC_MAX - PAUSE_DELAY;
    56bc:	02 e0       	ldi	r16, 0x02	; 2
    56be:	1f c0       	rjmp	.+62     	; 0x56fe <sha204m_execute+0x106>
		break;

	case SHA204_RANDOM:
		poll_delay = RANDOM_DELAY;
		poll_timeout = RANDOM_EXEC_MAX - RANDOM_DELAY;
		response_size = RANDOM_RSP_SIZE;
    56c0:	23 e2       	ldi	r18, 0x23	; 35
		response_size = PAUSE_RSP_SIZE;
		break;

	case SHA204_RANDOM:
		poll_delay = RANDOM_DELAY;
		poll_timeout = RANDOM_EXEC_MAX - RANDOM_DELAY;
    56c2:	09 e2       	ldi	r16, 0x29	; 41
		poll_timeout = PAUSE_EXEC_MAX - PAUSE_DELAY;
		response_size = PAUSE_RSP_SIZE;
		break;

	case SHA204_RANDOM:
		poll_delay = RANDOM_DELAY;
    56c4:	1a e0       	ldi	r17, 0x0A	; 10
		poll_timeout = RANDOM_EXEC_MAX - RANDOM_DELAY;
		response_size = RANDOM_RSP_SIZE;
		break;
    56c6:	1c c0       	rjmp	.+56     	; 0x5700 <sha204m_execute+0x108>

	case SHA204_READ:
		poll_delay = READ_DELAY;
		poll_timeout = READ_EXEC_MAX - READ_DELAY;
		response_size = (param1 & SHA204_ZONE_COUNT_FLAG)
    56c8:	67 ff       	sbrs	r22, 7
    56ca:	17 c0       	rjmp	.+46     	; 0x56fa <sha204m_execute+0x102>
    56cc:	23 e2       	ldi	r18, 0x23	; 35
    56ce:	16 c0       	rjmp	.+44     	; 0x56fc <sha204m_execute+0x104>
		break;

	case SHA204_TEMPSENSE:
		poll_delay = TEMP_SENSE_DELAY;
		poll_timeout = TEMP_SENSE_EXEC_MAX - TEMP_SENSE_DELAY;
		response_size = TEMP_SENSE_RSP_SIZE;
    56d0:	27 e0       	ldi	r18, 0x07	; 7
							? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
		break;

	case SHA204_TEMPSENSE:
		poll_delay = TEMP_SENSE_DELAY;
		poll_timeout = TEMP_SENSE_EXEC_MAX - TEMP_SENSE_DELAY;
    56d2:	08 e0       	ldi	r16, 0x08	; 8
    56d4:	05 c0       	rjmp	.+10     	; 0x56e0 <sha204m_execute+0xe8>
		break;

	case SHA204_UPDATE_EXTRA:
		poll_delay = UPDATE_DELAY;
		poll_timeout = UPDATE_EXEC_MAX - UPDATE_DELAY;
		response_size = UPDATE_RSP_SIZE;
    56d6:	24 e0       	ldi	r18, 0x04	; 4
		response_size = TEMP_SENSE_RSP_SIZE;
		break;

	case SHA204_UPDATE_EXTRA:
		poll_delay = UPDATE_DELAY;
		poll_timeout = UPDATE_EXEC_MAX - UPDATE_DELAY;
    56d8:	03 e0       	ldi	r16, 0x03	; 3
    56da:	02 c0       	rjmp	.+4      	; 0x56e0 <sha204m_execute+0xe8>
		break;

	case SHA204_WRITE:
		poll_delay = WRITE_DELAY;
		poll_timeout = WRITE_EXEC_MAX - WRITE_DELAY;
		response_size = WRITE_RSP_SIZE;
    56dc:	24 e0       	ldi	r18, 0x04	; 4
		response_size = UPDATE_RSP_SIZE;
		break;

	case SHA204_WRITE:
		poll_delay = WRITE_DELAY;
		poll_timeout = WRITE_EXEC_MAX - WRITE_DELAY;
    56de:	07 e2       	ldi	r16, 0x27	; 39
		poll_timeout = UPDATE_EXEC_MAX - UPDATE_DELAY;
		response_size = UPDATE_RSP_SIZE;
		break;

	case SHA204_WRITE:
		poll_delay = WRITE_DELAY;
    56e0:	13 e0       	ldi	r17, 0x03	; 3
		poll_timeout = WRITE_EXEC_MAX - WRITE_DELAY;
		response_size = WRITE_RSP_SIZE;
		break;
    56e2:	0e c0       	rjmp	.+28     	; 0x5700 <sha204m_execute+0x108>

	default:
		poll_delay = 0;
		poll_timeout = SHA204_COMMAND_EXEC_MAX;
		response_size = rx_size;
    56e4:	29 8d       	ldd	r18, Y+25	; 0x19
		response_size = WRITE_RSP_SIZE;
		break;

	default:
		poll_delay = 0;
		poll_timeout = SHA204_COMMAND_EXEC_MAX;
    56e6:	06 e4       	ldi	r16, 0x46	; 70
    56e8:	0a c0       	rjmp	.+20     	; 0x56fe <sha204m_execute+0x106>
		break;

	case SHA204_DERIVE_KEY:
		poll_delay = DERIVE_KEY_DELAY;
		poll_timeout = DERIVE_KEY_EXEC_MAX - DERIVE_KEY_DELAY;
		response_size = DERIVE_KEY_RSP_SIZE;
    56ea:	24 e0       	ldi	r18, 0x04	; 4
		response_size = CHECKMAC_RSP_SIZE;
		break;

	case SHA204_DERIVE_KEY:
		poll_delay = DERIVE_KEY_DELAY;
		poll_timeout = DERIVE_KEY_EXEC_MAX - DERIVE_KEY_DELAY;
    56ec:	02 e3       	ldi	r16, 0x32	; 50
		poll_timeout = CHECKMAC_EXEC_MAX - CHECKMAC_DELAY;
		response_size = CHECKMAC_RSP_SIZE;
		break;

	case SHA204_DERIVE_KEY:
		poll_delay = DERIVE_KEY_DELAY;
    56ee:	1d e0       	ldi	r17, 0x0D	; 13
    56f0:	07 c0       	rjmp	.+14     	; 0x5700 <sha204m_execute+0x108>
		break;

	case SHA204_NONCE:
		poll_delay = NONCE_DELAY;
		poll_timeout = NONCE_EXEC_MAX - NONCE_DELAY;
		response_size = param1 == NONCE_MODE_PASSTHROUGH
    56f2:	23 e2       	ldi	r18, 0x23	; 35
		response_size = MAC_RSP_SIZE;
		break;

	case SHA204_NONCE:
		poll_delay = NONCE_DELAY;
		poll_timeout = NONCE_EXEC_MAX - NONCE_DELAY;
    56f4:	08 e2       	ldi	r16, 0x28	; 40
		poll_timeout = MAC_EXEC_MAX - MAC_DELAY;
		response_size = MAC_RSP_SIZE;
		break;

	case SHA204_NONCE:
		poll_delay = NONCE_DELAY;
    56f6:	15 e1       	ldi	r17, 0x15	; 21
    56f8:	03 c0       	rjmp	.+6      	; 0x5700 <sha204m_execute+0x108>
		break;

	case SHA204_READ:
		poll_delay = READ_DELAY;
		poll_timeout = READ_EXEC_MAX - READ_DELAY;
		response_size = (param1 & SHA204_ZONE_COUNT_FLAG)
    56fa:	27 e0       	ldi	r18, 0x07	; 7
		response_size = RANDOM_RSP_SIZE;
		break;

	case SHA204_READ:
		poll_delay = READ_DELAY;
		poll_timeout = READ_EXEC_MAX - READ_DELAY;
    56fc:	04 e0       	ldi	r16, 0x04	; 4
		poll_timeout = RANDOM_EXEC_MAX - RANDOM_DELAY;
		response_size = RANDOM_RSP_SIZE;
		break;

	case SHA204_READ:
		poll_delay = READ_DELAY;
    56fe:	10 e0       	ldi	r17, 0x00	; 0
		poll_timeout = SHA204_COMMAND_EXEC_MAX;
		response_size = rx_size;
	}

	// Assemble command.
	len = datalen1 + datalen2 + datalen3 + SHA204_CMD_SIZE_MIN;
    5700:	97 e0       	ldi	r25, 0x07	; 7
    5702:	b9 2e       	mov	r11, r25
    5704:	b6 0c       	add	r11, r6
    5706:	b7 0c       	add	r11, r7
    5708:	ba 0c       	add	r11, r10
	p_buffer = tx_buffer;
	*p_buffer++ = len;
    570a:	f4 01       	movw	r30, r8
    570c:	b1 92       	st	Z+, r11
	*p_buffer++ = op_code;
    570e:	d4 01       	movw	r26, r8
    5710:	11 96       	adiw	r26, 0x01	; 1
    5712:	8c 93       	st	X, r24
    5714:	df 01       	movw	r26, r30
    5716:	11 96       	adiw	r26, 0x01	; 1
	*p_buffer++ = param1;
    5718:	61 83       	std	Z+1, r22	; 0x01
    571a:	fd 01       	movw	r30, r26
    571c:	31 96       	adiw	r30, 0x01	; 1
	*p_buffer++ = param2 & 0xFF;
    571e:	11 96       	adiw	r26, 0x01	; 1
    5720:	4c 93       	st	X, r20
    5722:	11 97       	sbiw	r26, 0x01	; 1
	*p_buffer++ = param2 >> 8;
    5724:	51 83       	std	Z+1, r21	; 0x01
    5726:	82 e0       	ldi	r24, 0x02	; 2
    5728:	c8 2e       	mov	r12, r24
    572a:	d1 2c       	mov	r13, r1
    572c:	ce 0e       	add	r12, r30
    572e:	df 1e       	adc	r13, r31

	if (datalen1 > 0) {
    5730:	66 20       	and	r6, r6
    5732:	61 f0       	breq	.+24     	; 0x574c <sha204m_execute+0x154>
		memcpy(p_buffer, data1, datalen1);
    5734:	e6 2c       	mov	r14, r6
    5736:	ff 24       	eor	r15, r15
    5738:	c6 01       	movw	r24, r12
    573a:	63 2f       	mov	r22, r19
    573c:	46 2d       	mov	r20, r6
    573e:	50 e0       	ldi	r21, 0x00	; 0
    5740:	29 83       	std	Y+1, r18	; 0x01
    5742:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
		p_buffer += datalen1;
    5746:	ce 0c       	add	r12, r14
    5748:	df 1c       	adc	r13, r15
    574a:	29 81       	ldd	r18, Y+1	; 0x01
	}
	if (datalen2 > 0) {
    574c:	77 20       	and	r7, r7
    574e:	59 f0       	breq	.+22     	; 0x5766 <sha204m_execute+0x16e>
		memcpy(p_buffer, data2, datalen2);
    5750:	c6 01       	movw	r24, r12
    5752:	62 2d       	mov	r22, r2
    5754:	74 2d       	mov	r23, r4
    5756:	47 2d       	mov	r20, r7
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	29 83       	std	Y+1, r18	; 0x01
    575c:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
		p_buffer += datalen1;
    5760:	c6 0c       	add	r12, r6
    5762:	d1 1c       	adc	r13, r1
    5764:	29 81       	ldd	r18, Y+1	; 0x01
	}
	if (datalen3 > 0) {
    5766:	aa 20       	and	r10, r10
    5768:	69 f0       	breq	.+26     	; 0x5784 <sha204m_execute+0x18c>
		memcpy(p_buffer, data3, datalen3);
    576a:	ea 2c       	mov	r14, r10
    576c:	ff 24       	eor	r15, r15
    576e:	c6 01       	movw	r24, r12
    5770:	63 2d       	mov	r22, r3
    5772:	75 2d       	mov	r23, r5
    5774:	4a 2d       	mov	r20, r10
    5776:	50 e0       	ldi	r21, 0x00	; 0
    5778:	29 83       	std	Y+1, r18	; 0x01
    577a:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
		p_buffer += datalen3;
    577e:	ce 0c       	add	r12, r14
    5780:	df 1c       	adc	r13, r15
    5782:	29 81       	ldd	r18, Y+1	; 0x01
	}

	sha204c_calculate_crc(len - SHA204_CRC_SIZE, tx_buffer, p_buffer);
    5784:	8b 2d       	mov	r24, r11
    5786:	82 50       	subi	r24, 0x02	; 2
    5788:	b4 01       	movw	r22, r8
    578a:	a6 01       	movw	r20, r12
    578c:	29 83       	std	Y+1, r18	; 0x01
    578e:	0e 94 af 29 	call	0x535e	; 0x535e <sha204c_calculate_crc>

	// Send command and receive response.
	return sha204c_send_and_receive(&tx_buffer[0], response_size,
    5792:	c4 01       	movw	r24, r8
    5794:	29 81       	ldd	r18, Y+1	; 0x01
    5796:	62 2f       	mov	r22, r18
    5798:	4a 8d       	ldd	r20, Y+26	; 0x1a
    579a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    579c:	21 2f       	mov	r18, r17
    579e:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
				&rx_buffer[0],	poll_delay, poll_timeout);
}
    57a2:	0f 90       	pop	r0
    57a4:	cf 91       	pop	r28
    57a6:	df 91       	pop	r29
    57a8:	1f 91       	pop	r17
    57aa:	0f 91       	pop	r16
    57ac:	ff 90       	pop	r15
    57ae:	ef 90       	pop	r14
    57b0:	df 90       	pop	r13
    57b2:	cf 90       	pop	r12
    57b4:	bf 90       	pop	r11
    57b6:	af 90       	pop	r10
    57b8:	9f 90       	pop	r9
    57ba:	8f 90       	pop	r8
    57bc:	7f 90       	pop	r7
    57be:	6f 90       	pop	r6
    57c0:	5f 90       	pop	r5
    57c2:	4f 90       	pop	r4
    57c4:	3f 90       	pop	r3
    57c6:	2f 90       	pop	r2
    57c8:	08 95       	ret

000057ca <sha204m_check_mac>:
 * \param[in]  other_data pointer to 13 bytes of data used in the client command
 * \return status of the operation
 */
uint8_t sha204m_check_mac(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t mode, uint8_t key_id, uint8_t *client_challenge, uint8_t *client_response, uint8_t *other_data)
{
    57ca:	af 92       	push	r10
    57cc:	bf 92       	push	r11
    57ce:	cf 92       	push	r12
    57d0:	df 92       	push	r13
    57d2:	ef 92       	push	r14
    57d4:	ff 92       	push	r15
    57d6:	0f 93       	push	r16
    57d8:	1f 93       	push	r17
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
    57de:	fc 01       	movw	r30, r24
    57e0:	db 01       	movw	r26, r22
	if (		// no null pointers allowed
    57e2:	00 97       	sbiw	r24, 0x00	; 0
    57e4:	09 f4       	brne	.+2      	; 0x57e8 <sha204m_check_mac+0x1e>
    57e6:	4f c0       	rjmp	.+158    	; 0x5886 <sha204m_check_mac+0xbc>
				!tx_buffer || !rx_buffer || !client_response || !other_data
    57e8:	10 97       	sbiw	r26, 0x00	; 0
    57ea:	09 f4       	brne	.+2      	; 0x57ee <sha204m_check_mac+0x24>
    57ec:	4c c0       	rjmp	.+152    	; 0x5886 <sha204m_check_mac+0xbc>
    57ee:	e1 14       	cp	r14, r1
    57f0:	f1 04       	cpc	r15, r1
    57f2:	09 f4       	brne	.+2      	; 0x57f6 <sha204m_check_mac+0x2c>
    57f4:	48 c0       	rjmp	.+144    	; 0x5886 <sha204m_check_mac+0xbc>
    57f6:	c1 14       	cp	r12, r1
    57f8:	d1 04       	cpc	r13, r1
    57fa:	09 f4       	brne	.+2      	; 0x57fe <sha204m_check_mac+0x34>
    57fc:	44 c0       	rjmp	.+136    	; 0x5886 <sha204m_check_mac+0xbc>
				// No reserved bits should be set.
				|| (mode | CHECKMAC_MODE_MASK) != CHECKMAC_MODE_MASK
    57fe:	84 2f       	mov	r24, r20
    5800:	87 62       	ori	r24, 0x27	; 39
    5802:	87 32       	cpi	r24, 0x27	; 39
    5804:	09 f0       	breq	.+2      	; 0x5808 <sha204m_check_mac+0x3e>
    5806:	3f c0       	rjmp	.+126    	; 0x5886 <sha204m_check_mac+0xbc>
				// key_id > 15 not allowed
				|| key_id > SHA204_KEY_ID_MAX)
    5808:	20 31       	cpi	r18, 0x10	; 16
    580a:	08 f0       	brcs	.+2      	; 0x580e <sha204m_check_mac+0x44>
    580c:	3c c0       	rjmp	.+120    	; 0x5886 <sha204m_check_mac+0xbc>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = CHECKMAC_COUNT;
    580e:	84 e5       	ldi	r24, 0x54	; 84
    5810:	80 83       	st	Z, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_CHECKMAC;
    5812:	88 e2       	ldi	r24, 0x28	; 40
    5814:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[CHECKMAC_MODE_IDX] = mode & CHECKMAC_MODE_MASK;
    5816:	47 72       	andi	r20, 0x27	; 39
    5818:	42 83       	std	Z+2, r20	; 0x02
	tx_buffer[CHECKMAC_KEYID_IDX]= key_id;
    581a:	23 83       	std	Z+3, r18	; 0x03
	tx_buffer[CHECKMAC_KEYID_IDX + 1] = 0;
    581c:	14 82       	std	Z+4, r1	; 0x04
    581e:	cf 01       	movw	r24, r30
    5820:	05 96       	adiw	r24, 0x05	; 5
	if (client_challenge == NULL)
    5822:	01 15       	cp	r16, r1
    5824:	11 05       	cpc	r17, r1
    5826:	39 f4       	brne	.+14     	; 0x5836 <sha204m_check_mac+0x6c>
		memset(&tx_buffer[CHECKMAC_CLIENT_CHALLENGE_IDX], 0, CHECKMAC_CLIENT_CHALLENGE_SIZE);
    5828:	ac 01       	movw	r20, r24
    582a:	80 e2       	ldi	r24, 0x20	; 32
    582c:	ea 01       	movw	r28, r20
    582e:	19 92       	st	Y+, r1
    5830:	8a 95       	dec	r24
    5832:	e9 f7       	brne	.-6      	; 0x582e <sha204m_check_mac+0x64>
    5834:	09 c0       	rjmp	.+18     	; 0x5848 <sha204m_check_mac+0x7e>
	else
		memcpy(&tx_buffer[CHECKMAC_CLIENT_CHALLENGE_IDX], client_challenge, CHECKMAC_CLIENT_CHALLENGE_SIZE);
    5836:	20 e2       	ldi	r18, 0x20	; 32
    5838:	e8 01       	movw	r28, r16
    583a:	09 90       	ld	r0, Y+
    583c:	8e 01       	movw	r16, r28
    583e:	ec 01       	movw	r28, r24
    5840:	09 92       	st	Y+, r0
    5842:	ce 01       	movw	r24, r28
    5844:	21 50       	subi	r18, 0x01	; 1
    5846:	c1 f7       	brne	.-16     	; 0x5838 <sha204m_check_mac+0x6e>

	memcpy(&tx_buffer[CHECKMAC_CLIENT_RESPONSE_IDX], client_response, CHECKMAC_CLIENT_RESPONSE_SIZE);
    5848:	cf 01       	movw	r24, r30
    584a:	85 96       	adiw	r24, 0x25	; 37
    584c:	20 e2       	ldi	r18, 0x20	; 32
    584e:	e7 01       	movw	r28, r14
    5850:	09 90       	ld	r0, Y+
    5852:	7e 01       	movw	r14, r28
    5854:	ec 01       	movw	r28, r24
    5856:	09 92       	st	Y+, r0
    5858:	ce 01       	movw	r24, r28
    585a:	21 50       	subi	r18, 0x01	; 1
    585c:	c1 f7       	brne	.-16     	; 0x584e <sha204m_check_mac+0x84>
	memcpy(&tx_buffer[CHECKMAC_DATA_IDX], other_data, CHECKMAC_OTHER_DATA_SIZE);
    585e:	cf 01       	movw	r24, r30
    5860:	8b 5b       	subi	r24, 0xBB	; 187
    5862:	9f 4f       	sbci	r25, 0xFF	; 255
    5864:	2d e0       	ldi	r18, 0x0D	; 13
    5866:	e6 01       	movw	r28, r12
    5868:	09 90       	ld	r0, Y+
    586a:	6e 01       	movw	r12, r28
    586c:	ec 01       	movw	r28, r24
    586e:	09 92       	st	Y+, r0
    5870:	ce 01       	movw	r24, r28
    5872:	21 50       	subi	r18, 0x01	; 1
    5874:	c1 f7       	brne	.-16     	; 0x5866 <sha204m_check_mac+0x9c>

	return sha204c_send_and_receive(&tx_buffer[0], CHECKMAC_RSP_SIZE, &rx_buffer[0],
    5876:	cf 01       	movw	r24, r30
    5878:	64 e0       	ldi	r22, 0x04	; 4
    587a:	ad 01       	movw	r20, r26
    587c:	2b e0       	ldi	r18, 0x0B	; 11
    587e:	0b e1       	ldi	r16, 0x1B	; 27
    5880:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5884:	01 c0       	rjmp	.+2      	; 0x5888 <sha204m_check_mac+0xbe>
				!tx_buffer || !rx_buffer || !client_response || !other_data
				// No reserved bits should be set.
				|| (mode | CHECKMAC_MODE_MASK) != CHECKMAC_MODE_MASK
				// key_id > 15 not allowed
				|| key_id > SHA204_KEY_ID_MAX)
		return SHA204_BAD_PARAM;
    5886:	82 ee       	ldi	r24, 0xE2	; 226
	memcpy(&tx_buffer[CHECKMAC_CLIENT_RESPONSE_IDX], client_response, CHECKMAC_CLIENT_RESPONSE_SIZE);
	memcpy(&tx_buffer[CHECKMAC_DATA_IDX], other_data, CHECKMAC_OTHER_DATA_SIZE);

	return sha204c_send_and_receive(&tx_buffer[0], CHECKMAC_RSP_SIZE, &rx_buffer[0],
				CHECKMAC_DELAY, CHECKMAC_EXEC_MAX - CHECKMAC_DELAY);
}
    5888:	df 91       	pop	r29
    588a:	cf 91       	pop	r28
    588c:	1f 91       	pop	r17
    588e:	0f 91       	pop	r16
    5890:	ff 90       	pop	r15
    5892:	ef 90       	pop	r14
    5894:	df 90       	pop	r13
    5896:	cf 90       	pop	r12
    5898:	bf 90       	pop	r11
    589a:	af 90       	pop	r10
    589c:	08 95       	ret

0000589e <sha204m_derive_key>:
 * \param[in]  mac pointer to optional MAC
 * \return status of the operation
 */
uint8_t sha204m_derive_key(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t random, uint8_t target_key, uint8_t *mac)
{
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	dc 01       	movw	r26, r24
    58a8:	fb 01       	movw	r30, r22
    58aa:	e8 01       	movw	r28, r16
	if (!tx_buffer || !rx_buffer || ((random & ~DERIVE_KEY_RANDOM_FLAG) != 0)
    58ac:	00 97       	sbiw	r24, 0x00	; 0
    58ae:	71 f1       	breq	.+92     	; 0x590c <sha204m_derive_key+0x6e>
    58b0:	30 97       	sbiw	r30, 0x00	; 0
    58b2:	61 f1       	breq	.+88     	; 0x590c <sha204m_derive_key+0x6e>
    58b4:	84 2f       	mov	r24, r20
    58b6:	8b 7f       	andi	r24, 0xFB	; 251
    58b8:	49 f5       	brne	.+82     	; 0x590c <sha204m_derive_key+0x6e>
				 || (target_key > SHA204_KEY_ID_MAX))
    58ba:	20 31       	cpi	r18, 0x10	; 16
    58bc:	38 f5       	brcc	.+78     	; 0x590c <sha204m_derive_key+0x6e>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_OPCODE_IDX] = SHA204_DERIVE_KEY;
    58be:	8c e1       	ldi	r24, 0x1C	; 28
    58c0:	11 96       	adiw	r26, 0x01	; 1
    58c2:	8c 93       	st	X, r24
    58c4:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[DERIVE_KEY_RANDOM_IDX] = random;
    58c6:	12 96       	adiw	r26, 0x02	; 2
    58c8:	4c 93       	st	X, r20
    58ca:	12 97       	sbiw	r26, 0x02	; 2
	tx_buffer[DERIVE_KEY_TARGETKEY_IDX] = target_key;
    58cc:	13 96       	adiw	r26, 0x03	; 3
    58ce:	2c 93       	st	X, r18
    58d0:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[DERIVE_KEY_TARGETKEY_IDX + 1] = 0;
    58d2:	14 96       	adiw	r26, 0x04	; 4
    58d4:	1c 92       	st	X, r1
    58d6:	14 97       	sbiw	r26, 0x04	; 4
	if (mac != NULL)
    58d8:	20 97       	sbiw	r28, 0x00	; 0
    58da:	71 f0       	breq	.+28     	; 0x58f8 <sha204m_derive_key+0x5a>
	{
		memcpy(&tx_buffer[DERIVE_KEY_MAC_IDX], mac, DERIVE_KEY_MAC_SIZE);
    58dc:	cd 01       	movw	r24, r26
    58de:	05 96       	adiw	r24, 0x05	; 5
    58e0:	a8 01       	movw	r20, r16
    58e2:	20 e2       	ldi	r18, 0x20	; 32
    58e4:	ea 01       	movw	r28, r20
    58e6:	09 90       	ld	r0, Y+
    58e8:	ae 01       	movw	r20, r28
    58ea:	ec 01       	movw	r28, r24
    58ec:	09 92       	st	Y+, r0
    58ee:	ce 01       	movw	r24, r28
    58f0:	21 50       	subi	r18, 0x01	; 1
    58f2:	c1 f7       	brne	.-16     	; 0x58e4 <sha204m_derive_key+0x46>
		tx_buffer[SHA204_COUNT_IDX] = DERIVE_KEY_COUNT_LARGE;
    58f4:	87 e2       	ldi	r24, 0x27	; 39
    58f6:	01 c0       	rjmp	.+2      	; 0x58fa <sha204m_derive_key+0x5c>
	}
	else
		tx_buffer[SHA204_COUNT_IDX] = DERIVE_KEY_COUNT_SMALL;
    58f8:	87 e0       	ldi	r24, 0x07	; 7
    58fa:	8c 93       	st	X, r24

	return sha204c_send_and_receive(&tx_buffer[0], DERIVE_KEY_RSP_SIZE, &rx_buffer[0],
    58fc:	cd 01       	movw	r24, r26
    58fe:	64 e0       	ldi	r22, 0x04	; 4
    5900:	af 01       	movw	r20, r30
    5902:	2d e0       	ldi	r18, 0x0D	; 13
    5904:	02 e3       	ldi	r16, 0x32	; 50
    5906:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    590a:	01 c0       	rjmp	.+2      	; 0x590e <sha204m_derive_key+0x70>
uint8_t sha204m_derive_key(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t random, uint8_t target_key, uint8_t *mac)
{
	if (!tx_buffer || !rx_buffer || ((random & ~DERIVE_KEY_RANDOM_FLAG) != 0)
				 || (target_key > SHA204_KEY_ID_MAX))
		return SHA204_BAD_PARAM;
    590c:	82 ee       	ldi	r24, 0xE2	; 226
	else
		tx_buffer[SHA204_COUNT_IDX] = DERIVE_KEY_COUNT_SMALL;

	return sha204c_send_and_receive(&tx_buffer[0], DERIVE_KEY_RSP_SIZE, &rx_buffer[0],
				DERIVE_KEY_DELAY, DERIVE_KEY_EXEC_MAX - DERIVE_KEY_DELAY);
}
    590e:	df 91       	pop	r29
    5910:	cf 91       	pop	r28
    5912:	1f 91       	pop	r17
    5914:	0f 91       	pop	r16
    5916:	08 95       	ret

00005918 <sha204m_dev_rev>:
 * \param[in]  tx_buffer pointer to transmit buffer
 * \param[out] rx_buffer pointer to receive buffer
 * \return status of the operation
 */
uint8_t sha204m_dev_rev(uint8_t *tx_buffer, uint8_t *rx_buffer)
{
    5918:	0f 93       	push	r16
    591a:	fc 01       	movw	r30, r24
    591c:	ab 01       	movw	r20, r22
	if (!tx_buffer || !rx_buffer)
    591e:	00 97       	sbiw	r24, 0x00	; 0
    5920:	89 f0       	breq	.+34     	; 0x5944 <sha204m_dev_rev+0x2c>
    5922:	61 15       	cp	r22, r1
    5924:	71 05       	cpc	r23, r1
    5926:	71 f0       	breq	.+28     	; 0x5944 <sha204m_dev_rev+0x2c>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = DEVREV_COUNT;
    5928:	87 e0       	ldi	r24, 0x07	; 7
    592a:	80 83       	st	Z, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_DEVREV;
    592c:	80 e3       	ldi	r24, 0x30	; 48
    592e:	81 83       	std	Z+1, r24	; 0x01

	// Parameters are 0.
	tx_buffer[DEVREV_PARAM1_IDX] =
	tx_buffer[DEVREV_PARAM2_IDX] =
	tx_buffer[DEVREV_PARAM2_IDX + 1] = 0;
    5930:	14 82       	std	Z+4, r1	; 0x04
	tx_buffer[SHA204_COUNT_IDX] = DEVREV_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_DEVREV;

	// Parameters are 0.
	tx_buffer[DEVREV_PARAM1_IDX] =
	tx_buffer[DEVREV_PARAM2_IDX] =
    5932:	13 82       	std	Z+3, r1	; 0x03

	tx_buffer[SHA204_COUNT_IDX] = DEVREV_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_DEVREV;

	// Parameters are 0.
	tx_buffer[DEVREV_PARAM1_IDX] =
    5934:	12 82       	std	Z+2, r1	; 0x02
	tx_buffer[DEVREV_PARAM2_IDX] =
	tx_buffer[DEVREV_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], DEVREV_RSP_SIZE, &rx_buffer[0],
    5936:	cf 01       	movw	r24, r30
    5938:	67 e0       	ldi	r22, 0x07	; 7
    593a:	20 e0       	ldi	r18, 0x00	; 0
    593c:	02 e0       	ldi	r16, 0x02	; 2
    593e:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5942:	01 c0       	rjmp	.+2      	; 0x5946 <sha204m_dev_rev+0x2e>
 * \return status of the operation
 */
uint8_t sha204m_dev_rev(uint8_t *tx_buffer, uint8_t *rx_buffer)
{
	if (!tx_buffer || !rx_buffer)
		return SHA204_BAD_PARAM;
    5944:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[DEVREV_PARAM2_IDX] =
	tx_buffer[DEVREV_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], DEVREV_RSP_SIZE, &rx_buffer[0],
				DEVREV_DELAY, DEVREV_EXEC_MAX - DEVREV_DELAY);
}
    5946:	0f 91       	pop	r16
    5948:	08 95       	ret

0000594a <sha204m_gen_dig>:
 * \param[in]  other_data pointer to 4 bytes of data when using CheckOnly key
 * \return status of the operation
 */
uint8_t sha204m_gen_dig(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t zone, uint8_t key_id, uint8_t *other_data)
{
    594a:	0f 93       	push	r16
    594c:	1f 93       	push	r17
    594e:	cf 93       	push	r28
    5950:	df 93       	push	r29
    5952:	dc 01       	movw	r26, r24
    5954:	fb 01       	movw	r30, r22
    5956:	e8 01       	movw	r28, r16
	if (!tx_buffer || !rx_buffer
    5958:	00 97       	sbiw	r24, 0x00	; 0
    595a:	91 f1       	breq	.+100    	; 0x59c0 <sha204m_gen_dig+0x76>
    595c:	30 97       	sbiw	r30, 0x00	; 0
    595e:	81 f1       	breq	.+96     	; 0x59c0 <sha204m_gen_dig+0x76>
				|| ((zone != GENDIG_ZONE_OTP) && (zone != GENDIG_ZONE_DATA)))
    5960:	84 2f       	mov	r24, r20
    5962:	81 50       	subi	r24, 0x01	; 1
    5964:	82 30       	cpi	r24, 0x02	; 2
    5966:	60 f5       	brcc	.+88     	; 0x59c0 <sha204m_gen_dig+0x76>
		return SHA204_BAD_PARAM;

	if (((zone == GENDIG_ZONE_OTP) && (key_id > SHA204_OTP_BLOCK_MAX))
    5968:	41 30       	cpi	r20, 0x01	; 1
    596a:	19 f4       	brne	.+6      	; 0x5972 <sha204m_gen_dig+0x28>
    596c:	22 30       	cpi	r18, 0x02	; 2
    596e:	40 f5       	brcc	.+80     	; 0x59c0 <sha204m_gen_dig+0x76>
    5970:	02 c0       	rjmp	.+4      	; 0x5976 <sha204m_gen_dig+0x2c>
				|| ((zone == GENDIG_ZONE_DATA) && (key_id > SHA204_KEY_ID_MAX)))
    5972:	20 31       	cpi	r18, 0x10	; 16
    5974:	28 f5       	brcc	.+74     	; 0x59c0 <sha204m_gen_dig+0x76>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_OPCODE_IDX] = SHA204_GENDIG;
    5976:	85 e1       	ldi	r24, 0x15	; 21
    5978:	11 96       	adiw	r26, 0x01	; 1
    597a:	8c 93       	st	X, r24
    597c:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[GENDIG_ZONE_IDX] = zone;
    597e:	12 96       	adiw	r26, 0x02	; 2
    5980:	4c 93       	st	X, r20
    5982:	12 97       	sbiw	r26, 0x02	; 2
	tx_buffer[GENDIG_KEYID_IDX] = key_id;
    5984:	13 96       	adiw	r26, 0x03	; 3
    5986:	2c 93       	st	X, r18
    5988:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[GENDIG_KEYID_IDX + 1] = 0;
    598a:	14 96       	adiw	r26, 0x04	; 4
    598c:	1c 92       	st	X, r1
    598e:	14 97       	sbiw	r26, 0x04	; 4
	if (other_data != NULL)
    5990:	20 97       	sbiw	r28, 0x00	; 0
    5992:	61 f0       	breq	.+24     	; 0x59ac <sha204m_gen_dig+0x62>
	{
		memcpy(&tx_buffer[GENDIG_DATA_IDX], other_data, GENDIG_OTHER_DATA_SIZE);
    5994:	28 81       	ld	r18, Y
    5996:	39 81       	ldd	r19, Y+1	; 0x01
    5998:	4a 81       	ldd	r20, Y+2	; 0x02
    599a:	5b 81       	ldd	r21, Y+3	; 0x03
    599c:	15 96       	adiw	r26, 0x05	; 5
    599e:	2d 93       	st	X+, r18
    59a0:	3d 93       	st	X+, r19
    59a2:	4d 93       	st	X+, r20
    59a4:	5c 93       	st	X, r21
    59a6:	18 97       	sbiw	r26, 0x08	; 8
		tx_buffer[SHA204_COUNT_IDX] = GENDIG_COUNT_DATA;
    59a8:	8b e0       	ldi	r24, 0x0B	; 11
    59aa:	01 c0       	rjmp	.+2      	; 0x59ae <sha204m_gen_dig+0x64>
	}
	else
		tx_buffer[SHA204_COUNT_IDX] = GENDIG_COUNT;
    59ac:	87 e0       	ldi	r24, 0x07	; 7
    59ae:	8c 93       	st	X, r24

	return sha204c_send_and_receive(&tx_buffer[0], GENDIG_RSP_SIZE, &rx_buffer[0],
    59b0:	cd 01       	movw	r24, r26
    59b2:	64 e0       	ldi	r22, 0x04	; 4
    59b4:	af 01       	movw	r20, r30
    59b6:	2a e0       	ldi	r18, 0x0A	; 10
    59b8:	01 e2       	ldi	r16, 0x21	; 33
    59ba:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    59be:	01 c0       	rjmp	.+2      	; 0x59c2 <sha204m_gen_dig+0x78>
				|| ((zone != GENDIG_ZONE_OTP) && (zone != GENDIG_ZONE_DATA)))
		return SHA204_BAD_PARAM;

	if (((zone == GENDIG_ZONE_OTP) && (key_id > SHA204_OTP_BLOCK_MAX))
				|| ((zone == GENDIG_ZONE_DATA) && (key_id > SHA204_KEY_ID_MAX)))
		return SHA204_BAD_PARAM;
    59c0:	82 ee       	ldi	r24, 0xE2	; 226
		tx_buffer[SHA204_COUNT_IDX] = GENDIG_COUNT;

	return sha204c_send_and_receive(&tx_buffer[0], GENDIG_RSP_SIZE, &rx_buffer[0],
				GENDIG_DELAY, GENDIG_EXEC_MAX - GENDIG_DELAY);

}
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	08 95       	ret

000059cc <sha204m_hmac>:
 * \param[in]  mode
 * \param[in]  key_id slot index of key
 * \return status of the operation
 */
uint8_t sha204m_hmac(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode, uint16_t key_id)
{
    59cc:	0f 93       	push	r16
    59ce:	dc 01       	movw	r26, r24
    59d0:	fb 01       	movw	r30, r22
	if (!tx_buffer || !rx_buffer || ((mode & ~HMAC_MODE_MASK) != 0))
    59d2:	00 97       	sbiw	r24, 0x00	; 0
    59d4:	e1 f0       	breq	.+56     	; 0x5a0e <sha204m_hmac+0x42>
    59d6:	30 97       	sbiw	r30, 0x00	; 0
    59d8:	d1 f0       	breq	.+52     	; 0x5a0e <sha204m_hmac+0x42>
    59da:	84 2f       	mov	r24, r20
    59dc:	8b 78       	andi	r24, 0x8B	; 139
    59de:	b9 f4       	brne	.+46     	; 0x5a0e <sha204m_hmac+0x42>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = HMAC_COUNT;
    59e0:	87 e0       	ldi	r24, 0x07	; 7
    59e2:	8c 93       	st	X, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_HMAC;
    59e4:	81 e1       	ldi	r24, 0x11	; 17
    59e6:	11 96       	adiw	r26, 0x01	; 1
    59e8:	8c 93       	st	X, r24
    59ea:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[HMAC_MODE_IDX] = mode;
    59ec:	12 96       	adiw	r26, 0x02	; 2
    59ee:	4c 93       	st	X, r20
    59f0:	12 97       	sbiw	r26, 0x02	; 2

	// Although valid key identifiers are only
	// from 0 to 15, all 16 bits are used in the HMAC message.
	tx_buffer[HMAC_KEYID_IDX] = key_id & 0xFF;
    59f2:	13 96       	adiw	r26, 0x03	; 3
    59f4:	2c 93       	st	X, r18
    59f6:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[HMAC_KEYID_IDX + 1] = key_id >> 8;
    59f8:	14 96       	adiw	r26, 0x04	; 4
    59fa:	3c 93       	st	X, r19
    59fc:	14 97       	sbiw	r26, 0x04	; 4

	return sha204c_send_and_receive(&tx_buffer[0], HMAC_RSP_SIZE, &rx_buffer[0],
    59fe:	cd 01       	movw	r24, r26
    5a00:	63 e2       	ldi	r22, 0x23	; 35
    5a02:	af 01       	movw	r20, r30
    5a04:	2a e1       	ldi	r18, 0x1A	; 26
    5a06:	0c e2       	ldi	r16, 0x2C	; 44
    5a08:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5a0c:	01 c0       	rjmp	.+2      	; 0x5a10 <sha204m_hmac+0x44>
 * \return status of the operation
 */
uint8_t sha204m_hmac(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode, uint16_t key_id)
{
	if (!tx_buffer || !rx_buffer || ((mode & ~HMAC_MODE_MASK) != 0))
		return SHA204_BAD_PARAM;
    5a0e:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[HMAC_KEYID_IDX] = key_id & 0xFF;
	tx_buffer[HMAC_KEYID_IDX + 1] = key_id >> 8;

	return sha204c_send_and_receive(&tx_buffer[0], HMAC_RSP_SIZE, &rx_buffer[0],
				HMAC_DELAY, HMAC_EXEC_MAX - HMAC_DELAY);
}
    5a10:	0f 91       	pop	r16
    5a12:	08 95       	ret

00005a14 <sha204m_lock>:
 * \param[in]  zone zone id to lock
 * \param[in]  summary zone digest
 * \return status of the operation
 */
uint8_t sha204m_lock(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t zone, uint16_t summary)
{
    5a14:	0f 93       	push	r16
    5a16:	dc 01       	movw	r26, r24
    5a18:	fb 01       	movw	r30, r22
	if (!tx_buffer || !rx_buffer || ((zone & ~LOCK_ZONE_MASK) != 0)
    5a1a:	00 97       	sbiw	r24, 0x00	; 0
    5a1c:	11 f1       	breq	.+68     	; 0x5a62 <sha204m_lock+0x4e>
    5a1e:	30 97       	sbiw	r30, 0x00	; 0
    5a20:	01 f1       	breq	.+64     	; 0x5a62 <sha204m_lock+0x4e>
    5a22:	84 2f       	mov	r24, r20
    5a24:	8e 77       	andi	r24, 0x7E	; 126
    5a26:	e9 f4       	brne	.+58     	; 0x5a62 <sha204m_lock+0x4e>
				|| ((zone & LOCK_ZONE_NO_CRC) && (summary != 0)))
    5a28:	47 ff       	sbrs	r20, 7
    5a2a:	03 c0       	rjmp	.+6      	; 0x5a32 <sha204m_lock+0x1e>
    5a2c:	21 15       	cp	r18, r1
    5a2e:	31 05       	cpc	r19, r1
    5a30:	c1 f4       	brne	.+48     	; 0x5a62 <sha204m_lock+0x4e>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = LOCK_COUNT;
    5a32:	87 e0       	ldi	r24, 0x07	; 7
    5a34:	8c 93       	st	X, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_LOCK;
    5a36:	87 e1       	ldi	r24, 0x17	; 23
    5a38:	11 96       	adiw	r26, 0x01	; 1
    5a3a:	8c 93       	st	X, r24
    5a3c:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[LOCK_ZONE_IDX] = zone & LOCK_ZONE_MASK;
    5a3e:	41 78       	andi	r20, 0x81	; 129
    5a40:	12 96       	adiw	r26, 0x02	; 2
    5a42:	4c 93       	st	X, r20
    5a44:	12 97       	sbiw	r26, 0x02	; 2
	tx_buffer[LOCK_SUMMARY_IDX]= summary & 0xFF;
    5a46:	13 96       	adiw	r26, 0x03	; 3
    5a48:	2c 93       	st	X, r18
    5a4a:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[LOCK_SUMMARY_IDX + 1]= summary >> 8;
    5a4c:	14 96       	adiw	r26, 0x04	; 4
    5a4e:	3c 93       	st	X, r19
    5a50:	14 97       	sbiw	r26, 0x04	; 4
	return sha204c_send_and_receive(&tx_buffer[0], LOCK_RSP_SIZE, &rx_buffer[0],
    5a52:	cd 01       	movw	r24, r26
    5a54:	64 e0       	ldi	r22, 0x04	; 4
    5a56:	af 01       	movw	r20, r30
    5a58:	24 e0       	ldi	r18, 0x04	; 4
    5a5a:	04 e1       	ldi	r16, 0x14	; 20
    5a5c:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5a60:	01 c0       	rjmp	.+2      	; 0x5a64 <sha204m_lock+0x50>
 */
uint8_t sha204m_lock(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t zone, uint16_t summary)
{
	if (!tx_buffer || !rx_buffer || ((zone & ~LOCK_ZONE_MASK) != 0)
				|| ((zone & LOCK_ZONE_NO_CRC) && (summary != 0)))
		return SHA204_BAD_PARAM;
    5a62:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[LOCK_ZONE_IDX] = zone & LOCK_ZONE_MASK;
	tx_buffer[LOCK_SUMMARY_IDX]= summary & 0xFF;
	tx_buffer[LOCK_SUMMARY_IDX + 1]= summary >> 8;
	return sha204c_send_and_receive(&tx_buffer[0], LOCK_RSP_SIZE, &rx_buffer[0],
				LOCK_DELAY, LOCK_EXEC_MAX - LOCK_DELAY);
}
    5a64:	0f 91       	pop	r16
    5a66:	08 95       	ret

00005a68 <sha204m_mac>:
 * \param[in]  challenge pointer to challenge (not used if mode bit 0 is set)
 * \return status of the operation
 */
uint8_t sha204m_mac(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t mode, uint16_t key_id, uint8_t *challenge)
{
    5a68:	0f 93       	push	r16
    5a6a:	1f 93       	push	r17
    5a6c:	cf 93       	push	r28
    5a6e:	df 93       	push	r29
    5a70:	dc 01       	movw	r26, r24
    5a72:	fb 01       	movw	r30, r22
    5a74:	e8 01       	movw	r28, r16
	if (!tx_buffer || !rx_buffer || ((mode & ~MAC_MODE_MASK) != 0)
    5a76:	00 97       	sbiw	r24, 0x00	; 0
    5a78:	c1 f1       	breq	.+112    	; 0x5aea <sha204m_mac+0x82>
    5a7a:	30 97       	sbiw	r30, 0x00	; 0
    5a7c:	b1 f1       	breq	.+108    	; 0x5aea <sha204m_mac+0x82>
    5a7e:	84 2f       	mov	r24, r20
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	bc 01       	movw	r22, r24
    5a84:	68 78       	andi	r22, 0x88	; 136
    5a86:	61 15       	cp	r22, r1
    5a88:	71 05       	cpc	r23, r1
    5a8a:	79 f5       	brne	.+94     	; 0x5aea <sha204m_mac+0x82>
				|| (((mode & MAC_MODE_BLOCK2_TEMPKEY) == 0) && !challenge))
    5a8c:	bc 01       	movw	r22, r24
    5a8e:	61 70       	andi	r22, 0x01	; 1
    5a90:	70 70       	andi	r23, 0x00	; 0
    5a92:	40 fd       	sbrc	r20, 0
    5a94:	02 c0       	rjmp	.+4      	; 0x5a9a <sha204m_mac+0x32>
    5a96:	20 97       	sbiw	r28, 0x00	; 0
    5a98:	41 f1       	breq	.+80     	; 0x5aea <sha204m_mac+0x82>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = MAC_COUNT_SHORT;
    5a9a:	87 e0       	ldi	r24, 0x07	; 7
    5a9c:	8c 93       	st	X, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_MAC;
    5a9e:	88 e0       	ldi	r24, 0x08	; 8
    5aa0:	11 96       	adiw	r26, 0x01	; 1
    5aa2:	8c 93       	st	X, r24
    5aa4:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[MAC_MODE_IDX] = mode;
    5aa6:	12 96       	adiw	r26, 0x02	; 2
    5aa8:	4c 93       	st	X, r20
    5aaa:	12 97       	sbiw	r26, 0x02	; 2
	tx_buffer[MAC_KEYID_IDX] = key_id & 0xFF;
    5aac:	13 96       	adiw	r26, 0x03	; 3
    5aae:	2c 93       	st	X, r18
    5ab0:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[MAC_KEYID_IDX + 1] = key_id >> 8;
    5ab2:	14 96       	adiw	r26, 0x04	; 4
    5ab4:	3c 93       	st	X, r19
    5ab6:	14 97       	sbiw	r26, 0x04	; 4
	if ((mode & MAC_MODE_BLOCK2_TEMPKEY) == 0)
    5ab8:	61 15       	cp	r22, r1
    5aba:	71 05       	cpc	r23, r1
    5abc:	71 f4       	brne	.+28     	; 0x5ada <sha204m_mac+0x72>
	{
		memcpy(&tx_buffer[MAC_CHALLENGE_IDX], challenge, MAC_CHALLENGE_SIZE);
    5abe:	cd 01       	movw	r24, r26
    5ac0:	05 96       	adiw	r24, 0x05	; 5
    5ac2:	ae 01       	movw	r20, r28
    5ac4:	20 e2       	ldi	r18, 0x20	; 32
    5ac6:	ea 01       	movw	r28, r20
    5ac8:	09 90       	ld	r0, Y+
    5aca:	ae 01       	movw	r20, r28
    5acc:	ec 01       	movw	r28, r24
    5ace:	09 92       	st	Y+, r0
    5ad0:	ce 01       	movw	r24, r28
    5ad2:	21 50       	subi	r18, 0x01	; 1
    5ad4:	c1 f7       	brne	.-16     	; 0x5ac6 <sha204m_mac+0x5e>
		tx_buffer[SHA204_COUNT_IDX] = MAC_COUNT_LONG;
    5ad6:	87 e2       	ldi	r24, 0x27	; 39
    5ad8:	8c 93       	st	X, r24
	}

	return sha204c_send_and_receive(&tx_buffer[0], MAC_RSP_SIZE, &rx_buffer[0],
    5ada:	cd 01       	movw	r24, r26
    5adc:	63 e2       	ldi	r22, 0x23	; 35
    5ade:	af 01       	movw	r20, r30
    5ae0:	2b e0       	ldi	r18, 0x0B	; 11
    5ae2:	08 e1       	ldi	r16, 0x18	; 24
    5ae4:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5ae8:	01 c0       	rjmp	.+2      	; 0x5aec <sha204m_mac+0x84>
uint8_t sha204m_mac(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t mode, uint16_t key_id, uint8_t *challenge)
{
	if (!tx_buffer || !rx_buffer || ((mode & ~MAC_MODE_MASK) != 0)
				|| (((mode & MAC_MODE_BLOCK2_TEMPKEY) == 0) && !challenge))
		return SHA204_BAD_PARAM;
    5aea:	82 ee       	ldi	r24, 0xE2	; 226
		tx_buffer[SHA204_COUNT_IDX] = MAC_COUNT_LONG;
	}

	return sha204c_send_and_receive(&tx_buffer[0], MAC_RSP_SIZE, &rx_buffer[0],
				MAC_DELAY, MAC_EXEC_MAX - MAC_DELAY);
}
    5aec:	df 91       	pop	r29
    5aee:	cf 91       	pop	r28
    5af0:	1f 91       	pop	r17
    5af2:	0f 91       	pop	r16
    5af4:	08 95       	ret

00005af6 <sha204m_nonce>:
 *              mode < 2: 20 bytes\n
 *              mode == 2: not allowed)
 * \return status of the operation
 */
uint8_t sha204m_nonce(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode, uint8_t *numin)
{
    5af6:	0f 93       	push	r16
    5af8:	cf 93       	push	r28
    5afa:	df 93       	push	r29
    5afc:	dc 01       	movw	r26, r24
    5afe:	fb 01       	movw	r30, r22
	uint8_t rx_size;

	if (!tx_buffer || !rx_buffer || !numin
    5b00:	00 97       	sbiw	r24, 0x00	; 0
    5b02:	e1 f1       	breq	.+120    	; 0x5b7c <sha204m_nonce+0x86>
    5b04:	30 97       	sbiw	r30, 0x00	; 0
    5b06:	d1 f1       	breq	.+116    	; 0x5b7c <sha204m_nonce+0x86>
    5b08:	21 15       	cp	r18, r1
    5b0a:	31 05       	cpc	r19, r1
    5b0c:	b9 f1       	breq	.+110    	; 0x5b7c <sha204m_nonce+0x86>
				|| (mode > NONCE_MODE_PASSTHROUGH) || (mode == NONCE_MODE_INVALID))
    5b0e:	44 30       	cpi	r20, 0x04	; 4
    5b10:	a8 f5       	brcc	.+106    	; 0x5b7c <sha204m_nonce+0x86>
    5b12:	42 30       	cpi	r20, 0x02	; 2
    5b14:	99 f1       	breq	.+102    	; 0x5b7c <sha204m_nonce+0x86>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_OPCODE_IDX] = SHA204_NONCE;
    5b16:	86 e1       	ldi	r24, 0x16	; 22
    5b18:	11 96       	adiw	r26, 0x01	; 1
    5b1a:	8c 93       	st	X, r24
    5b1c:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[NONCE_MODE_IDX] = mode;
    5b1e:	12 96       	adiw	r26, 0x02	; 2
    5b20:	4c 93       	st	X, r20
    5b22:	12 97       	sbiw	r26, 0x02	; 2

	// 2. parameter is 0.
	tx_buffer[NONCE_PARAM2_IDX] =
	tx_buffer[NONCE_PARAM2_IDX + 1] = 0;
    5b24:	14 96       	adiw	r26, 0x04	; 4
    5b26:	1c 92       	st	X, r1
    5b28:	14 97       	sbiw	r26, 0x04	; 4

	tx_buffer[SHA204_OPCODE_IDX] = SHA204_NONCE;
	tx_buffer[NONCE_MODE_IDX] = mode;

	// 2. parameter is 0.
	tx_buffer[NONCE_PARAM2_IDX] =
    5b2a:	13 96       	adiw	r26, 0x03	; 3
    5b2c:	1c 92       	st	X, r1
    5b2e:	13 97       	sbiw	r26, 0x03	; 3
    5b30:	cd 01       	movw	r24, r26
    5b32:	05 96       	adiw	r24, 0x05	; 5
	tx_buffer[NONCE_PARAM2_IDX + 1] = 0;

	if (mode != NONCE_MODE_PASSTHROUGH)
    5b34:	43 30       	cpi	r20, 0x03	; 3
    5b36:	71 f0       	breq	.+28     	; 0x5b54 <sha204m_nonce+0x5e>
	{
		memcpy(&tx_buffer[NONCE_INPUT_IDX], numin, NONCE_NUMIN_SIZE);
    5b38:	a9 01       	movw	r20, r18
    5b3a:	24 e1       	ldi	r18, 0x14	; 20
    5b3c:	ea 01       	movw	r28, r20
    5b3e:	09 90       	ld	r0, Y+
    5b40:	ae 01       	movw	r20, r28
    5b42:	ec 01       	movw	r28, r24
    5b44:	09 92       	st	Y+, r0
    5b46:	ce 01       	movw	r24, r28
    5b48:	21 50       	subi	r18, 0x01	; 1
    5b4a:	c1 f7       	brne	.-16     	; 0x5b3c <sha204m_nonce+0x46>
		tx_buffer[SHA204_COUNT_IDX] = NONCE_COUNT_SHORT;
    5b4c:	8b e1       	ldi	r24, 0x1B	; 27
    5b4e:	8c 93       	st	X, r24
		rx_size = NONCE_RSP_SIZE_LONG;
    5b50:	63 e2       	ldi	r22, 0x23	; 35
    5b52:	0d c0       	rjmp	.+26     	; 0x5b6e <sha204m_nonce+0x78>
	}
	else
	{
		memcpy(&tx_buffer[NONCE_INPUT_IDX], numin, NONCE_NUMIN_SIZE_PASSTHROUGH);
    5b54:	a9 01       	movw	r20, r18
    5b56:	20 e2       	ldi	r18, 0x20	; 32
    5b58:	ea 01       	movw	r28, r20
    5b5a:	09 90       	ld	r0, Y+
    5b5c:	ae 01       	movw	r20, r28
    5b5e:	ec 01       	movw	r28, r24
    5b60:	09 92       	st	Y+, r0
    5b62:	ce 01       	movw	r24, r28
    5b64:	21 50       	subi	r18, 0x01	; 1
    5b66:	c1 f7       	brne	.-16     	; 0x5b58 <sha204m_nonce+0x62>
		tx_buffer[SHA204_COUNT_IDX] = NONCE_COUNT_LONG;
    5b68:	87 e2       	ldi	r24, 0x27	; 39
    5b6a:	8c 93       	st	X, r24
		rx_size = NONCE_RSP_SIZE_SHORT;
    5b6c:	64 e0       	ldi	r22, 0x04	; 4
	}

	return sha204c_send_and_receive(&tx_buffer[0], rx_size, &rx_buffer[0],
    5b6e:	cd 01       	movw	r24, r26
    5b70:	af 01       	movw	r20, r30
    5b72:	25 e1       	ldi	r18, 0x15	; 21
    5b74:	08 e2       	ldi	r16, 0x28	; 40
    5b76:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5b7a:	01 c0       	rjmp	.+2      	; 0x5b7e <sha204m_nonce+0x88>
{
	uint8_t rx_size;

	if (!tx_buffer || !rx_buffer || !numin
				|| (mode > NONCE_MODE_PASSTHROUGH) || (mode == NONCE_MODE_INVALID))
		return SHA204_BAD_PARAM;
    5b7c:	82 ee       	ldi	r24, 0xE2	; 226
		rx_size = NONCE_RSP_SIZE_SHORT;
	}

	return sha204c_send_and_receive(&tx_buffer[0], rx_size, &rx_buffer[0],
				NONCE_DELAY, NONCE_EXEC_MAX - NONCE_DELAY);
}
    5b7e:	df 91       	pop	r29
    5b80:	cf 91       	pop	r28
    5b82:	0f 91       	pop	r16
    5b84:	08 95       	ret

00005b86 <sha204m_pause>:
 * \param[out] rx_buffer pointer to receive buffer
 * \param[in]  selector Devices not matching this value will pause.
 * \return status of the operation
 */
uint8_t sha204m_pause(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t selector)
{
    5b86:	0f 93       	push	r16
    5b88:	fc 01       	movw	r30, r24
    5b8a:	9b 01       	movw	r18, r22
	if (!tx_buffer || !rx_buffer)
    5b8c:	00 97       	sbiw	r24, 0x00	; 0
    5b8e:	91 f0       	breq	.+36     	; 0x5bb4 <sha204m_pause+0x2e>
    5b90:	61 15       	cp	r22, r1
    5b92:	71 05       	cpc	r23, r1
    5b94:	79 f0       	breq	.+30     	; 0x5bb4 <sha204m_pause+0x2e>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = PAUSE_COUNT;
    5b96:	87 e0       	ldi	r24, 0x07	; 7
    5b98:	80 83       	st	Z, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_PAUSE;
    5b9a:	81 e0       	ldi	r24, 0x01	; 1
    5b9c:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[PAUSE_SELECT_IDX] = selector;
    5b9e:	42 83       	std	Z+2, r20	; 0x02

	// 2. parameter is 0.
	tx_buffer[PAUSE_PARAM2_IDX] =
	tx_buffer[PAUSE_PARAM2_IDX + 1] = 0;
    5ba0:	14 82       	std	Z+4, r1	; 0x04
	tx_buffer[SHA204_COUNT_IDX] = PAUSE_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_PAUSE;
	tx_buffer[PAUSE_SELECT_IDX] = selector;

	// 2. parameter is 0.
	tx_buffer[PAUSE_PARAM2_IDX] =
    5ba2:	13 82       	std	Z+3, r1	; 0x03
	tx_buffer[PAUSE_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], PAUSE_RSP_SIZE, &rx_buffer[0],
    5ba4:	cf 01       	movw	r24, r30
    5ba6:	64 e0       	ldi	r22, 0x04	; 4
    5ba8:	a9 01       	movw	r20, r18
    5baa:	20 e0       	ldi	r18, 0x00	; 0
    5bac:	02 e0       	ldi	r16, 0x02	; 2
    5bae:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5bb2:	01 c0       	rjmp	.+2      	; 0x5bb6 <sha204m_pause+0x30>
 * \return status of the operation
 */
uint8_t sha204m_pause(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t selector)
{
	if (!tx_buffer || !rx_buffer)
		return SHA204_BAD_PARAM;
    5bb4:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[PAUSE_PARAM2_IDX] =
	tx_buffer[PAUSE_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], PAUSE_RSP_SIZE, &rx_buffer[0],
				PAUSE_DELAY, PAUSE_EXEC_MAX - PAUSE_DELAY);
}
    5bb6:	0f 91       	pop	r16
    5bb8:	08 95       	ret

00005bba <sha204m_random>:
 * \param[out] rx_buffer pointer to receive buffer
 * \param[in]  mode 0: update seed; 1: no seed update
 * \return status of the operation
 */
uint8_t sha204m_random(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode)
{
    5bba:	0f 93       	push	r16
    5bbc:	fc 01       	movw	r30, r24
    5bbe:	9b 01       	movw	r18, r22
	if (!tx_buffer || !rx_buffer || (mode > RANDOM_NO_SEED_UPDATE))
    5bc0:	00 97       	sbiw	r24, 0x00	; 0
    5bc2:	a1 f0       	breq	.+40     	; 0x5bec <sha204m_random+0x32>
    5bc4:	61 15       	cp	r22, r1
    5bc6:	71 05       	cpc	r23, r1
    5bc8:	89 f0       	breq	.+34     	; 0x5bec <sha204m_random+0x32>
    5bca:	42 30       	cpi	r20, 0x02	; 2
    5bcc:	78 f4       	brcc	.+30     	; 0x5bec <sha204m_random+0x32>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = RANDOM_COUNT;
    5bce:	87 e0       	ldi	r24, 0x07	; 7
    5bd0:	80 83       	st	Z, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_RANDOM;
    5bd2:	8b e1       	ldi	r24, 0x1B	; 27
    5bd4:	81 83       	std	Z+1, r24	; 0x01
	tx_buffer[RANDOM_MODE_IDX] = mode & RANDOM_SEED_UPDATE;
    5bd6:	12 82       	std	Z+2, r1	; 0x02

	// 2. parameter is 0.
	tx_buffer[RANDOM_PARAM2_IDX] =
	tx_buffer[RANDOM_PARAM2_IDX + 1] = 0;
    5bd8:	14 82       	std	Z+4, r1	; 0x04
	tx_buffer[SHA204_COUNT_IDX] = RANDOM_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_RANDOM;
	tx_buffer[RANDOM_MODE_IDX] = mode & RANDOM_SEED_UPDATE;

	// 2. parameter is 0.
	tx_buffer[RANDOM_PARAM2_IDX] =
    5bda:	13 82       	std	Z+3, r1	; 0x03
	tx_buffer[RANDOM_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], RANDOM_RSP_SIZE, &rx_buffer[0],
    5bdc:	cf 01       	movw	r24, r30
    5bde:	63 e2       	ldi	r22, 0x23	; 35
    5be0:	a9 01       	movw	r20, r18
    5be2:	2a e0       	ldi	r18, 0x0A	; 10
    5be4:	09 e2       	ldi	r16, 0x29	; 41
    5be6:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5bea:	01 c0       	rjmp	.+2      	; 0x5bee <sha204m_random+0x34>
 * \return status of the operation
 */
uint8_t sha204m_random(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode)
{
	if (!tx_buffer || !rx_buffer || (mode > RANDOM_NO_SEED_UPDATE))
		return SHA204_BAD_PARAM;
    5bec:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[RANDOM_PARAM2_IDX] =
	tx_buffer[RANDOM_PARAM2_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], RANDOM_RSP_SIZE, &rx_buffer[0],
				RANDOM_DELAY, RANDOM_EXEC_MAX - RANDOM_DELAY);
}
    5bee:	0f 91       	pop	r16
    5bf0:	08 95       	ret

00005bf2 <sha204m_read>:
 * \param[in]  zone 0: Configuration; 1: OTP; 2: Data
 * \param[in]  byte address address to read from\n
 * \return status of the operation
 */
uint8_t sha204m_read(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t zone, uint16_t address)
{
    5bf2:	0f 93       	push	r16
    5bf4:	dc 01       	movw	r26, r24
    5bf6:	fb 01       	movw	r30, r22
	uint8_t rx_size;

	if (!tx_buffer || !rx_buffer || ((zone & ~READ_ZONE_MASK) != 0)
    5bf8:	00 97       	sbiw	r24, 0x00	; 0
    5bfa:	69 f1       	breq	.+90     	; 0x5c56 <sha204m_read+0x64>
    5bfc:	30 97       	sbiw	r30, 0x00	; 0
    5bfe:	59 f1       	breq	.+86     	; 0x5c56 <sha204m_read+0x64>
    5c00:	84 2f       	mov	r24, r20
    5c02:	90 e0       	ldi	r25, 0x00	; 0
    5c04:	bc 01       	movw	r22, r24
    5c06:	6c 77       	andi	r22, 0x7C	; 124
				|| ((zone & READ_ZONE_MODE_32_BYTES) && (zone == SHA204_ZONE_OTP)))
    5c08:	61 15       	cp	r22, r1
    5c0a:	71 05       	cpc	r23, r1
    5c0c:	21 f5       	brne	.+72     	; 0x5c56 <sha204m_read+0x64>
		return SHA204_BAD_PARAM;

	if (zone & SHA204_ZONE_DATA) {
    5c0e:	41 ff       	sbrs	r20, 1
    5c10:	06 c0       	rjmp	.+12     	; 0x5c1e <sha204m_read+0x2c>
		address >>= 2;
    5c12:	36 95       	lsr	r19
    5c14:	27 95       	ror	r18
    5c16:	36 95       	lsr	r19
    5c18:	27 95       	ror	r18
		if (address & 1)
    5c1a:	20 fd       	sbrc	r18, 0
    5c1c:	1c c0       	rjmp	.+56     	; 0x5c56 <sha204m_read+0x64>
			// If we would just mask this bit, we would
			// read from an address that was not intended.
			return SHA204_BAD_PARAM;
	}

	tx_buffer[SHA204_COUNT_IDX] = READ_COUNT;
    5c1e:	87 e0       	ldi	r24, 0x07	; 7
    5c20:	8c 93       	st	X, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_READ;
    5c22:	82 e0       	ldi	r24, 0x02	; 2
    5c24:	11 96       	adiw	r26, 0x01	; 1
    5c26:	8c 93       	st	X, r24
    5c28:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[READ_ZONE_IDX] = zone;
    5c2a:	12 96       	adiw	r26, 0x02	; 2
    5c2c:	4c 93       	st	X, r20
    5c2e:	12 97       	sbiw	r26, 0x02	; 2
	tx_buffer[READ_ADDR_IDX] = (uint8_t) (address & SHA204_ADDRESS_MASK);
    5c30:	2f 77       	andi	r18, 0x7F	; 127
    5c32:	13 96       	adiw	r26, 0x03	; 3
    5c34:	2c 93       	st	X, r18
    5c36:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[READ_ADDR_IDX + 1] = 0;
    5c38:	14 96       	adiw	r26, 0x04	; 4
    5c3a:	1c 92       	st	X, r1
    5c3c:	14 97       	sbiw	r26, 0x04	; 4

	rx_size = (zone & SHA204_ZONE_COUNT_FLAG) ? READ_32_RSP_SIZE : READ_4_RSP_SIZE;
    5c3e:	47 ff       	sbrs	r20, 7
    5c40:	02 c0       	rjmp	.+4      	; 0x5c46 <sha204m_read+0x54>
    5c42:	63 e2       	ldi	r22, 0x23	; 35
    5c44:	01 c0       	rjmp	.+2      	; 0x5c48 <sha204m_read+0x56>
    5c46:	67 e0       	ldi	r22, 0x07	; 7

	return sha204c_send_and_receive(&tx_buffer[0], rx_size, &rx_buffer[0],
    5c48:	cd 01       	movw	r24, r26
    5c4a:	af 01       	movw	r20, r30
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	04 e0       	ldi	r16, 0x04	; 4
    5c50:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5c54:	01 c0       	rjmp	.+2      	; 0x5c58 <sha204m_read+0x66>
	if (zone & SHA204_ZONE_DATA) {
		address >>= 2;
		if (address & 1)
			// If we would just mask this bit, we would
			// read from an address that was not intended.
			return SHA204_BAD_PARAM;
    5c56:	82 ee       	ldi	r24, 0xE2	; 226

	rx_size = (zone & SHA204_ZONE_COUNT_FLAG) ? READ_32_RSP_SIZE : READ_4_RSP_SIZE;

	return sha204c_send_and_receive(&tx_buffer[0], rx_size, &rx_buffer[0],
				READ_DELAY, READ_EXEC_MAX - READ_DELAY);
}
    5c58:	0f 91       	pop	r16
    5c5a:	08 95       	ret

00005c5c <sha204m_temp_sense>:
 *              T(C) = 0.855 * (temp_raw + T(offset) - 334)\n
 *                 where T(offset) is a field in the configuration zone.
 * \return status of the operation
 */
uint8_t sha204m_temp_sense(uint8_t *tx_buffer, uint8_t *rx_buffer, uint16_t *temp_raw)
{
    5c5c:	ef 92       	push	r14
    5c5e:	ff 92       	push	r15
    5c60:	0f 93       	push	r16
    5c62:	cf 93       	push	r28
    5c64:	df 93       	push	r29
    5c66:	fc 01       	movw	r30, r24
    5c68:	eb 01       	movw	r28, r22
    5c6a:	7a 01       	movw	r14, r20
	uint8_t ret_code;
	uint8_t *temp_data;
	uint16_t temp_high, temp_low;

	if (!tx_buffer || !rx_buffer || !temp_raw)
    5c6c:	00 97       	sbiw	r24, 0x00	; 0
    5c6e:	59 f1       	breq	.+86     	; 0x5cc6 <sha204m_temp_sense+0x6a>
    5c70:	20 97       	sbiw	r28, 0x00	; 0
    5c72:	49 f1       	breq	.+82     	; 0x5cc6 <sha204m_temp_sense+0x6a>
    5c74:	41 15       	cp	r20, r1
    5c76:	51 05       	cpc	r21, r1
    5c78:	31 f1       	breq	.+76     	; 0x5cc6 <sha204m_temp_sense+0x6a>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = TEMP_SENSE_COUNT;
    5c7a:	87 e0       	ldi	r24, 0x07	; 7
    5c7c:	80 83       	st	Z, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_TEMPSENSE;
    5c7e:	88 e1       	ldi	r24, 0x18	; 24
    5c80:	81 83       	std	Z+1, r24	; 0x01

	// Parameters are 0.
	tx_buffer[TEMP_SENSE_PARAM1_IDX] =
	tx_buffer[TEMP_SENSE_PARAM2_IDX] =
	tx_buffer[TEMP_SENSE_PARAM2_IDX + 1] = 0;
    5c82:	14 82       	std	Z+4, r1	; 0x04
	tx_buffer[SHA204_COUNT_IDX] = TEMP_SENSE_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_TEMPSENSE;

	// Parameters are 0.
	tx_buffer[TEMP_SENSE_PARAM1_IDX] =
	tx_buffer[TEMP_SENSE_PARAM2_IDX] =
    5c84:	13 82       	std	Z+3, r1	; 0x03

	tx_buffer[SHA204_COUNT_IDX] = TEMP_SENSE_COUNT;
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_TEMPSENSE;

	// Parameters are 0.
	tx_buffer[TEMP_SENSE_PARAM1_IDX] =
    5c86:	12 82       	std	Z+2, r1	; 0x02
	tx_buffer[TEMP_SENSE_PARAM2_IDX] =
	tx_buffer[TEMP_SENSE_PARAM2_IDX + 1] = 0;

	ret_code = sha204c_send_and_receive(&tx_buffer[0], TEMP_SENSE_RSP_SIZE, &rx_buffer[0],
    5c88:	cf 01       	movw	r24, r30
    5c8a:	67 e0       	ldi	r22, 0x07	; 7
    5c8c:	ae 01       	movw	r20, r28
    5c8e:	23 e0       	ldi	r18, 0x03	; 3
    5c90:	08 e0       	ldi	r16, 0x08	; 8
    5c92:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
				TEMP_SENSE_DELAY, TEMP_SENSE_EXEC_MAX - TEMP_SENSE_DELAY);
	if (ret_code != SHA204_SUCCESS)
    5c96:	88 23       	and	r24, r24
    5c98:	b9 f4       	brne	.+46     	; 0x5cc8 <sha204m_temp_sense+0x6c>
		return ret_code;

	// Calculate temp_raw.
	temp_data = &rx_buffer[SHA204_BUFFER_POS_DATA];
    5c9a:	de 01       	movw	r26, r28
    5c9c:	11 96       	adiw	r26, 0x01	; 1
	temp_high = *temp_data++ << 8;
    5c9e:	39 81       	ldd	r19, Y+1	; 0x01
    5ca0:	20 e0       	ldi	r18, 0x00	; 0
    5ca2:	fd 01       	movw	r30, r26
    5ca4:	31 96       	adiw	r30, 0x01	; 1
	temp_high += *temp_data++;
    5ca6:	11 96       	adiw	r26, 0x01	; 1
    5ca8:	9c 91       	ld	r25, X
    5caa:	11 97       	sbiw	r26, 0x01	; 1
    5cac:	29 0f       	add	r18, r25
    5cae:	31 1d       	adc	r19, r1
	temp_low = *temp_data++ << 8;
	temp_low += *temp_data;
    5cb0:	92 81       	ldd	r25, Z+2	; 0x02
    5cb2:	29 1b       	sub	r18, r25
    5cb4:	31 09       	sbc	r19, r1

	// Calculate temp_raw.
	temp_data = &rx_buffer[SHA204_BUFFER_POS_DATA];
	temp_high = *temp_data++ << 8;
	temp_high += *temp_data++;
	temp_low = *temp_data++ << 8;
    5cb6:	51 81       	ldd	r21, Z+1	; 0x01
    5cb8:	40 e0       	ldi	r20, 0x00	; 0
	temp_low += *temp_data;
	*temp_raw = temp_high - temp_low;
    5cba:	24 1b       	sub	r18, r20
    5cbc:	35 0b       	sbc	r19, r21
    5cbe:	f7 01       	movw	r30, r14
    5cc0:	31 83       	std	Z+1, r19	; 0x01
    5cc2:	20 83       	st	Z, r18

	return ret_code;
    5cc4:	01 c0       	rjmp	.+2      	; 0x5cc8 <sha204m_temp_sense+0x6c>
	uint8_t ret_code;
	uint8_t *temp_data;
	uint16_t temp_high, temp_low;

	if (!tx_buffer || !rx_buffer || !temp_raw)
		return SHA204_BAD_PARAM;
    5cc6:	82 ee       	ldi	r24, 0xE2	; 226
	temp_low = *temp_data++ << 8;
	temp_low += *temp_data;
	*temp_raw = temp_high - temp_low;

	return ret_code;
}
    5cc8:	df 91       	pop	r29
    5cca:	cf 91       	pop	r28
    5ccc:	0f 91       	pop	r16
    5cce:	ff 90       	pop	r15
    5cd0:	ef 90       	pop	r14
    5cd2:	08 95       	ret

00005cd4 <sha204m_update_extra>:
 * \param[in]  mode 0: update Configuration zone byte 85; 1: byte 86
 * \param[in]  new_value byte to write
 * \return status of the operation
 */
uint8_t sha204m_update_extra(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode, uint8_t new_value)
{
    5cd4:	0f 93       	push	r16
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	fb 01       	movw	r30, r22
	if (!tx_buffer || !rx_buffer || (mode > UPDATE_CONFIG_BYTE_86))
    5cda:	00 97       	sbiw	r24, 0x00	; 0
    5cdc:	d9 f0       	breq	.+54     	; 0x5d14 <sha204m_update_extra+0x40>
    5cde:	30 97       	sbiw	r30, 0x00	; 0
    5ce0:	c9 f0       	breq	.+50     	; 0x5d14 <sha204m_update_extra+0x40>
    5ce2:	42 30       	cpi	r20, 0x02	; 2
    5ce4:	b8 f4       	brcc	.+46     	; 0x5d14 <sha204m_update_extra+0x40>
		return SHA204_BAD_PARAM;

	tx_buffer[SHA204_COUNT_IDX] = UPDATE_COUNT;
    5ce6:	87 e0       	ldi	r24, 0x07	; 7
    5ce8:	8c 93       	st	X, r24
	tx_buffer[SHA204_OPCODE_IDX] = SHA204_UPDATE_EXTRA;
    5cea:	80 e2       	ldi	r24, 0x20	; 32
    5cec:	11 96       	adiw	r26, 0x01	; 1
    5cee:	8c 93       	st	X, r24
    5cf0:	11 97       	sbiw	r26, 0x01	; 1
	tx_buffer[UPDATE_MODE_IDX] = mode;
    5cf2:	12 96       	adiw	r26, 0x02	; 2
    5cf4:	4c 93       	st	X, r20
    5cf6:	12 97       	sbiw	r26, 0x02	; 2
	tx_buffer[UPDATE_VALUE_IDX] = new_value;
    5cf8:	13 96       	adiw	r26, 0x03	; 3
    5cfa:	2c 93       	st	X, r18
    5cfc:	13 97       	sbiw	r26, 0x03	; 3
	tx_buffer[UPDATE_VALUE_IDX + 1] = 0;
    5cfe:	14 96       	adiw	r26, 0x04	; 4
    5d00:	1c 92       	st	X, r1
    5d02:	14 97       	sbiw	r26, 0x04	; 4

	return sha204c_send_and_receive(&tx_buffer[0], UPDATE_RSP_SIZE, &rx_buffer[0],
    5d04:	cd 01       	movw	r24, r26
    5d06:	64 e0       	ldi	r22, 0x04	; 4
    5d08:	af 01       	movw	r20, r30
    5d0a:	23 e0       	ldi	r18, 0x03	; 3
    5d0c:	03 e0       	ldi	r16, 0x03	; 3
    5d0e:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5d12:	01 c0       	rjmp	.+2      	; 0x5d16 <sha204m_update_extra+0x42>
 * \return status of the operation
 */
uint8_t sha204m_update_extra(uint8_t *tx_buffer, uint8_t *rx_buffer, uint8_t mode, uint8_t new_value)
{
	if (!tx_buffer || !rx_buffer || (mode > UPDATE_CONFIG_BYTE_86))
		return SHA204_BAD_PARAM;
    5d14:	82 ee       	ldi	r24, 0xE2	; 226
	tx_buffer[UPDATE_VALUE_IDX] = new_value;
	tx_buffer[UPDATE_VALUE_IDX + 1] = 0;

	return sha204c_send_and_receive(&tx_buffer[0], UPDATE_RSP_SIZE, &rx_buffer[0],
				UPDATE_DELAY, UPDATE_EXEC_MAX - UPDATE_DELAY);
}
    5d16:	0f 91       	pop	r16
    5d18:	08 95       	ret

00005d1a <sha204m_write>:
 * \param[in]  mac pointer to MAC (ignored if zone is unlocked)
 * \return status of the operation
 */
uint8_t sha204m_write(uint8_t *tx_buffer, uint8_t *rx_buffer,
			uint8_t zone, uint16_t address, uint8_t *new_value, uint8_t *mac)
{
    5d1a:	8f 92       	push	r8
    5d1c:	9f 92       	push	r9
    5d1e:	af 92       	push	r10
    5d20:	bf 92       	push	r11
    5d22:	cf 92       	push	r12
    5d24:	df 92       	push	r13
    5d26:	ef 92       	push	r14
    5d28:	ff 92       	push	r15
    5d2a:	0f 93       	push	r16
    5d2c:	1f 93       	push	r17
    5d2e:	cf 93       	push	r28
    5d30:	df 93       	push	r29
    5d32:	6c 01       	movw	r12, r24
    5d34:	4b 01       	movw	r8, r22
	uint8_t *p_command;
	uint8_t count;

	if (!tx_buffer || !rx_buffer || !new_value || ((zone & ~WRITE_ZONE_MASK) != 0))
    5d36:	00 97       	sbiw	r24, 0x00	; 0
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <sha204m_write+0x22>
    5d3a:	53 c0       	rjmp	.+166    	; 0x5de2 <sha204m_write+0xc8>
    5d3c:	61 15       	cp	r22, r1
    5d3e:	71 05       	cpc	r23, r1
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <sha204m_write+0x2a>
    5d42:	4f c0       	rjmp	.+158    	; 0x5de2 <sha204m_write+0xc8>
    5d44:	01 15       	cp	r16, r1
    5d46:	11 05       	cpc	r17, r1
    5d48:	09 f4       	brne	.+2      	; 0x5d4c <sha204m_write+0x32>
    5d4a:	4b c0       	rjmp	.+150    	; 0x5de2 <sha204m_write+0xc8>
    5d4c:	84 2f       	mov	r24, r20
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
    5d50:	bc 01       	movw	r22, r24
    5d52:	6e 73       	andi	r22, 0x3E	; 62
    5d54:	61 15       	cp	r22, r1
    5d56:	71 05       	cpc	r23, r1
    5d58:	09 f0       	breq	.+2      	; 0x5d5c <sha204m_write+0x42>
    5d5a:	43 c0       	rjmp	.+134    	; 0x5de2 <sha204m_write+0xc8>
		return SHA204_BAD_PARAM;

	if (zone & SHA204_ZONE_DATA) {
    5d5c:	41 ff       	sbrs	r20, 1
    5d5e:	06 c0       	rjmp	.+12     	; 0x5d6c <sha204m_write+0x52>
		address >>= 2;
    5d60:	36 95       	lsr	r19
    5d62:	27 95       	ror	r18
    5d64:	36 95       	lsr	r19
    5d66:	27 95       	ror	r18
		if (address & 1)
    5d68:	20 fd       	sbrc	r18, 0
    5d6a:	3b c0       	rjmp	.+118    	; 0x5de2 <sha204m_write+0xc8>
			// If we would just mask this bit, we would
			// write to an address that was not intended.
			return SHA204_BAD_PARAM;
	}

	p_command = &tx_buffer[SHA204_OPCODE_IDX];
    5d6c:	d6 01       	movw	r26, r12
    5d6e:	11 96       	adiw	r26, 0x01	; 1
	*p_command++ = SHA204_WRITE;
    5d70:	82 e1       	ldi	r24, 0x12	; 18
    5d72:	f6 01       	movw	r30, r12
    5d74:	81 83       	std	Z+1, r24	; 0x01
    5d76:	fd 01       	movw	r30, r26
    5d78:	31 96       	adiw	r30, 0x01	; 1
	*p_command++ = zone;
    5d7a:	11 96       	adiw	r26, 0x01	; 1
    5d7c:	4c 93       	st	X, r20
    5d7e:	11 97       	sbiw	r26, 0x01	; 1
    5d80:	ef 01       	movw	r28, r30
    5d82:	21 96       	adiw	r28, 0x01	; 1
	*p_command++ = (uint8_t) (address & SHA204_ADDRESS_MASK);
    5d84:	2f 77       	andi	r18, 0x7F	; 127
    5d86:	21 83       	std	Z+1, r18	; 0x01
	*p_command++ = 0;
    5d88:	19 82       	std	Y+1, r1	; 0x01
    5d8a:	62 e0       	ldi	r22, 0x02	; 2
    5d8c:	a6 2e       	mov	r10, r22
    5d8e:	b1 2c       	mov	r11, r1
    5d90:	ac 0e       	add	r10, r28
    5d92:	bd 1e       	adc	r11, r29

	count = (zone & SHA204_ZONE_COUNT_FLAG) ? SHA204_ZONE_ACCESS_32 : SHA204_ZONE_ACCESS_4;
    5d94:	47 ff       	sbrs	r20, 7
    5d96:	02 c0       	rjmp	.+4      	; 0x5d9c <sha204m_write+0x82>
    5d98:	40 e2       	ldi	r20, 0x20	; 32
    5d9a:	01 c0       	rjmp	.+2      	; 0x5d9e <sha204m_write+0x84>
    5d9c:	44 e0       	ldi	r20, 0x04	; 4
	memcpy(p_command, new_value, count);
    5d9e:	c4 2f       	mov	r28, r20
    5da0:	d0 e0       	ldi	r29, 0x00	; 0
    5da2:	c5 01       	movw	r24, r10
    5da4:	b8 01       	movw	r22, r16
    5da6:	50 e0       	ldi	r21, 0x00	; 0
    5da8:	0e 94 6e 33 	call	0x66dc	; 0x66dc <memcpy>
	p_command += count;
    5dac:	ca 0d       	add	r28, r10
    5dae:	db 1d       	adc	r29, r11

	if (mac != NULL)
    5db0:	e1 14       	cp	r14, r1
    5db2:	f1 04       	cpc	r15, r1
    5db4:	41 f0       	breq	.+16     	; 0x5dc6 <sha204m_write+0xac>
	{
		memcpy(p_command, mac, WRITE_MAC_SIZE);
    5db6:	de 01       	movw	r26, r28
    5db8:	f7 01       	movw	r30, r14
    5dba:	80 e2       	ldi	r24, 0x20	; 32
    5dbc:	01 90       	ld	r0, Z+
    5dbe:	0d 92       	st	X+, r0
    5dc0:	81 50       	subi	r24, 0x01	; 1
    5dc2:	e1 f7       	brne	.-8      	; 0x5dbc <sha204m_write+0xa2>
		p_command += WRITE_MAC_SIZE;
    5dc4:	a0 96       	adiw	r28, 0x20	; 32
	}

	// Supply count.
	tx_buffer[SHA204_COUNT_IDX] = (uint8_t) (p_command - &tx_buffer[0] + SHA204_CRC_SIZE);
    5dc6:	9e 01       	movw	r18, r28
    5dc8:	2c 19       	sub	r18, r12
    5dca:	82 2f       	mov	r24, r18
    5dcc:	8e 5f       	subi	r24, 0xFE	; 254
    5dce:	f6 01       	movw	r30, r12
    5dd0:	80 83       	st	Z, r24

	return sha204c_send_and_receive(&tx_buffer[0], WRITE_RSP_SIZE, &rx_buffer[0],
    5dd2:	c6 01       	movw	r24, r12
    5dd4:	64 e0       	ldi	r22, 0x04	; 4
    5dd6:	a4 01       	movw	r20, r8
    5dd8:	23 e0       	ldi	r18, 0x03	; 3
    5dda:	07 e2       	ldi	r16, 0x27	; 39
    5ddc:	0e 94 48 2a 	call	0x5490	; 0x5490 <sha204c_send_and_receive>
    5de0:	01 c0       	rjmp	.+2      	; 0x5de4 <sha204m_write+0xca>
	if (zone & SHA204_ZONE_DATA) {
		address >>= 2;
		if (address & 1)
			// If we would just mask this bit, we would
			// write to an address that was not intended.
			return SHA204_BAD_PARAM;
    5de2:	82 ee       	ldi	r24, 0xE2	; 226
	// Supply count.
	tx_buffer[SHA204_COUNT_IDX] = (uint8_t) (p_command - &tx_buffer[0] + SHA204_CRC_SIZE);

	return sha204c_send_and_receive(&tx_buffer[0], WRITE_RSP_SIZE, &rx_buffer[0],
				WRITE_DELAY, WRITE_EXEC_MAX - WRITE_DELAY);
}
    5de4:	df 91       	pop	r29
    5de6:	cf 91       	pop	r28
    5de8:	1f 91       	pop	r17
    5dea:	0f 91       	pop	r16
    5dec:	ff 90       	pop	r15
    5dee:	ef 90       	pop	r14
    5df0:	df 90       	pop	r13
    5df2:	cf 90       	pop	r12
    5df4:	bf 90       	pop	r11
    5df6:	af 90       	pop	r10
    5df8:	9f 90       	pop	r9
    5dfa:	8f 90       	pop	r8
    5dfc:	08 95       	ret

00005dfe <sha204p_send_slave_address>:
/** \brief This function creates a Start condition and sends the TWI address.
 * \param[in] read #I2C_READ for reading, #I2C_WRITE for writing
 * \return status of the I2C operation
 */
static uint8_t sha204p_send_slave_address(uint8_t read)
{
    5dfe:	1f 93       	push	r17
    5e00:	df 93       	push	r29
    5e02:	cf 93       	push	r28
    5e04:	0f 92       	push	r0
    5e06:	cd b7       	in	r28, 0x3d	; 61
    5e08:	de b7       	in	r29, 0x3e	; 62
	uint8_t sla = device_address | read;
    5e0a:	90 91 73 01 	lds	r25, 0x0173
    5e0e:	98 2b       	or	r25, r24
    5e10:	99 83       	std	Y+1, r25	; 0x01
	uint8_t ret_code = i2c_send_start();
    5e12:	0e 94 04 29 	call	0x5208	; 0x5208 <i2c_send_start>
    5e16:	18 2f       	mov	r17, r24
	if (ret_code != I2C_FUNCTION_RETCODE_SUCCESS)
    5e18:	88 23       	and	r24, r24
    5e1a:	59 f4       	brne	.+22     	; 0x5e32 <sha204p_send_slave_address+0x34>
		return ret_code;

	ret_code = i2c_send_bytes(1, &sla);
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	be 01       	movw	r22, r28
    5e20:	6f 5f       	subi	r22, 0xFF	; 255
    5e22:	7f 4f       	sbci	r23, 0xFF	; 255
    5e24:	0e 94 33 29 	call	0x5266	; 0x5266 <i2c_send_bytes>
    5e28:	18 2f       	mov	r17, r24

	if (ret_code != I2C_FUNCTION_RETCODE_SUCCESS)
    5e2a:	88 23       	and	r24, r24
    5e2c:	11 f0       	breq	.+4      	; 0x5e32 <sha204p_send_slave_address+0x34>
		(void) i2c_send_stop();
    5e2e:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>

	return ret_code;
}
    5e32:	81 2f       	mov	r24, r17
    5e34:	0f 90       	pop	r0
    5e36:	cf 91       	pop	r28
    5e38:	df 91       	pop	r29
    5e3a:	1f 91       	pop	r17
    5e3c:	08 95       	ret

00005e3e <sha204p_i2c_send>:
 * @param[in] count number of bytes in data buffer
 * @param[in] buffer pointer to data buffer
 * @return status of the operation
 */
static uint8_t sha204p_i2c_send(uint8_t word_address, uint8_t count, uint8_t *buffer)
{
    5e3e:	ff 92       	push	r15
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	df 93       	push	r29
    5e46:	cf 93       	push	r28
    5e48:	0f 92       	push	r0
    5e4a:	cd b7       	in	r28, 0x3d	; 61
    5e4c:	de b7       	in	r29, 0x3e	; 62
    5e4e:	89 83       	std	Y+1, r24	; 0x01
    5e50:	f6 2e       	mov	r15, r22
    5e52:	8a 01       	movw	r16, r20
	uint8_t i2c_status = sha204p_send_slave_address(I2C_WRITE);
    5e54:	80 e0       	ldi	r24, 0x00	; 0
    5e56:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <sha204p_send_slave_address>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS) {
    5e5a:	88 23       	and	r24, r24
    5e5c:	19 f0       	breq	.+6      	; 0x5e64 <sha204p_i2c_send+0x26>
		(void) i2c_send_stop();
    5e5e:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>
    5e62:	16 c0       	rjmp	.+44     	; 0x5e90 <sha204p_i2c_send+0x52>
		return SHA204_COMM_FAIL;
	}

	i2c_status = i2c_send_bytes(1, &word_address);
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	be 01       	movw	r22, r28
    5e68:	6f 5f       	subi	r22, 0xFF	; 255
    5e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e6c:	0e 94 33 29 	call	0x5266	; 0x5266 <i2c_send_bytes>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
    5e70:	88 23       	and	r24, r24
    5e72:	71 f4       	brne	.+28     	; 0x5e90 <sha204p_i2c_send+0x52>
		return SHA204_COMM_FAIL;

	if (count == 0) {
    5e74:	ff 20       	and	r15, r15
    5e76:	19 f4       	brne	.+6      	; 0x5e7e <sha204p_i2c_send+0x40>
		// We are done for packets that are not commands (Sleep, Idle, Reset).
		(void) i2c_send_stop();
    5e78:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>
    5e7c:	0b c0       	rjmp	.+22     	; 0x5e94 <sha204p_i2c_send+0x56>
		return SHA204_SUCCESS;
	}

	i2c_status = i2c_send_bytes(count, buffer);
    5e7e:	8f 2d       	mov	r24, r15
    5e80:	b8 01       	movw	r22, r16
    5e82:	0e 94 33 29 	call	0x5266	; 0x5266 <i2c_send_bytes>
    5e86:	08 2f       	mov	r16, r24

	(void) i2c_send_stop();
    5e88:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>

	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
    5e8c:	00 23       	and	r16, r16
    5e8e:	11 f0       	breq	.+4      	; 0x5e94 <sha204p_i2c_send+0x56>
		return SHA204_COMM_FAIL;
	}

	i2c_status = i2c_send_bytes(1, &word_address);
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
    5e90:	80 ef       	ldi	r24, 0xF0	; 240
    5e92:	01 c0       	rjmp	.+2      	; 0x5e96 <sha204p_i2c_send+0x58>
	(void) i2c_send_stop();

	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
	else
		return SHA204_SUCCESS;
    5e94:	80 e0       	ldi	r24, 0x00	; 0
}
    5e96:	0f 90       	pop	r0
    5e98:	cf 91       	pop	r28
    5e9a:	df 91       	pop	r29
    5e9c:	1f 91       	pop	r17
    5e9e:	0f 91       	pop	r16
    5ea0:	ff 90       	pop	r15
    5ea2:	08 95       	ret

00005ea4 <sha204p_set_device_id>:
 *
 *  \param[in] id I2C address
 */
void sha204p_set_device_id(uint8_t id)
{
	device_address = id;
    5ea4:	80 93 73 01 	sts	0x0173, r24
}
    5ea8:	08 95       	ret

00005eaa <sha204p_init>:

/** \brief This I2C function initializes the hardware.
 */
void sha204p_init(void)
{
	i2c_enable();
    5eaa:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <i2c_enable>
	device_address = SHA204_I2C_DEFAULT_ADDRESS;
    5eae:	88 ec       	ldi	r24, 0xC8	; 200
    5eb0:	80 93 73 01 	sts	0x0173, r24
}
    5eb4:	08 95       	ret

00005eb6 <sha204p_wakeup>:

/** \brief This I2C function generates a Wake-up pulse and delays.
 * \return status of the operation
 */
uint8_t sha204p_wakeup(void)
{
    5eb6:	df 93       	push	r29
    5eb8:	cf 93       	push	r28
    5eba:	0f 92       	push	r0
    5ebc:	cd b7       	in	r28, 0x3d	; 61
    5ebe:	de b7       	in	r29, 0x3e	; 62
	uint8_t dummy_byte = 0;
    5ec0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t i2c_status = i2c_send_start();
    5ec2:	0e 94 04 29 	call	0x5208	; 0x5208 <i2c_send_start>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
    5ec6:	88 23       	and	r24, r24
    5ec8:	91 f4       	brne	.+36     	; 0x5eee <sha204p_wakeup+0x38>
		return SHA204_COMM_FAIL;

	/** \todo Find out whether SDA usually stays low. */
	// To send eight zero bits it takes 10E6 / I2C clock * 8 us.
	delay_10us(SHA204_WAKEUP_PULSE_WIDTH - (uint8_t) (1000000.0 / 10.0 / I2C_CLOCK * 8.0));
    5eca:	8e ef       	ldi	r24, 0xFE	; 254
    5ecc:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <delay_10us>

	// We have to send at least one byte between a
	// I2C Start and a I2C Stop.
	(void) i2c_send_bytes(1, &dummy_byte);
    5ed0:	81 e0       	ldi	r24, 0x01	; 1
    5ed2:	be 01       	movw	r22, r28
    5ed4:	6f 5f       	subi	r22, 0xFF	; 255
    5ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ed8:	0e 94 33 29 	call	0x5266	; 0x5266 <i2c_send_bytes>
	i2c_status = i2c_send_stop();
    5edc:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
    5ee0:	88 23       	and	r24, r24
    5ee2:	29 f4       	brne	.+10     	; 0x5eee <sha204p_wakeup+0x38>
		return SHA204_COMM_FAIL;

	delay_ms(SHA204_WAKEUP_DELAY);
    5ee4:	83 e0       	ldi	r24, 0x03	; 3
    5ee6:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <delay_ms>

	return SHA204_SUCCESS;
    5eea:	80 e0       	ldi	r24, 0x00	; 0
    5eec:	01 c0       	rjmp	.+2      	; 0x5ef0 <sha204p_wakeup+0x3a>
	// We have to send at least one byte between a
	// I2C Start and a I2C Stop.
	(void) i2c_send_bytes(1, &dummy_byte);
	i2c_status = i2c_send_stop();
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
    5eee:	80 ef       	ldi	r24, 0xF0	; 240

	delay_ms(SHA204_WAKEUP_DELAY);

	return SHA204_SUCCESS;
}
    5ef0:	0f 90       	pop	r0
    5ef2:	cf 91       	pop	r28
    5ef4:	df 91       	pop	r29
    5ef6:	08 95       	ret

00005ef8 <sha204p_send_command>:
 * \param[in] count number of bytes to send
 * \param[in] command pointer to command buffer
 * \return status of the operation
 */
uint8_t sha204p_send_command(uint8_t count, uint8_t *command)
{
    5ef8:	98 2f       	mov	r25, r24
    5efa:	ab 01       	movw	r20, r22
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_NORMAL, count, command);
    5efc:	83 e0       	ldi	r24, 0x03	; 3
    5efe:	69 2f       	mov	r22, r25
    5f00:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <sha204p_i2c_send>
}
    5f04:	08 95       	ret

00005f06 <sha204p_idle>:
/** \brief This I2C function puts the SHA204 device into idle state.
 * \return status of the operation
 */
uint8_t sha204p_idle(void)
{
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_IDLE, 0, NULL);
    5f06:	82 e0       	ldi	r24, 0x02	; 2
    5f08:	60 e0       	ldi	r22, 0x00	; 0
    5f0a:	40 e0       	ldi	r20, 0x00	; 0
    5f0c:	50 e0       	ldi	r21, 0x00	; 0
    5f0e:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <sha204p_i2c_send>
}
    5f12:	08 95       	ret

00005f14 <sha204p_sleep>:
/** \brief This I2C function puts the SHA204 device into low-power state.
 *  \return status of the operation
 */
uint8_t sha204p_sleep(void)
{
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_SLEEP, 0, NULL);
    5f14:	81 e0       	ldi	r24, 0x01	; 1
    5f16:	60 e0       	ldi	r22, 0x00	; 0
    5f18:	40 e0       	ldi	r20, 0x00	; 0
    5f1a:	50 e0       	ldi	r21, 0x00	; 0
    5f1c:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <sha204p_i2c_send>
}
    5f20:	08 95       	ret

00005f22 <sha204p_reset_io>:
/** \brief This I2C function resets the I/O buffer of the SHA204 device.
 * \return status of the operation
 */
uint8_t sha204p_reset_io(void)
{
	return sha204p_i2c_send(SHA204_I2C_PACKET_FUNCTION_RESET, 0, NULL);
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	60 e0       	ldi	r22, 0x00	; 0
    5f26:	40 e0       	ldi	r20, 0x00	; 0
    5f28:	50 e0       	ldi	r21, 0x00	; 0
    5f2a:	0e 94 1f 2f 	call	0x5e3e	; 0x5e3e <sha204p_i2c_send>
}
    5f2e:	08 95       	ret

00005f30 <sha204p_receive_response>:
 * @param[in] size size of rx buffer
 * @param[out] response pointer to rx buffer
 * @return status of the operation
 */
uint8_t sha204p_receive_response(uint8_t size, uint8_t *response)
{
    5f30:	1f 93       	push	r17
    5f32:	cf 93       	push	r28
    5f34:	df 93       	push	r29
    5f36:	18 2f       	mov	r17, r24
    5f38:	eb 01       	movw	r28, r22
	uint8_t count;

	// Address the device and indicate that bytes are to be read.
	uint8_t i2c_status = sha204p_send_slave_address(I2C_READ);
    5f3a:	81 e0       	ldi	r24, 0x01	; 1
    5f3c:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <sha204p_send_slave_address>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS) {
    5f40:	88 23       	and	r24, r24
    5f42:	19 f0       	breq	.+6      	; 0x5f4a <sha204p_receive_response+0x1a>
		// Translate error so that the Communication layer
		// can distinguish between a real error or the
		// device being busy executing a command.
		if (i2c_status == I2C_FUNCTION_RETCODE_NACK)
    5f44:	88 3f       	cpi	r24, 0xF8	; 248
    5f46:	c9 f4       	brne	.+50     	; 0x5f7a <sha204p_receive_response+0x4a>
    5f48:	13 c0       	rjmp	.+38     	; 0x5f70 <sha204p_receive_response+0x40>

		return i2c_status;
	}

	// Receive count byte.
	i2c_status = i2c_receive_byte(response);
    5f4a:	ce 01       	movw	r24, r28
    5f4c:	0e 94 57 29 	call	0x52ae	; 0x52ae <i2c_receive_byte>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
    5f50:	88 23       	and	r24, r24
    5f52:	81 f4       	brne	.+32     	; 0x5f74 <sha204p_receive_response+0x44>
		return SHA204_COMM_FAIL;

	count = response[SHA204_BUFFER_POS_COUNT];
    5f54:	88 81       	ld	r24, Y
	if ((count < SHA204_RSP_SIZE_MIN) || (count > size))
    5f56:	84 30       	cpi	r24, 0x04	; 4
    5f58:	78 f0       	brcs	.+30     	; 0x5f78 <sha204p_receive_response+0x48>
    5f5a:	18 17       	cp	r17, r24
    5f5c:	68 f0       	brcs	.+26     	; 0x5f78 <sha204p_receive_response+0x48>
		return SHA204_INVALID_SIZE;

	i2c_status = i2c_receive_bytes(count - 1, &response[SHA204_BUFFER_POS_DATA]);
    5f5e:	be 01       	movw	r22, r28
    5f60:	6f 5f       	subi	r22, 0xFF	; 255
    5f62:	7f 4f       	sbci	r23, 0xFF	; 255
    5f64:	81 50       	subi	r24, 0x01	; 1
    5f66:	0e 94 73 29 	call	0x52e6	; 0x52e6 <i2c_receive_bytes>

	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
    5f6a:	88 23       	and	r24, r24
    5f6c:	31 f0       	breq	.+12     	; 0x5f7a <sha204p_receive_response+0x4a>
    5f6e:	02 c0       	rjmp	.+4      	; 0x5f74 <sha204p_receive_response+0x44>
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS) {
		// Translate error so that the Communication layer
		// can distinguish between a real error or the
		// device being busy executing a command.
		if (i2c_status == I2C_FUNCTION_RETCODE_NACK)
			i2c_status = SHA204_RX_NO_RESPONSE;
    5f70:	87 ee       	ldi	r24, 0xE7	; 231
    5f72:	03 c0       	rjmp	.+6      	; 0x5f7a <sha204p_receive_response+0x4a>
	}

	// Receive count byte.
	i2c_status = i2c_receive_byte(response);
	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
    5f74:	80 ef       	ldi	r24, 0xF0	; 240
    5f76:	01 c0       	rjmp	.+2      	; 0x5f7a <sha204p_receive_response+0x4a>

	count = response[SHA204_BUFFER_POS_COUNT];
	if ((count < SHA204_RSP_SIZE_MIN) || (count > size))
		return SHA204_INVALID_SIZE;
    5f78:	84 ee       	ldi	r24, 0xE4	; 228

	if (i2c_status != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
	else
		return SHA204_SUCCESS;
}
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	1f 91       	pop	r17
    5f80:	08 95       	ret

00005f82 <sha204p_resync>:
 * \param[out] response pointer to response buffer
 * \return status of the operation
 * \todo Run MAC test in a loop until a communication error occurs and this routine is executed.
 */
uint8_t sha204p_resync(uint8_t size, uint8_t *response)
{
    5f82:	df 93       	push	r29
    5f84:	cf 93       	push	r28
    5f86:	0f 92       	push	r0
    5f88:	cd b7       	in	r28, 0x3d	; 61
    5f8a:	de b7       	in	r29, 0x3e	; 62
	uint8_t nine_clocks = 0xFF;
    5f8c:	8f ef       	ldi	r24, 0xFF	; 255
    5f8e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t ret_code;

	ret_code = i2c_send_start();
    5f90:	0e 94 04 29 	call	0x5208	; 0x5208 <i2c_send_start>

	// Do not evaluate the return code that most likely indicates error,
	// since nine_clocks is unlikely to be acknowledged.
	(void) i2c_send_bytes(1, &nine_clocks);
    5f94:	81 e0       	ldi	r24, 0x01	; 1
    5f96:	be 01       	movw	r22, r28
    5f98:	6f 5f       	subi	r22, 0xFF	; 255
    5f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f9c:	0e 94 33 29 	call	0x5266	; 0x5266 <i2c_send_bytes>

	// Send another Start. The function sends also one byte,
	// the TWI address of the device, because TWI specification
	// does not allow sending a Stop right after a Start condition.
	ret_code = sha204p_send_slave_address(I2C_READ);
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <sha204p_send_slave_address>

	// Send only a Stop if the above call succeeded.
	// Otherwise the above function has sent it already.
	if (ret_code == I2C_FUNCTION_RETCODE_SUCCESS)
    5fa6:	88 23       	and	r24, r24
    5fa8:	39 f4       	brne	.+14     	; 0x5fb8 <sha204p_resync+0x36>
		ret_code = i2c_send_stop();
    5faa:	0e 94 1e 29 	call	0x523c	; 0x523c <i2c_send_stop>

	// Return error status if we failed to re-sync.
	if (ret_code != I2C_FUNCTION_RETCODE_SUCCESS)
    5fae:	88 23       	and	r24, r24
    5fb0:	19 f4       	brne	.+6      	; 0x5fb8 <sha204p_resync+0x36>
		return SHA204_COMM_FAIL;

	// Try to send a Reset IO command if re-sync succeeded.
	return sha204p_reset_io();
    5fb2:	0e 94 91 2f 	call	0x5f22	; 0x5f22 <sha204p_reset_io>
    5fb6:	01 c0       	rjmp	.+2      	; 0x5fba <sha204p_resync+0x38>
	if (ret_code == I2C_FUNCTION_RETCODE_SUCCESS)
		ret_code = i2c_send_stop();

	// Return error status if we failed to re-sync.
	if (ret_code != I2C_FUNCTION_RETCODE_SUCCESS)
		return SHA204_COMM_FAIL;
    5fb8:	80 ef       	ldi	r24, 0xF0	; 240

	// Try to send a Reset IO command if re-sync succeeded.
	return sha204p_reset_io();
}
    5fba:	0f 90       	pop	r0
    5fbc:	cf 91       	pop	r28
    5fbe:	df 91       	pop	r29
    5fc0:	08 95       	ret

00005fc2 <delay_10us>:
 * This function will not time correctly, if one loop iteration
 * plus the time it takes to enter this function takes more than 10 us.
 * \param[in] delay number of 0.01 milliseconds to delay
 */
void delay_10us(uint8_t delay)
{
    5fc2:	df 93       	push	r29
    5fc4:	cf 93       	push	r28
    5fc6:	0f 92       	push	r0
    5fc8:	cd b7       	in	r28, 0x3d	; 61
    5fca:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t delay_10us;

	for (; delay > 0; delay--) {
		for (delay_10us = TIME_UTILS_LOOP_COUNT; delay_10us > 0; delay_10us--);
    5fcc:	2e e0       	ldi	r18, 0x0E	; 14
 */
void delay_10us(uint8_t delay)
{
	volatile uint8_t delay_10us;

	for (; delay > 0; delay--) {
    5fce:	09 c0       	rjmp	.+18     	; 0x5fe2 <delay_10us+0x20>
		for (delay_10us = TIME_UTILS_LOOP_COUNT; delay_10us > 0; delay_10us--);
    5fd0:	29 83       	std	Y+1, r18	; 0x01
    5fd2:	03 c0       	rjmp	.+6      	; 0x5fda <delay_10us+0x18>
    5fd4:	99 81       	ldd	r25, Y+1	; 0x01
    5fd6:	91 50       	subi	r25, 0x01	; 1
    5fd8:	99 83       	std	Y+1, r25	; 0x01
    5fda:	99 81       	ldd	r25, Y+1	; 0x01
    5fdc:	99 23       	and	r25, r25
    5fde:	d1 f7       	brne	.-12     	; 0x5fd4 <delay_10us+0x12>
 */
void delay_10us(uint8_t delay)
{
	volatile uint8_t delay_10us;

	for (; delay > 0; delay--) {
    5fe0:	81 50       	subi	r24, 0x01	; 1
    5fe2:	88 23       	and	r24, r24
    5fe4:	a9 f7       	brne	.-22     	; 0x5fd0 <delay_10us+0xe>
		for (delay_10us = TIME_UTILS_LOOP_COUNT; delay_10us > 0; delay_10us--);
		TIME_UTILS_US_CALIBRATION;
	}
}
    5fe6:	0f 90       	pop	r0
    5fe8:	cf 91       	pop	r28
    5fea:	df 91       	pop	r29
    5fec:	08 95       	ret

00005fee <delay_ms>:
 *         You can override this function if you like to do
 *         something else in your system while delaying.
 * \param[in] delay number of milliseconds to delay
 */
void delay_ms(uint8_t delay)
{
    5fee:	1f 93       	push	r17
    5ff0:	18 2f       	mov	r17, r24
	uint8_t i;
	for (i = delay; i > 0; i--)
    5ff2:	04 c0       	rjmp	.+8      	; 0x5ffc <delay_ms+0xe>
		delay_10us(TIME_UTILS_MS_CALIBRATION);
    5ff4:	88 e6       	ldi	r24, 0x68	; 104
    5ff6:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <delay_10us>
 * \param[in] delay number of milliseconds to delay
 */
void delay_ms(uint8_t delay)
{
	uint8_t i;
	for (i = delay; i > 0; i--)
    5ffa:	11 50       	subi	r17, 0x01	; 1
    5ffc:	11 23       	and	r17, r17
    5ffe:	d1 f7       	brne	.-12     	; 0x5ff4 <delay_ms+0x6>
		delay_10us(TIME_UTILS_MS_CALIBRATION);
}
    6000:	1f 91       	pop	r17
    6002:	08 95       	ret

00006004 <base64_binlength>:
			if(l%4!=3)
				return -1;
			return (l+1)/4*3-1;
		case 2:
			if(l%4!=2)
				return -1;
    6004:	28 2f       	mov	r18, r24
    6006:	39 2f       	mov	r19, r25
    6008:	f9 01       	movw	r30, r18

#endif

int base64_binlength(char* str, uint8_t strict){
	int l=0;
	uint8_t term=0;
    600a:	20 e0       	ldi	r18, 0x00	; 0
}

#endif

int base64_binlength(char* str, uint8_t strict){
	int l=0;
    600c:	80 e0       	ldi	r24, 0x00	; 0
    600e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t term=0;
	for(;;){
		if(*str=='\0')
    6010:	31 91       	ld	r19, Z+
    6012:	33 23       	and	r19, r19
    6014:	71 f0       	breq	.+28     	; 0x6032 <base64_binlength+0x2e>
			break;
		if(*str=='\n' || *str=='\r'){
    6016:	3a 30       	cpi	r19, 0x0A	; 10
    6018:	d9 f3       	breq	.-10     	; 0x6010 <base64_binlength+0xc>
    601a:	3d 30       	cpi	r19, 0x0D	; 13
    601c:	c9 f3       	breq	.-14     	; 0x6010 <base64_binlength+0xc>
			str++;
			continue;
		}
		if(*str=='='){
    601e:	3d 33       	cpi	r19, 0x3D	; 61
    6020:	21 f4       	brne	.+8      	; 0x602a <base64_binlength+0x26>
			term++;
			str++;
			if(term==2){
    6022:	21 30       	cpi	r18, 0x01	; 1
    6024:	69 f1       	breq	.+90     	; 0x6080 <base64_binlength+0x7c>
    6026:	21 e0       	ldi	r18, 0x01	; 1
    6028:	f3 cf       	rjmp	.-26     	; 0x6010 <base64_binlength+0xc>
				break;
			}
			continue;
		}
		if(term)
    602a:	22 23       	and	r18, r18
    602c:	e1 f5       	brne	.+120    	; 0x60a6 <base64_binlength+0xa2>
			return -1;
		if(ascii2bit6(*str)==-1){
			if(strict)
				return -1;
		} else {
			l++;
    602e:	01 96       	adiw	r24, 0x01	; 1
    6030:	ef cf       	rjmp	.-34     	; 0x6010 <base64_binlength+0xc>
		}
		str++;
	}
	switch(term){
    6032:	21 30       	cpi	r18, 0x01	; 1
    6034:	91 f0       	breq	.+36     	; 0x605a <base64_binlength+0x56>
    6036:	21 30       	cpi	r18, 0x01	; 1
    6038:	b0 f5       	brcc	.+108    	; 0x60a6 <base64_binlength+0xa2>
		case 0:
			if(l%4!=0)
    603a:	9c 01       	movw	r18, r24
    603c:	23 70       	andi	r18, 0x03	; 3
    603e:	30 70       	andi	r19, 0x00	; 0
    6040:	21 15       	cp	r18, r1
    6042:	31 05       	cpc	r19, r1
    6044:	81 f5       	brne	.+96     	; 0x60a6 <base64_binlength+0xa2>
				return -1;
			return l/4*3;
    6046:	95 95       	asr	r25
    6048:	87 95       	ror	r24
    604a:	95 95       	asr	r25
    604c:	87 95       	ror	r24
    604e:	9c 01       	movw	r18, r24
    6050:	22 0f       	add	r18, r18
    6052:	33 1f       	adc	r19, r19
    6054:	28 0f       	add	r18, r24
    6056:	39 1f       	adc	r19, r25
    6058:	28 c0       	rjmp	.+80     	; 0x60aa <base64_binlength+0xa6>
		case 1:
			if(l%4!=3)
    605a:	9c 01       	movw	r18, r24
    605c:	23 70       	andi	r18, 0x03	; 3
    605e:	30 70       	andi	r19, 0x00	; 0
    6060:	23 30       	cpi	r18, 0x03	; 3
    6062:	31 05       	cpc	r19, r1
    6064:	01 f5       	brne	.+64     	; 0x60a6 <base64_binlength+0xa2>
				return -1;
			return (l+1)/4*3-1;
    6066:	01 96       	adiw	r24, 0x01	; 1
    6068:	95 95       	asr	r25
    606a:	87 95       	ror	r24
    606c:	95 95       	asr	r25
    606e:	87 95       	ror	r24
    6070:	9c 01       	movw	r18, r24
    6072:	22 0f       	add	r18, r18
    6074:	33 1f       	adc	r19, r19
    6076:	28 0f       	add	r18, r24
    6078:	39 1f       	adc	r19, r25
    607a:	21 50       	subi	r18, 0x01	; 1
    607c:	30 40       	sbci	r19, 0x00	; 0
    607e:	15 c0       	rjmp	.+42     	; 0x60aa <base64_binlength+0xa6>
		case 2:
			if(l%4!=2)
    6080:	9c 01       	movw	r18, r24
    6082:	23 70       	andi	r18, 0x03	; 3
    6084:	30 70       	andi	r19, 0x00	; 0
    6086:	22 30       	cpi	r18, 0x02	; 2
    6088:	31 05       	cpc	r19, r1
    608a:	69 f4       	brne	.+26     	; 0x60a6 <base64_binlength+0xa2>
				return -1;
			return (l+2)/4*3-2;
    608c:	02 96       	adiw	r24, 0x02	; 2
    608e:	95 95       	asr	r25
    6090:	87 95       	ror	r24
    6092:	95 95       	asr	r25
    6094:	87 95       	ror	r24
    6096:	9c 01       	movw	r18, r24
    6098:	22 0f       	add	r18, r18
    609a:	33 1f       	adc	r19, r19
    609c:	28 0f       	add	r18, r24
    609e:	39 1f       	adc	r19, r25
    60a0:	22 50       	subi	r18, 0x02	; 2
    60a2:	30 40       	sbci	r19, 0x00	; 0
    60a4:	02 c0       	rjmp	.+4      	; 0x60aa <base64_binlength+0xa6>
			if(l%4!=3)
				return -1;
			return (l+1)/4*3-1;
		case 2:
			if(l%4!=2)
				return -1;
    60a6:	2f ef       	ldi	r18, 0xFF	; 255
    60a8:	3f ef       	ldi	r19, 0xFF	; 255
			return (l+2)/4*3-2;
		default:
			return -1;
	}
}
    60aa:	c9 01       	movw	r24, r18
    60ac:	08 95       	ret

000060ae <base64dec>:
  |54321054|32105432|10543210|
  |76543210|76543210|76543210|

*/

int base64dec(void* dest, const char* b64str, uint8_t strict){
    60ae:	ef 92       	push	r14
    60b0:	ff 92       	push	r15
    60b2:	0f 93       	push	r16
    60b4:	1f 93       	push	r17
    60b6:	df 93       	push	r29
    60b8:	cf 93       	push	r28
    60ba:	00 d0       	rcall	.+0      	; 0x60bc <base64dec+0xe>
    60bc:	00 d0       	rcall	.+0      	; 0x60be <base64dec+0x10>
    60be:	cd b7       	in	r28, 0x3d	; 61
    60c0:	de b7       	in	r29, 0x3e	; 62
    60c2:	fc 01       	movw	r30, r24
	}
	if(term==2){
		((uint8_t*)dest)[0] = buffer[0]<<2 | buffer[1]>>4;
		return 0;
	}
	return -1;
    60c4:	86 2f       	mov	r24, r22
    60c6:	97 2f       	mov	r25, r23
    60c8:	7c 01       	movw	r14, r24
*/

int base64dec(void* dest, const char* b64str, uint8_t strict){
	uint8_t buffer[4];
	uint8_t idx=0;
	uint8_t term=0;
    60ca:	10 e0       	ldi	r17, 0x00	; 0

*/

int base64dec(void* dest, const char* b64str, uint8_t strict){
	uint8_t buffer[4];
	uint8_t idx=0;
    60cc:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t term=0;
	for(;;){
		buffer[idx]= ascii2bit6(*b64str);
    60ce:	9e 01       	movw	r18, r28
    60d0:	2f 5f       	subi	r18, 0xFF	; 255
    60d2:	3f 4f       	sbci	r19, 0xFF	; 255
    60d4:	60 2f       	mov	r22, r16
    60d6:	70 e0       	ldi	r23, 0x00	; 0
    60d8:	d7 01       	movw	r26, r14
    60da:	5d 91       	ld	r21, X+
    60dc:	7d 01       	movw	r14, r26
#else

static
uint8_t ascii2bit6(char a){
	int r;
	switch(a>>4){
    60de:	85 2f       	mov	r24, r21
    60e0:	82 95       	swap	r24
    60e2:	8f 70       	andi	r24, 0x0F	; 15
    60e4:	86 30       	cpi	r24, 0x06	; 6
    60e6:	28 f4       	brcc	.+10     	; 0x60f2 <base64dec+0x44>
    60e8:	84 30       	cpi	r24, 0x04	; 4
    60ea:	30 f4       	brcc	.+12     	; 0x60f8 <base64dec+0x4a>
    60ec:	83 30       	cpi	r24, 0x03	; 3
    60ee:	d1 f4       	brne	.+52     	; 0x6124 <base64dec+0x76>
    60f0:	14 c0       	rjmp	.+40     	; 0x611a <base64dec+0x6c>
    60f2:	88 30       	cpi	r24, 0x08	; 8
    60f4:	b8 f4       	brcc	.+46     	; 0x6124 <base64dec+0x76>
    60f6:	08 c0       	rjmp	.+16     	; 0x6108 <base64dec+0x5a>
		case 0x5:
		case 0x4: 
			r=a-'A';
    60f8:	85 2f       	mov	r24, r21
    60fa:	90 e0       	ldi	r25, 0x00	; 0
    60fc:	81 54       	subi	r24, 0x41	; 65
    60fe:	90 40       	sbci	r25, 0x00	; 0
			if(r<0 || r>25){
    6100:	8a 31       	cpi	r24, 0x1A	; 26
    6102:	91 05       	cpc	r25, r1
    6104:	e8 f4       	brcc	.+58     	; 0x6140 <base64dec+0x92>
    6106:	1f c0       	rjmp	.+62     	; 0x6146 <base64dec+0x98>
			} else {
				return r;
			}
		case 0x7:
		case 0x6: 
			r=a-'a';
    6108:	85 2f       	mov	r24, r21
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	81 56       	subi	r24, 0x61	; 97
    610e:	90 40       	sbci	r25, 0x00	; 0
			if(r<0 || r>25){
    6110:	8a 31       	cpi	r24, 0x1A	; 26
    6112:	91 05       	cpc	r25, r1
    6114:	a8 f4       	brcc	.+42     	; 0x6140 <base64dec+0x92>
				return -1;
			} else {
				return r+26;
    6116:	86 5e       	subi	r24, 0xE6	; 230
    6118:	16 c0       	rjmp	.+44     	; 0x6146 <base64dec+0x98>
			}
			break;
		case 0x3:
			if(a>'9')
    611a:	5a 33       	cpi	r21, 0x3A	; 58
    611c:	88 f4       	brcc	.+34     	; 0x6140 <base64dec+0x92>
				return -1;
			return a-'0'+52;
    611e:	85 2f       	mov	r24, r21
    6120:	8c 5f       	subi	r24, 0xFC	; 252
    6122:	11 c0       	rjmp	.+34     	; 0x6146 <base64dec+0x98>
		default:
			break;	
	}
	switch (a){
    6124:	5d 32       	cpi	r21, 0x2D	; 45
    6126:	51 f0       	breq	.+20     	; 0x613c <base64dec+0x8e>
    6128:	5e 32       	cpi	r21, 0x2E	; 46
    612a:	18 f4       	brcc	.+6      	; 0x6132 <base64dec+0x84>
    612c:	5b 32       	cpi	r21, 0x2B	; 43
    612e:	41 f4       	brne	.+16     	; 0x6140 <base64dec+0x92>
    6130:	05 c0       	rjmp	.+10     	; 0x613c <base64dec+0x8e>
    6132:	5f 32       	cpi	r21, 0x2F	; 47
    6134:	39 f0       	breq	.+14     	; 0x6144 <base64dec+0x96>
    6136:	5f 35       	cpi	r21, 0x5F	; 95
    6138:	19 f4       	brne	.+6      	; 0x6140 <base64dec+0x92>
    613a:	04 c0       	rjmp	.+8      	; 0x6144 <base64dec+0x96>
		case '+':
		case '-':
			return 62;
    613c:	8e e3       	ldi	r24, 0x3E	; 62
    613e:	03 c0       	rjmp	.+6      	; 0x6146 <base64dec+0x98>
				return r+26;
			}
			break;
		case 0x3:
			if(a>'9')
				return -1;
    6140:	8f ef       	ldi	r24, 0xFF	; 255
    6142:	01 c0       	rjmp	.+2      	; 0x6146 <base64dec+0x98>
		case '+':
		case '-':
			return 62;
		case '/':
		case '_':
			return 63;
    6144:	8f e3       	ldi	r24, 0x3F	; 63
int base64dec(void* dest, const char* b64str, uint8_t strict){
	uint8_t buffer[4];
	uint8_t idx=0;
	uint8_t term=0;
	for(;;){
		buffer[idx]= ascii2bit6(*b64str);
    6146:	62 0f       	add	r22, r18
    6148:	73 1f       	adc	r23, r19
    614a:	db 01       	movw	r26, r22
    614c:	8c 93       	st	X, r24
		
		if(buffer[idx]==0xFF){
    614e:	8f 3f       	cpi	r24, 0xFF	; 255
    6150:	79 f4       	brne	.+30     	; 0x6170 <base64dec+0xc2>
			if(*b64str=='='){
    6152:	5d 33       	cpi	r21, 0x3D	; 61
    6154:	21 f4       	brne	.+8      	; 0x615e <base64dec+0xb0>
				term++;
    6156:	1f 5f       	subi	r17, 0xFF	; 255
				b64str++;
				if(term==2)
    6158:	12 30       	cpi	r17, 0x02	; 2
    615a:	71 f4       	brne	.+28     	; 0x6178 <base64dec+0xca>
    615c:	2b c0       	rjmp	.+86     	; 0x61b4 <base64dec+0x106>
					goto finalize; /* definitly the end */
			}else{
				if(*b64str == '\0'){
    615e:	55 23       	and	r21, r21
    6160:	49 f1       	breq	.+82     	; 0x61b4 <base64dec+0x106>
					goto finalize; /* definitly the end */
				}else{
					if(*b64str == '\r' || *b64str == '\n' || !(strict)){
    6162:	5d 30       	cpi	r21, 0x0D	; 13
    6164:	49 f0       	breq	.+18     	; 0x6178 <base64dec+0xca>
    6166:	5a 30       	cpi	r21, 0x0A	; 10
    6168:	39 f0       	breq	.+14     	; 0x6178 <base64dec+0xca>
    616a:	44 23       	and	r20, r20
    616c:	29 f0       	breq	.+10     	; 0x6178 <base64dec+0xca>
    616e:	45 c0       	rjmp	.+138    	; 0x61fa <base64dec+0x14c>
						return -1;
					}
				}
			}
		}else{
			if(term)
    6170:	11 23       	and	r17, r17
    6172:	09 f0       	breq	.+2      	; 0x6176 <base64dec+0xc8>
    6174:	42 c0       	rjmp	.+132    	; 0x61fa <base64dec+0x14c>
				return -1; /* this happens if we get a '=' in the stream */
			idx++;
    6176:	0f 5f       	subi	r16, 0xFF	; 255
			b64str++;
		}
		if(idx==4){
    6178:	04 30       	cpi	r16, 0x04	; 4
    617a:	09 f0       	breq	.+2      	; 0x617e <base64dec+0xd0>
    617c:	ab cf       	rjmp	.-170    	; 0x60d4 <base64dec+0x26>
			((uint8_t*)dest)[0] = buffer[0]<<2 | buffer[1]>>4;
    617e:	9a 81       	ldd	r25, Y+2	; 0x02
    6180:	89 81       	ldd	r24, Y+1	; 0x01
    6182:	88 0f       	add	r24, r24
    6184:	88 0f       	add	r24, r24
    6186:	59 2f       	mov	r21, r25
    6188:	52 95       	swap	r21
    618a:	5f 70       	andi	r21, 0x0F	; 15
    618c:	85 2b       	or	r24, r21
    618e:	80 83       	st	Z, r24
			((uint8_t*)dest)[1] = buffer[1]<<4 | buffer[2]>>2;
    6190:	8b 81       	ldd	r24, Y+3	; 0x03
    6192:	92 95       	swap	r25
    6194:	90 7f       	andi	r25, 0xF0	; 240
    6196:	58 2f       	mov	r21, r24
    6198:	56 95       	lsr	r21
    619a:	56 95       	lsr	r21
    619c:	95 2b       	or	r25, r21
    619e:	91 83       	std	Z+1, r25	; 0x01
			((uint8_t*)dest)[2] = buffer[2]<<6 | buffer[3];
    61a0:	82 95       	swap	r24
    61a2:	88 0f       	add	r24, r24
    61a4:	88 0f       	add	r24, r24
    61a6:	80 7c       	andi	r24, 0xC0	; 192
    61a8:	9c 81       	ldd	r25, Y+4	; 0x04
    61aa:	89 2b       	or	r24, r25
    61ac:	82 83       	std	Z+2, r24	; 0x02
			dest = (uint8_t*)dest +3;
    61ae:	33 96       	adiw	r30, 0x03	; 3
			idx=0;
    61b0:	00 e0       	ldi	r16, 0x00	; 0
    61b2:	90 cf       	rjmp	.-224    	; 0x60d4 <base64dec+0x26>
		}
	}
  finalize:	
	/* the final touch */
	if(idx==0)
    61b4:	00 23       	and	r16, r16
    61b6:	f1 f0       	breq	.+60     	; 0x61f4 <base64dec+0x146>
		return 0;
	if(term==1){
    61b8:	11 30       	cpi	r17, 0x01	; 1
    61ba:	91 f4       	brne	.+36     	; 0x61e0 <base64dec+0x132>
		((uint8_t*)dest)[0] = buffer[0]<<2 | buffer[1]>>4;
    61bc:	9a 81       	ldd	r25, Y+2	; 0x02
    61be:	89 81       	ldd	r24, Y+1	; 0x01
    61c0:	88 0f       	add	r24, r24
    61c2:	88 0f       	add	r24, r24
    61c4:	29 2f       	mov	r18, r25
    61c6:	22 95       	swap	r18
    61c8:	2f 70       	andi	r18, 0x0F	; 15
    61ca:	82 2b       	or	r24, r18
    61cc:	80 83       	st	Z, r24
		((uint8_t*)dest)[1] = buffer[1]<<4 | buffer[2]>>2;			
    61ce:	89 2f       	mov	r24, r25
    61d0:	82 95       	swap	r24
    61d2:	80 7f       	andi	r24, 0xF0	; 240
    61d4:	9b 81       	ldd	r25, Y+3	; 0x03
    61d6:	96 95       	lsr	r25
    61d8:	96 95       	lsr	r25
    61da:	89 2b       	or	r24, r25
    61dc:	81 83       	std	Z+1, r24	; 0x01
    61de:	0a c0       	rjmp	.+20     	; 0x61f4 <base64dec+0x146>
		return 0;
	}
	if(term==2){
    61e0:	12 30       	cpi	r17, 0x02	; 2
    61e2:	59 f4       	brne	.+22     	; 0x61fa <base64dec+0x14c>
		((uint8_t*)dest)[0] = buffer[0]<<2 | buffer[1]>>4;
    61e4:	89 81       	ldd	r24, Y+1	; 0x01
    61e6:	88 0f       	add	r24, r24
    61e8:	88 0f       	add	r24, r24
    61ea:	9a 81       	ldd	r25, Y+2	; 0x02
    61ec:	92 95       	swap	r25
    61ee:	9f 70       	andi	r25, 0x0F	; 15
    61f0:	89 2b       	or	r24, r25
    61f2:	80 83       	st	Z, r24
		return 0;
    61f4:	20 e0       	ldi	r18, 0x00	; 0
    61f6:	30 e0       	ldi	r19, 0x00	; 0
    61f8:	02 c0       	rjmp	.+4      	; 0x61fe <base64dec+0x150>
	}
	return -1;
    61fa:	2f ef       	ldi	r18, 0xFF	; 255
    61fc:	3f ef       	ldi	r19, 0xFF	; 255
}
    61fe:	c9 01       	movw	r24, r18
    6200:	0f 90       	pop	r0
    6202:	0f 90       	pop	r0
    6204:	0f 90       	pop	r0
    6206:	0f 90       	pop	r0
    6208:	cf 91       	pop	r28
    620a:	df 91       	pop	r29
    620c:	1f 91       	pop	r17
    620e:	0f 91       	pop	r16
    6210:	ff 90       	pop	r15
    6212:	ef 90       	pop	r14
    6214:	08 95       	ret

00006216 <base64enc>:
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
	return base64_alphabet[a];
}

void base64enc(char* dest,const void* src, uint16_t length){
    6216:	4f 92       	push	r4
    6218:	5f 92       	push	r5
    621a:	6f 92       	push	r6
    621c:	7f 92       	push	r7
    621e:	8f 92       	push	r8
    6220:	9f 92       	push	r9
    6222:	af 92       	push	r10
    6224:	bf 92       	push	r11
    6226:	cf 92       	push	r12
    6228:	df 92       	push	r13
    622a:	ef 92       	push	r14
    622c:	ff 92       	push	r15
    622e:	0f 93       	push	r16
    6230:	1f 93       	push	r17
    6232:	df 93       	push	r29
    6234:	cf 93       	push	r28
    6236:	00 d0       	rcall	.+0      	; 0x6238 <base64enc+0x22>
    6238:	00 d0       	rcall	.+0      	; 0x623a <base64enc+0x24>
    623a:	cd b7       	in	r28, 0x3d	; 61
    623c:	de b7       	in	r29, 0x3e	; 62
    623e:	5c 01       	movw	r10, r24
    6240:	6b 01       	movw	r12, r22
    6242:	7a 01       	movw	r14, r20
	uint16_t i,j;
	uint8_t a[4];
	for(i=0; i<length/3; ++i){
    6244:	ca 01       	movw	r24, r20
    6246:	63 e0       	ldi	r22, 0x03	; 3
    6248:	70 e0       	ldi	r23, 0x00	; 0
    624a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <__udivmodhi4>
    624e:	9b 01       	movw	r18, r22
    6250:	f6 01       	movw	r30, r12
    6252:	a5 01       	movw	r20, r10
    6254:	80 e0       	ldi	r24, 0x00	; 0
    6256:	90 e0       	ldi	r25, 0x00	; 0
		a[0]= (((uint8_t*)src)[i*3+0])>>2;
		a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
		a[2]= (((((uint8_t*)src)[i*3+1])<<2) | ((((uint8_t*)src)[i*3+2])>>6)) & 0x3F;
		a[3]= (((uint8_t*)src)[i*3+2]) & 0x3F;
    6258:	4e 01       	movw	r8, r28
    625a:	08 94       	sec
    625c:	81 1c       	adc	r8, r1
    625e:	91 1c       	adc	r9, r1
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
	return base64_alphabet[a];
}

void base64enc(char* dest,const void* src, uint16_t length){
    6260:	65 e0       	ldi	r22, 0x05	; 5
    6262:	66 2e       	mov	r6, r22
    6264:	71 2c       	mov	r7, r1
    6266:	6c 0e       	add	r6, r28
    6268:	7d 1e       	adc	r7, r29
	uint16_t i,j;
	uint8_t a[4];
	for(i=0; i<length/3; ++i){
    626a:	30 c0       	rjmp	.+96     	; 0x62cc <base64enc+0xb6>
		a[0]= (((uint8_t*)src)[i*3+0])>>2;
    626c:	70 81       	ld	r23, Z
    626e:	67 2f       	mov	r22, r23
    6270:	66 95       	lsr	r22
    6272:	66 95       	lsr	r22
    6274:	69 83       	std	Y+1, r22	; 0x01
		a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
    6276:	61 81       	ldd	r22, Z+1	; 0x01
    6278:	72 95       	swap	r23
    627a:	70 7f       	andi	r23, 0xF0	; 240
    627c:	a6 2f       	mov	r26, r22
    627e:	a2 95       	swap	r26
    6280:	af 70       	andi	r26, 0x0F	; 15
    6282:	7a 2b       	or	r23, r26
    6284:	7f 73       	andi	r23, 0x3F	; 63
    6286:	7a 83       	std	Y+2, r23	; 0x02
		a[2]= (((((uint8_t*)src)[i*3+1])<<2) | ((((uint8_t*)src)[i*3+2])>>6)) & 0x3F;
    6288:	72 81       	ldd	r23, Z+2	; 0x02
    628a:	66 0f       	add	r22, r22
    628c:	66 0f       	add	r22, r22
    628e:	a7 2f       	mov	r26, r23
    6290:	a2 95       	swap	r26
    6292:	a6 95       	lsr	r26
    6294:	a6 95       	lsr	r26
    6296:	a3 70       	andi	r26, 0x03	; 3
    6298:	6a 2b       	or	r22, r26
    629a:	6f 73       	andi	r22, 0x3F	; 63
    629c:	6b 83       	std	Y+3, r22	; 0x03
		a[3]= (((uint8_t*)src)[i*3+2]) & 0x3F;
    629e:	7f 73       	andi	r23, 0x3F	; 63
    62a0:	7c 83       	std	Y+4, r23	; 0x04
    62a2:	24 01       	movw	r4, r8
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
	return base64_alphabet[a];
}

void base64enc(char* dest,const void* src, uint16_t length){
    62a4:	8a 01       	movw	r16, r20
		a[0]= (((uint8_t*)src)[i*3+0])>>2;
		a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
		a[2]= (((((uint8_t*)src)[i*3+1])<<2) | ((((uint8_t*)src)[i*3+2])>>6)) & 0x3F;
		a[3]= (((uint8_t*)src)[i*3+2]) & 0x3F;
		for(j=0; j<4; ++j){
			*dest++=bit6toAscii(a[j]);
    62a6:	d2 01       	movw	r26, r4
    62a8:	6d 91       	ld	r22, X+
    62aa:	2d 01       	movw	r4, r26
	'4', '5', '6', '7', '8', '9', '+', '/' }; 


static 
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
    62ac:	6f 73       	andi	r22, 0x3F	; 63
	return base64_alphabet[a];
    62ae:	70 e0       	ldi	r23, 0x00	; 0
    62b0:	60 50       	subi	r22, 0x00	; 0
    62b2:	7f 4f       	sbci	r23, 0xFF	; 255
		a[0]= (((uint8_t*)src)[i*3+0])>>2;
		a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
		a[2]= (((((uint8_t*)src)[i*3+1])<<2) | ((((uint8_t*)src)[i*3+2])>>6)) & 0x3F;
		a[3]= (((uint8_t*)src)[i*3+2]) & 0x3F;
		for(j=0; j<4; ++j){
			*dest++=bit6toAscii(a[j]);
    62b4:	db 01       	movw	r26, r22
    62b6:	6c 91       	ld	r22, X
    62b8:	d8 01       	movw	r26, r16
    62ba:	6d 93       	st	X+, r22
    62bc:	8d 01       	movw	r16, r26
	for(i=0; i<length/3; ++i){
		a[0]= (((uint8_t*)src)[i*3+0])>>2;
		a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
		a[2]= (((((uint8_t*)src)[i*3+1])<<2) | ((((uint8_t*)src)[i*3+2])>>6)) & 0x3F;
		a[3]= (((uint8_t*)src)[i*3+2]) & 0x3F;
		for(j=0; j<4; ++j){
    62be:	46 14       	cp	r4, r6
    62c0:	57 04       	cpc	r5, r7
    62c2:	89 f7       	brne	.-30     	; 0x62a6 <base64enc+0x90>
    62c4:	4c 5f       	subi	r20, 0xFC	; 252
    62c6:	5f 4f       	sbci	r21, 0xFF	; 255
}

void base64enc(char* dest,const void* src, uint16_t length){
	uint16_t i,j;
	uint8_t a[4];
	for(i=0; i<length/3; ++i){
    62c8:	01 96       	adiw	r24, 0x01	; 1
    62ca:	33 96       	adiw	r30, 0x03	; 3
    62cc:	82 17       	cp	r24, r18
    62ce:	93 07       	cpc	r25, r19
    62d0:	68 f2       	brcs	.-102    	; 0x626c <base64enc+0x56>
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
	return base64_alphabet[a];
}

void base64enc(char* dest,const void* src, uint16_t length){
    62d2:	f9 01       	movw	r30, r18
    62d4:	ee 0f       	add	r30, r30
    62d6:	ff 1f       	adc	r31, r31
    62d8:	ee 0f       	add	r30, r30
    62da:	ff 1f       	adc	r31, r31
	uint16_t i,j;
	uint8_t a[4];
	for(i=0; i<length/3; ++i){
    62dc:	ea 0d       	add	r30, r10
    62de:	fb 1d       	adc	r31, r11
		for(j=0; j<4; ++j){
			*dest++=bit6toAscii(a[j]);
		}
	}
	/* now we do the rest */
	switch(length%3){
    62e0:	c7 01       	movw	r24, r14
    62e2:	63 e0       	ldi	r22, 0x03	; 3
    62e4:	70 e0       	ldi	r23, 0x00	; 0
    62e6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <__udivmodhi4>
    62ea:	81 30       	cpi	r24, 0x01	; 1
    62ec:	91 05       	cpc	r25, r1
    62ee:	29 f0       	breq	.+10     	; 0x62fa <base64enc+0xe4>
    62f0:	82 30       	cpi	r24, 0x02	; 2
    62f2:	91 05       	cpc	r25, r1
    62f4:	09 f0       	breq	.+2      	; 0x62f8 <base64enc+0xe2>
    62f6:	55 c0       	rjmp	.+170    	; 0x63a2 <base64enc+0x18c>
    62f8:	22 c0       	rjmp	.+68     	; 0x633e <base64enc+0x128>
		case 0: 
			break;
		case 1:
			a[0]=(((uint8_t*)src)[i*3+0])>>2;
    62fa:	d9 01       	movw	r26, r18
    62fc:	aa 0f       	add	r26, r26
    62fe:	bb 1f       	adc	r27, r27
    6300:	a2 0f       	add	r26, r18
    6302:	b3 1f       	adc	r27, r19
    6304:	ac 0d       	add	r26, r12
    6306:	bd 1d       	adc	r27, r13
    6308:	8c 91       	ld	r24, X
	'4', '5', '6', '7', '8', '9', '+', '/' }; 


static 
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
    630a:	a8 2f       	mov	r26, r24
    630c:	a6 95       	lsr	r26
    630e:	a6 95       	lsr	r26
	return base64_alphabet[a];
    6310:	b0 e0       	ldi	r27, 0x00	; 0
    6312:	a0 50       	subi	r26, 0x00	; 0
    6314:	bf 4f       	sbci	r27, 0xFF	; 255
		case 0: 
			break;
		case 1:
			a[0]=(((uint8_t*)src)[i*3+0])>>2;
			a[1]=((((uint8_t*)src)[i*3+0])<<4)&0x3F;
			*dest++ = bit6toAscii(a[0]);
    6316:	9c 91       	ld	r25, X
    6318:	df 01       	movw	r26, r30
    631a:	9d 93       	st	X+, r25
    631c:	9d 01       	movw	r18, r26
	switch(length%3){
		case 0: 
			break;
		case 1:
			a[0]=(((uint8_t*)src)[i*3+0])>>2;
			a[1]=((((uint8_t*)src)[i*3+0])<<4)&0x3F;
    631e:	82 95       	swap	r24
	'4', '5', '6', '7', '8', '9', '+', '/' }; 


static 
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
    6320:	80 73       	andi	r24, 0x30	; 48
	return base64_alphabet[a];
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	80 50       	subi	r24, 0x00	; 0
    6326:	9f 4f       	sbci	r25, 0xFF	; 255
			break;
		case 1:
			a[0]=(((uint8_t*)src)[i*3+0])>>2;
			a[1]=((((uint8_t*)src)[i*3+0])<<4)&0x3F;
			*dest++ = bit6toAscii(a[0]);
			*dest++ = bit6toAscii(a[1]);
    6328:	dc 01       	movw	r26, r24
    632a:	8c 91       	ld	r24, X
    632c:	81 83       	std	Z+1, r24	; 0x01
    632e:	f9 01       	movw	r30, r18
    6330:	31 96       	adiw	r30, 0x01	; 1
			*dest++ = '=';
    6332:	8d e3       	ldi	r24, 0x3D	; 61
    6334:	d9 01       	movw	r26, r18
    6336:	11 96       	adiw	r26, 0x01	; 1
    6338:	8c 93       	st	X, r24
    633a:	11 97       	sbiw	r26, 0x01	; 1
    633c:	30 c0       	rjmp	.+96     	; 0x639e <base64enc+0x188>
			*dest++ = '=';
			break;
		case 2:		
			a[0]= (((uint8_t*)src)[i*3+0])>>2;
    633e:	d9 01       	movw	r26, r18
    6340:	aa 0f       	add	r26, r26
    6342:	bb 1f       	adc	r27, r27
    6344:	a2 0f       	add	r26, r18
    6346:	b3 1f       	adc	r27, r19
    6348:	ac 0d       	add	r26, r12
    634a:	bd 1d       	adc	r27, r13
    634c:	2c 91       	ld	r18, X
			a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
    634e:	11 96       	adiw	r26, 0x01	; 1
    6350:	8c 91       	ld	r24, X
	'4', '5', '6', '7', '8', '9', '+', '/' }; 


static 
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
    6352:	a2 2f       	mov	r26, r18
    6354:	a6 95       	lsr	r26
    6356:	a6 95       	lsr	r26
	return base64_alphabet[a];
    6358:	b0 e0       	ldi	r27, 0x00	; 0
    635a:	a0 50       	subi	r26, 0x00	; 0
    635c:	bf 4f       	sbci	r27, 0xFF	; 255
			break;
		case 2:		
			a[0]= (((uint8_t*)src)[i*3+0])>>2;
			a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
			a[2]= ((((uint8_t*)src)[i*3+1])<<2) & 0x3F;
			*dest++ = bit6toAscii(a[0]);
    635e:	9c 91       	ld	r25, X
    6360:	df 01       	movw	r26, r30
    6362:	9d 93       	st	X+, r25
    6364:	ad 01       	movw	r20, r26
			*dest++ = '=';
			*dest++ = '=';
			break;
		case 2:		
			a[0]= (((uint8_t*)src)[i*3+0])>>2;
			a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
    6366:	98 2f       	mov	r25, r24
    6368:	92 95       	swap	r25
    636a:	9f 70       	andi	r25, 0x0F	; 15
    636c:	22 95       	swap	r18
    636e:	20 7f       	andi	r18, 0xF0	; 240
    6370:	29 2b       	or	r18, r25
	'4', '5', '6', '7', '8', '9', '+', '/' }; 


static 
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
    6372:	2f 73       	andi	r18, 0x3F	; 63
	return base64_alphabet[a];
    6374:	30 e0       	ldi	r19, 0x00	; 0
    6376:	20 50       	subi	r18, 0x00	; 0
    6378:	3f 4f       	sbci	r19, 0xFF	; 255
		case 2:		
			a[0]= (((uint8_t*)src)[i*3+0])>>2;
			a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
			a[2]= ((((uint8_t*)src)[i*3+1])<<2) & 0x3F;
			*dest++ = bit6toAscii(a[0]);
			*dest++ = bit6toAscii(a[1]);
    637a:	d9 01       	movw	r26, r18
    637c:	9c 91       	ld	r25, X
    637e:	91 83       	std	Z+1, r25	; 0x01
    6380:	fa 01       	movw	r30, r20
    6382:	31 96       	adiw	r30, 0x01	; 1
			*dest++ = '=';
			break;
		case 2:		
			a[0]= (((uint8_t*)src)[i*3+0])>>2;
			a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
			a[2]= ((((uint8_t*)src)[i*3+1])<<2) & 0x3F;
    6384:	88 0f       	add	r24, r24
    6386:	88 0f       	add	r24, r24
	'4', '5', '6', '7', '8', '9', '+', '/' }; 


static 
char bit6toAscii(uint8_t a){
	a &= (uint8_t)0x3F;
    6388:	8c 73       	andi	r24, 0x3C	; 60
	return base64_alphabet[a];
    638a:	90 e0       	ldi	r25, 0x00	; 0
    638c:	80 50       	subi	r24, 0x00	; 0
    638e:	9f 4f       	sbci	r25, 0xFF	; 255
			a[0]= (((uint8_t*)src)[i*3+0])>>2;
			a[1]= (((((uint8_t*)src)[i*3+0])<<4) | ((((uint8_t*)src)[i*3+1])>>4)) & 0x3F;
			a[2]= ((((uint8_t*)src)[i*3+1])<<2) & 0x3F;
			*dest++ = bit6toAscii(a[0]);
			*dest++ = bit6toAscii(a[1]);
			*dest++ = bit6toAscii(a[2]);
    6390:	dc 01       	movw	r26, r24
    6392:	8c 91       	ld	r24, X
    6394:	da 01       	movw	r26, r20
    6396:	11 96       	adiw	r26, 0x01	; 1
    6398:	8c 93       	st	X, r24
    639a:	11 97       	sbiw	r26, 0x01	; 1
			*dest++ = '=';
    639c:	8d e3       	ldi	r24, 0x3D	; 61
    639e:	81 83       	std	Z+1, r24	; 0x01
    63a0:	32 96       	adiw	r30, 0x02	; 2
			break;
		default: /* this will not happen! */
			break;	
	}
/*  finalize: */
  	*dest='\0';
    63a2:	10 82       	st	Z, r1
}
    63a4:	0f 90       	pop	r0
    63a6:	0f 90       	pop	r0
    63a8:	0f 90       	pop	r0
    63aa:	0f 90       	pop	r0
    63ac:	cf 91       	pop	r28
    63ae:	df 91       	pop	r29
    63b0:	1f 91       	pop	r17
    63b2:	0f 91       	pop	r16
    63b4:	ff 90       	pop	r15
    63b6:	ef 90       	pop	r14
    63b8:	df 90       	pop	r13
    63ba:	cf 90       	pop	r12
    63bc:	bf 90       	pop	r11
    63be:	af 90       	pop	r10
    63c0:	9f 90       	pop	r9
    63c2:	8f 90       	pop	r8
    63c4:	7f 90       	pop	r7
    63c6:	6f 90       	pop	r6
    63c8:	5f 90       	pop	r5
    63ca:	4f 90       	pop	r4
    63cc:	08 95       	ret

000063ce <__udivmodhi4>:
    63ce:	aa 1b       	sub	r26, r26
    63d0:	bb 1b       	sub	r27, r27
    63d2:	51 e1       	ldi	r21, 0x11	; 17
    63d4:	07 c0       	rjmp	.+14     	; 0x63e4 <__udivmodhi4_ep>

000063d6 <__udivmodhi4_loop>:
    63d6:	aa 1f       	adc	r26, r26
    63d8:	bb 1f       	adc	r27, r27
    63da:	a6 17       	cp	r26, r22
    63dc:	b7 07       	cpc	r27, r23
    63de:	10 f0       	brcs	.+4      	; 0x63e4 <__udivmodhi4_ep>
    63e0:	a6 1b       	sub	r26, r22
    63e2:	b7 0b       	sbc	r27, r23

000063e4 <__udivmodhi4_ep>:
    63e4:	88 1f       	adc	r24, r24
    63e6:	99 1f       	adc	r25, r25
    63e8:	5a 95       	dec	r21
    63ea:	a9 f7       	brne	.-22     	; 0x63d6 <__udivmodhi4_loop>
    63ec:	80 95       	com	r24
    63ee:	90 95       	com	r25
    63f0:	bc 01       	movw	r22, r24
    63f2:	cd 01       	movw	r24, r26
    63f4:	08 95       	ret

000063f6 <__divmodhi4>:
    63f6:	97 fb       	bst	r25, 7
    63f8:	09 2e       	mov	r0, r25
    63fa:	07 26       	eor	r0, r23
    63fc:	0a d0       	rcall	.+20     	; 0x6412 <__divmodhi4_neg1>
    63fe:	77 fd       	sbrc	r23, 7
    6400:	04 d0       	rcall	.+8      	; 0x640a <__divmodhi4_neg2>
    6402:	e5 df       	rcall	.-54     	; 0x63ce <__udivmodhi4>
    6404:	06 d0       	rcall	.+12     	; 0x6412 <__divmodhi4_neg1>
    6406:	00 20       	and	r0, r0
    6408:	1a f4       	brpl	.+6      	; 0x6410 <__divmodhi4_exit>

0000640a <__divmodhi4_neg2>:
    640a:	70 95       	com	r23
    640c:	61 95       	neg	r22
    640e:	7f 4f       	sbci	r23, 0xFF	; 255

00006410 <__divmodhi4_exit>:
    6410:	08 95       	ret

00006412 <__divmodhi4_neg1>:
    6412:	f6 f7       	brtc	.-4      	; 0x6410 <__divmodhi4_exit>
    6414:	90 95       	com	r25
    6416:	81 95       	neg	r24
    6418:	9f 4f       	sbci	r25, 0xFF	; 255
    641a:	08 95       	ret

0000641c <calloc>:
    641c:	ef 92       	push	r14
    641e:	ff 92       	push	r15
    6420:	0f 93       	push	r16
    6422:	1f 93       	push	r17
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	68 9f       	mul	r22, r24
    642a:	80 01       	movw	r16, r0
    642c:	69 9f       	mul	r22, r25
    642e:	10 0d       	add	r17, r0
    6430:	78 9f       	mul	r23, r24
    6432:	10 0d       	add	r17, r0
    6434:	11 24       	eor	r1, r1
    6436:	c8 01       	movw	r24, r16
    6438:	0e 94 32 32 	call	0x6464	; 0x6464 <malloc>
    643c:	e8 2e       	mov	r14, r24
    643e:	e7 01       	movw	r28, r14
    6440:	7e 01       	movw	r14, r28
    6442:	f9 2e       	mov	r15, r25
    6444:	e7 01       	movw	r28, r14
    6446:	20 97       	sbiw	r28, 0x00	; 0
    6448:	31 f0       	breq	.+12     	; 0x6456 <calloc+0x3a>
    644a:	8e 2d       	mov	r24, r14
    644c:	60 e0       	ldi	r22, 0x00	; 0
    644e:	70 e0       	ldi	r23, 0x00	; 0
    6450:	a8 01       	movw	r20, r16
    6452:	0e 94 89 33 	call	0x6712	; 0x6712 <memset>
    6456:	7e 01       	movw	r14, r28
    6458:	ce 01       	movw	r24, r28
    645a:	cd b7       	in	r28, 0x3d	; 61
    645c:	de b7       	in	r29, 0x3e	; 62
    645e:	e6 e0       	ldi	r30, 0x06	; 6
    6460:	0c 94 a3 33 	jmp	0x6746	; 0x6746 <__epilogue_restores__+0x18>

00006464 <malloc>:
    6464:	cf 93       	push	r28
    6466:	df 93       	push	r29
    6468:	82 30       	cpi	r24, 0x02	; 2
    646a:	91 05       	cpc	r25, r1
    646c:	10 f4       	brcc	.+4      	; 0x6472 <malloc+0xe>
    646e:	82 e0       	ldi	r24, 0x02	; 2
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	e0 91 95 04 	lds	r30, 0x0495
    6476:	f0 91 96 04 	lds	r31, 0x0496
    647a:	40 e0       	ldi	r20, 0x00	; 0
    647c:	50 e0       	ldi	r21, 0x00	; 0
    647e:	20 e0       	ldi	r18, 0x00	; 0
    6480:	30 e0       	ldi	r19, 0x00	; 0
    6482:	26 c0       	rjmp	.+76     	; 0x64d0 <malloc+0x6c>
    6484:	60 81       	ld	r22, Z
    6486:	71 81       	ldd	r23, Z+1	; 0x01
    6488:	68 17       	cp	r22, r24
    648a:	79 07       	cpc	r23, r25
    648c:	e0 f0       	brcs	.+56     	; 0x64c6 <malloc+0x62>
    648e:	68 17       	cp	r22, r24
    6490:	79 07       	cpc	r23, r25
    6492:	81 f4       	brne	.+32     	; 0x64b4 <malloc+0x50>
    6494:	82 81       	ldd	r24, Z+2	; 0x02
    6496:	93 81       	ldd	r25, Z+3	; 0x03
    6498:	21 15       	cp	r18, r1
    649a:	31 05       	cpc	r19, r1
    649c:	31 f0       	breq	.+12     	; 0x64aa <malloc+0x46>
    649e:	d9 01       	movw	r26, r18
    64a0:	13 96       	adiw	r26, 0x03	; 3
    64a2:	9c 93       	st	X, r25
    64a4:	8e 93       	st	-X, r24
    64a6:	12 97       	sbiw	r26, 0x02	; 2
    64a8:	2b c0       	rjmp	.+86     	; 0x6500 <malloc+0x9c>
    64aa:	90 93 96 04 	sts	0x0496, r25
    64ae:	80 93 95 04 	sts	0x0495, r24
    64b2:	26 c0       	rjmp	.+76     	; 0x6500 <malloc+0x9c>
    64b4:	41 15       	cp	r20, r1
    64b6:	51 05       	cpc	r21, r1
    64b8:	19 f0       	breq	.+6      	; 0x64c0 <malloc+0x5c>
    64ba:	64 17       	cp	r22, r20
    64bc:	75 07       	cpc	r23, r21
    64be:	18 f4       	brcc	.+6      	; 0x64c6 <malloc+0x62>
    64c0:	ab 01       	movw	r20, r22
    64c2:	e9 01       	movw	r28, r18
    64c4:	df 01       	movw	r26, r30
    64c6:	9f 01       	movw	r18, r30
    64c8:	72 81       	ldd	r23, Z+2	; 0x02
    64ca:	63 81       	ldd	r22, Z+3	; 0x03
    64cc:	e7 2f       	mov	r30, r23
    64ce:	f6 2f       	mov	r31, r22
    64d0:	30 97       	sbiw	r30, 0x00	; 0
    64d2:	c1 f6       	brne	.-80     	; 0x6484 <malloc+0x20>
    64d4:	41 15       	cp	r20, r1
    64d6:	51 05       	cpc	r21, r1
    64d8:	01 f1       	breq	.+64     	; 0x651a <malloc+0xb6>
    64da:	48 1b       	sub	r20, r24
    64dc:	59 0b       	sbc	r21, r25
    64de:	44 30       	cpi	r20, 0x04	; 4
    64e0:	51 05       	cpc	r21, r1
    64e2:	80 f4       	brcc	.+32     	; 0x6504 <malloc+0xa0>
    64e4:	12 96       	adiw	r26, 0x02	; 2
    64e6:	8d 91       	ld	r24, X+
    64e8:	9c 91       	ld	r25, X
    64ea:	13 97       	sbiw	r26, 0x03	; 3
    64ec:	20 97       	sbiw	r28, 0x00	; 0
    64ee:	19 f0       	breq	.+6      	; 0x64f6 <malloc+0x92>
    64f0:	9b 83       	std	Y+3, r25	; 0x03
    64f2:	8a 83       	std	Y+2, r24	; 0x02
    64f4:	04 c0       	rjmp	.+8      	; 0x64fe <malloc+0x9a>
    64f6:	90 93 96 04 	sts	0x0496, r25
    64fa:	80 93 95 04 	sts	0x0495, r24
    64fe:	fd 01       	movw	r30, r26
    6500:	32 96       	adiw	r30, 0x02	; 2
    6502:	46 c0       	rjmp	.+140    	; 0x6590 <malloc+0x12c>
    6504:	fd 01       	movw	r30, r26
    6506:	e4 0f       	add	r30, r20
    6508:	f5 1f       	adc	r31, r21
    650a:	81 93       	st	Z+, r24
    650c:	91 93       	st	Z+, r25
    650e:	42 50       	subi	r20, 0x02	; 2
    6510:	50 40       	sbci	r21, 0x00	; 0
    6512:	11 96       	adiw	r26, 0x01	; 1
    6514:	5c 93       	st	X, r21
    6516:	4e 93       	st	-X, r20
    6518:	3b c0       	rjmp	.+118    	; 0x6590 <malloc+0x12c>
    651a:	20 91 93 04 	lds	r18, 0x0493
    651e:	30 91 94 04 	lds	r19, 0x0494
    6522:	21 15       	cp	r18, r1
    6524:	31 05       	cpc	r19, r1
    6526:	41 f4       	brne	.+16     	; 0x6538 <malloc+0xd4>
    6528:	20 91 4a 01 	lds	r18, 0x014A
    652c:	30 91 4b 01 	lds	r19, 0x014B
    6530:	30 93 94 04 	sts	0x0494, r19
    6534:	20 93 93 04 	sts	0x0493, r18
    6538:	20 91 4c 01 	lds	r18, 0x014C
    653c:	30 91 4d 01 	lds	r19, 0x014D
    6540:	21 15       	cp	r18, r1
    6542:	31 05       	cpc	r19, r1
    6544:	41 f4       	brne	.+16     	; 0x6556 <malloc+0xf2>
    6546:	2d b7       	in	r18, 0x3d	; 61
    6548:	3e b7       	in	r19, 0x3e	; 62
    654a:	40 91 48 01 	lds	r20, 0x0148
    654e:	50 91 49 01 	lds	r21, 0x0149
    6552:	24 1b       	sub	r18, r20
    6554:	35 0b       	sbc	r19, r21
    6556:	e0 91 93 04 	lds	r30, 0x0493
    655a:	f0 91 94 04 	lds	r31, 0x0494
    655e:	e2 17       	cp	r30, r18
    6560:	f3 07       	cpc	r31, r19
    6562:	a0 f4       	brcc	.+40     	; 0x658c <malloc+0x128>
    6564:	2e 1b       	sub	r18, r30
    6566:	3f 0b       	sbc	r19, r31
    6568:	28 17       	cp	r18, r24
    656a:	39 07       	cpc	r19, r25
    656c:	78 f0       	brcs	.+30     	; 0x658c <malloc+0x128>
    656e:	ac 01       	movw	r20, r24
    6570:	4e 5f       	subi	r20, 0xFE	; 254
    6572:	5f 4f       	sbci	r21, 0xFF	; 255
    6574:	24 17       	cp	r18, r20
    6576:	35 07       	cpc	r19, r21
    6578:	48 f0       	brcs	.+18     	; 0x658c <malloc+0x128>
    657a:	4e 0f       	add	r20, r30
    657c:	5f 1f       	adc	r21, r31
    657e:	50 93 94 04 	sts	0x0494, r21
    6582:	40 93 93 04 	sts	0x0493, r20
    6586:	81 93       	st	Z+, r24
    6588:	91 93       	st	Z+, r25
    658a:	02 c0       	rjmp	.+4      	; 0x6590 <malloc+0x12c>
    658c:	e0 e0       	ldi	r30, 0x00	; 0
    658e:	f0 e0       	ldi	r31, 0x00	; 0
    6590:	cf 01       	movw	r24, r30
    6592:	df 91       	pop	r29
    6594:	cf 91       	pop	r28
    6596:	08 95       	ret

00006598 <free>:
    6598:	cf 93       	push	r28
    659a:	df 93       	push	r29
    659c:	00 97       	sbiw	r24, 0x00	; 0
    659e:	09 f4       	brne	.+2      	; 0x65a2 <free+0xa>
    65a0:	91 c0       	rjmp	.+290    	; 0x66c4 <free+0x12c>
    65a2:	fc 01       	movw	r30, r24
    65a4:	32 97       	sbiw	r30, 0x02	; 2
    65a6:	13 82       	std	Z+3, r1	; 0x03
    65a8:	12 82       	std	Z+2, r1	; 0x02
    65aa:	60 91 95 04 	lds	r22, 0x0495
    65ae:	70 91 96 04 	lds	r23, 0x0496
    65b2:	61 15       	cp	r22, r1
    65b4:	71 05       	cpc	r23, r1
    65b6:	81 f4       	brne	.+32     	; 0x65d8 <free+0x40>
    65b8:	20 81       	ld	r18, Z
    65ba:	31 81       	ldd	r19, Z+1	; 0x01
    65bc:	28 0f       	add	r18, r24
    65be:	39 1f       	adc	r19, r25
    65c0:	80 91 93 04 	lds	r24, 0x0493
    65c4:	90 91 94 04 	lds	r25, 0x0494
    65c8:	82 17       	cp	r24, r18
    65ca:	93 07       	cpc	r25, r19
    65cc:	99 f5       	brne	.+102    	; 0x6634 <free+0x9c>
    65ce:	f0 93 94 04 	sts	0x0494, r31
    65d2:	e0 93 93 04 	sts	0x0493, r30
    65d6:	76 c0       	rjmp	.+236    	; 0x66c4 <free+0x12c>
    65d8:	db 01       	movw	r26, r22
    65da:	80 e0       	ldi	r24, 0x00	; 0
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	02 c0       	rjmp	.+4      	; 0x65e4 <free+0x4c>
    65e0:	cd 01       	movw	r24, r26
    65e2:	d9 01       	movw	r26, r18
    65e4:	ae 17       	cp	r26, r30
    65e6:	bf 07       	cpc	r27, r31
    65e8:	48 f4       	brcc	.+18     	; 0x65fc <free+0x64>
    65ea:	12 96       	adiw	r26, 0x02	; 2
    65ec:	2d 91       	ld	r18, X+
    65ee:	3c 91       	ld	r19, X
    65f0:	13 97       	sbiw	r26, 0x03	; 3
    65f2:	21 15       	cp	r18, r1
    65f4:	31 05       	cpc	r19, r1
    65f6:	a1 f7       	brne	.-24     	; 0x65e0 <free+0x48>
    65f8:	cd 01       	movw	r24, r26
    65fa:	21 c0       	rjmp	.+66     	; 0x663e <free+0xa6>
    65fc:	b3 83       	std	Z+3, r27	; 0x03
    65fe:	a2 83       	std	Z+2, r26	; 0x02
    6600:	ef 01       	movw	r28, r30
    6602:	49 91       	ld	r20, Y+
    6604:	59 91       	ld	r21, Y+
    6606:	9e 01       	movw	r18, r28
    6608:	24 0f       	add	r18, r20
    660a:	35 1f       	adc	r19, r21
    660c:	a2 17       	cp	r26, r18
    660e:	b3 07       	cpc	r27, r19
    6610:	79 f4       	brne	.+30     	; 0x6630 <free+0x98>
    6612:	2d 91       	ld	r18, X+
    6614:	3c 91       	ld	r19, X
    6616:	11 97       	sbiw	r26, 0x01	; 1
    6618:	24 0f       	add	r18, r20
    661a:	35 1f       	adc	r19, r21
    661c:	2e 5f       	subi	r18, 0xFE	; 254
    661e:	3f 4f       	sbci	r19, 0xFF	; 255
    6620:	31 83       	std	Z+1, r19	; 0x01
    6622:	20 83       	st	Z, r18
    6624:	12 96       	adiw	r26, 0x02	; 2
    6626:	2d 91       	ld	r18, X+
    6628:	3c 91       	ld	r19, X
    662a:	13 97       	sbiw	r26, 0x03	; 3
    662c:	33 83       	std	Z+3, r19	; 0x03
    662e:	22 83       	std	Z+2, r18	; 0x02
    6630:	00 97       	sbiw	r24, 0x00	; 0
    6632:	29 f4       	brne	.+10     	; 0x663e <free+0xa6>
    6634:	f0 93 96 04 	sts	0x0496, r31
    6638:	e0 93 95 04 	sts	0x0495, r30
    663c:	43 c0       	rjmp	.+134    	; 0x66c4 <free+0x12c>
    663e:	dc 01       	movw	r26, r24
    6640:	13 96       	adiw	r26, 0x03	; 3
    6642:	fc 93       	st	X, r31
    6644:	ee 93       	st	-X, r30
    6646:	12 97       	sbiw	r26, 0x02	; 2
    6648:	4d 91       	ld	r20, X+
    664a:	5d 91       	ld	r21, X+
    664c:	a4 0f       	add	r26, r20
    664e:	b5 1f       	adc	r27, r21
    6650:	ea 17       	cp	r30, r26
    6652:	fb 07       	cpc	r31, r27
    6654:	69 f4       	brne	.+26     	; 0x6670 <free+0xd8>
    6656:	20 81       	ld	r18, Z
    6658:	31 81       	ldd	r19, Z+1	; 0x01
    665a:	24 0f       	add	r18, r20
    665c:	35 1f       	adc	r19, r21
    665e:	2e 5f       	subi	r18, 0xFE	; 254
    6660:	3f 4f       	sbci	r19, 0xFF	; 255
    6662:	ec 01       	movw	r28, r24
    6664:	39 83       	std	Y+1, r19	; 0x01
    6666:	28 83       	st	Y, r18
    6668:	22 81       	ldd	r18, Z+2	; 0x02
    666a:	33 81       	ldd	r19, Z+3	; 0x03
    666c:	3b 83       	std	Y+3, r19	; 0x03
    666e:	2a 83       	std	Y+2, r18	; 0x02
    6670:	e0 e0       	ldi	r30, 0x00	; 0
    6672:	f0 e0       	ldi	r31, 0x00	; 0
    6674:	02 c0       	rjmp	.+4      	; 0x667a <free+0xe2>
    6676:	fb 01       	movw	r30, r22
    6678:	bc 01       	movw	r22, r24
    667a:	db 01       	movw	r26, r22
    667c:	12 96       	adiw	r26, 0x02	; 2
    667e:	8d 91       	ld	r24, X+
    6680:	9c 91       	ld	r25, X
    6682:	13 97       	sbiw	r26, 0x03	; 3
    6684:	00 97       	sbiw	r24, 0x00	; 0
    6686:	b9 f7       	brne	.-18     	; 0x6676 <free+0xde>
    6688:	9b 01       	movw	r18, r22
    668a:	2e 5f       	subi	r18, 0xFE	; 254
    668c:	3f 4f       	sbci	r19, 0xFF	; 255
    668e:	8d 91       	ld	r24, X+
    6690:	9c 91       	ld	r25, X
    6692:	11 97       	sbiw	r26, 0x01	; 1
    6694:	82 0f       	add	r24, r18
    6696:	93 1f       	adc	r25, r19
    6698:	40 91 93 04 	lds	r20, 0x0493
    669c:	50 91 94 04 	lds	r21, 0x0494
    66a0:	48 17       	cp	r20, r24
    66a2:	59 07       	cpc	r21, r25
    66a4:	79 f4       	brne	.+30     	; 0x66c4 <free+0x12c>
    66a6:	30 97       	sbiw	r30, 0x00	; 0
    66a8:	29 f4       	brne	.+10     	; 0x66b4 <free+0x11c>
    66aa:	10 92 96 04 	sts	0x0496, r1
    66ae:	10 92 95 04 	sts	0x0495, r1
    66b2:	02 c0       	rjmp	.+4      	; 0x66b8 <free+0x120>
    66b4:	13 82       	std	Z+3, r1	; 0x03
    66b6:	12 82       	std	Z+2, r1	; 0x02
    66b8:	22 50       	subi	r18, 0x02	; 2
    66ba:	30 40       	sbci	r19, 0x00	; 0
    66bc:	30 93 94 04 	sts	0x0494, r19
    66c0:	20 93 93 04 	sts	0x0493, r18
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	08 95       	ret

000066ca <memcpy_P>:
    66ca:	fb 01       	movw	r30, r22
    66cc:	dc 01       	movw	r26, r24
    66ce:	02 c0       	rjmp	.+4      	; 0x66d4 <memcpy_P+0xa>
    66d0:	05 90       	lpm	r0, Z+
    66d2:	0d 92       	st	X+, r0
    66d4:	41 50       	subi	r20, 0x01	; 1
    66d6:	50 40       	sbci	r21, 0x00	; 0
    66d8:	d8 f7       	brcc	.-10     	; 0x66d0 <memcpy_P+0x6>
    66da:	08 95       	ret

000066dc <memcpy>:
    66dc:	fb 01       	movw	r30, r22
    66de:	dc 01       	movw	r26, r24
    66e0:	02 c0       	rjmp	.+4      	; 0x66e6 <memcpy+0xa>
    66e2:	01 90       	ld	r0, Z+
    66e4:	0d 92       	st	X+, r0
    66e6:	41 50       	subi	r20, 0x01	; 1
    66e8:	50 40       	sbci	r21, 0x00	; 0
    66ea:	d8 f7       	brcc	.-10     	; 0x66e2 <memcpy+0x6>
    66ec:	08 95       	ret

000066ee <memmove>:
    66ee:	68 17       	cp	r22, r24
    66f0:	79 07       	cpc	r23, r25
    66f2:	68 f4       	brcc	.+26     	; 0x670e <memmove+0x20>
    66f4:	fb 01       	movw	r30, r22
    66f6:	dc 01       	movw	r26, r24
    66f8:	e4 0f       	add	r30, r20
    66fa:	f5 1f       	adc	r31, r21
    66fc:	a4 0f       	add	r26, r20
    66fe:	b5 1f       	adc	r27, r21
    6700:	02 c0       	rjmp	.+4      	; 0x6706 <memmove+0x18>
    6702:	02 90       	ld	r0, -Z
    6704:	0e 92       	st	-X, r0
    6706:	41 50       	subi	r20, 0x01	; 1
    6708:	50 40       	sbci	r21, 0x00	; 0
    670a:	d8 f7       	brcc	.-10     	; 0x6702 <memmove+0x14>
    670c:	08 95       	ret
    670e:	0c 94 6e 33 	jmp	0x66dc	; 0x66dc <memcpy>

00006712 <memset>:
    6712:	dc 01       	movw	r26, r24
    6714:	01 c0       	rjmp	.+2      	; 0x6718 <memset+0x6>
    6716:	6d 93       	st	X+, r22
    6718:	41 50       	subi	r20, 0x01	; 1
    671a:	50 40       	sbci	r21, 0x00	; 0
    671c:	e0 f7       	brcc	.-8      	; 0x6716 <memset+0x4>
    671e:	08 95       	ret

00006720 <strcpy>:
    6720:	fb 01       	movw	r30, r22
    6722:	dc 01       	movw	r26, r24
    6724:	01 90       	ld	r0, Z+
    6726:	0d 92       	st	X+, r0
    6728:	00 20       	and	r0, r0
    672a:	e1 f7       	brne	.-8      	; 0x6724 <strcpy+0x4>
    672c:	08 95       	ret

0000672e <__epilogue_restores__>:
    672e:	2a 88       	ldd	r2, Y+18	; 0x12
    6730:	39 88       	ldd	r3, Y+17	; 0x11
    6732:	48 88       	ldd	r4, Y+16	; 0x10
    6734:	5f 84       	ldd	r5, Y+15	; 0x0f
    6736:	6e 84       	ldd	r6, Y+14	; 0x0e
    6738:	7d 84       	ldd	r7, Y+13	; 0x0d
    673a:	8c 84       	ldd	r8, Y+12	; 0x0c
    673c:	9b 84       	ldd	r9, Y+11	; 0x0b
    673e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6740:	b9 84       	ldd	r11, Y+9	; 0x09
    6742:	c8 84       	ldd	r12, Y+8	; 0x08
    6744:	df 80       	ldd	r13, Y+7	; 0x07
    6746:	ee 80       	ldd	r14, Y+6	; 0x06
    6748:	fd 80       	ldd	r15, Y+5	; 0x05
    674a:	0c 81       	ldd	r16, Y+4	; 0x04
    674c:	1b 81       	ldd	r17, Y+3	; 0x03
    674e:	aa 81       	ldd	r26, Y+2	; 0x02
    6750:	b9 81       	ldd	r27, Y+1	; 0x01
    6752:	ce 0f       	add	r28, r30
    6754:	d1 1d       	adc	r29, r1
    6756:	0f b6       	in	r0, 0x3f	; 63
    6758:	f8 94       	cli
    675a:	de bf       	out	0x3e, r29	; 62
    675c:	0f be       	out	0x3f, r0	; 63
    675e:	cd bf       	out	0x3d, r28	; 61
    6760:	ed 01       	movw	r28, r26
    6762:	08 95       	ret

00006764 <_exit>:
    6764:	f8 94       	cli

00006766 <__stop_program>:
    6766:	ff cf       	rjmp	.-2      	; 0x6766 <__stop_program>
